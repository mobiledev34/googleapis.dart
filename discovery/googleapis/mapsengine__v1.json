{
    "auth": {
        "oauth2": {
            "scopes": {
                "https://www.googleapis.com/auth/mapsengine": {
                    "description": "View and manage your Google My Maps data"
                },
                "https://www.googleapis.com/auth/mapsengine.readonly": {
                    "description": "View your Google My Maps data"
                }
            }
        }
    },
    "basePath": "/mapsengine/v1/",
    "baseUrl": "https://www.googleapis.com/mapsengine/v1/",
    "batchPath": "batch",
    "canonicalName": "Maps Engine",
    "description": "The Google Maps Engine API allows developers to store and query geospatial vector and raster data.",
    "discoveryVersion": "v1",
    "documentationLink": "https://developers.google.com/maps-engine/",
    "etag": "\"ye6orv2F-1npMW3u9suM3a7C5Bo/v-eOcb_2yOgozMnj3_3VkSFffEI\"",
    "icons": {
        "x16": "https://www.google.com/images/icons/product/maps_engine-16.png",
        "x32": "https://www.google.com/images/icons/product/maps_engine-32.png"
    },
    "id": "mapsengine:v1",
    "kind": "discovery#restDescription",
    "name": "mapsengine",
    "ownerDomain": "google.com",
    "ownerName": "Google",
    "parameters": {
        "alt": {
            "default": "json",
            "description": "Data format for the response.",
            "enum": [
                "json"
            ],
            "enumDescriptions": [
                "Responses with Content-Type of application/json"
            ],
            "location": "query",
            "type": "string"
        },
        "fields": {
            "description": "Selector specifying which fields to include in a partial response.",
            "location": "query",
            "type": "string"
        },
        "key": {
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
            "location": "query",
            "type": "string"
        },
        "oauth_token": {
            "description": "OAuth 2.0 token for the current user.",
            "location": "query",
            "type": "string"
        },
        "prettyPrint": {
            "default": "true",
            "description": "Returns response with indentations and line breaks.",
            "location": "query",
            "type": "boolean"
        },
        "quotaUser": {
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.",
            "location": "query",
            "type": "string"
        },
        "userIp": {
            "description": "IP address of the site where the request originates. Use this if you want to enforce per-user limits.",
            "location": "query",
            "type": "string"
        }
    },
    "protocol": "rest",
    "resources": {
        "assets": {
            "methods": {
                "get": {
                    "description": "Return metadata for a particular asset.",
                    "httpMethod": "GET",
                    "id": "mapsengine.assets.get",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the asset.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "assets/{id}",
                    "response": {
                        "$ref": "Asset"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine",
                        "https://www.googleapis.com/auth/mapsengine.readonly"
                    ]
                },
                "list": {
                    "description": "Return all assets readable by the current user.",
                    "httpMethod": "GET",
                    "id": "mapsengine.assets.list",
                    "parameters": {
                        "bbox": {
                            "description": "A bounding box, expressed as \"west,south,east,north\". If set, only assets which intersect this bounding box will be returned.",
                            "location": "query",
                            "type": "string"
                        },
                        "createdAfter": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been created at or after this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "createdBefore": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been created at or before this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "creatorEmail": {
                            "description": "An email address representing a user. Returned assets that have been created by the user associated with the provided email address.",
                            "location": "query",
                            "type": "string"
                        },
                        "maxResults": {
                            "description": "The maximum number of items to include in a single response page. The maximum supported value is 100.",
                            "format": "uint32",
                            "location": "query",
                            "type": "integer"
                        },
                        "modifiedAfter": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been modified at or after this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "modifiedBefore": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been modified at or before this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "pageToken": {
                            "description": "The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response.",
                            "location": "query",
                            "type": "string"
                        },
                        "projectId": {
                            "description": "The ID of a Maps Engine project, used to filter the response. To list all available projects with their IDs, send a Projects: list request. You can also find your project ID as the value of the DashboardPlace:cid URL parameter when signed in to mapsengine.google.com.",
                            "location": "query",
                            "type": "string"
                        },
                        "role": {
                            "description": "The role parameter indicates that the response should only contain assets where the current user has the specified level of access.",
                            "enum": [
                                "owner",
                                "reader",
                                "writer"
                            ],
                            "enumDescriptions": [
                                "The user can read, write and administer the asset.",
                                "The user can read the asset.",
                                "The user can read and write the asset."
                            ],
                            "location": "query",
                            "type": "string"
                        },
                        "search": {
                            "description": "An unstructured search string used to filter the set of results based on asset metadata.",
                            "location": "query",
                            "type": "string"
                        },
                        "tags": {
                            "description": "A comma separated list of tags. Returned assets will contain all the tags from the list.",
                            "location": "query",
                            "type": "string"
                        },
                        "type": {
                            "description": "A comma separated list of asset types. Returned assets will have one of the types from the provided list. Supported values are 'map', 'layer', 'rasterCollection' and 'table'.",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "assets",
                    "response": {
                        "$ref": "AssetsListResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine",
                        "https://www.googleapis.com/auth/mapsengine.readonly"
                    ]
                }
            },
            "resources": {
                "parents": {
                    "methods": {
                        "list": {
                            "description": "Return all parent ids of the specified asset.",
                            "httpMethod": "GET",
                            "id": "mapsengine.assets.parents.list",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the asset whose parents will be listed.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                },
                                "maxResults": {
                                    "description": "The maximum number of items to include in a single response page. The maximum supported value is 50.",
                                    "format": "uint32",
                                    "location": "query",
                                    "type": "integer"
                                },
                                "pageToken": {
                                    "description": "The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response.",
                                    "location": "query",
                                    "type": "string"
                                }
                            },
                            "path": "assets/{id}/parents",
                            "response": {
                                "$ref": "ParentsListResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine",
                                "https://www.googleapis.com/auth/mapsengine.readonly"
                            ]
                        }
                    }
                },
                "permissions": {
                    "methods": {
                        "list": {
                            "description": "Return all of the permissions for the specified asset.",
                            "httpMethod": "GET",
                            "id": "mapsengine.assets.permissions.list",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the asset whose permissions will be listed.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "assets/{id}/permissions",
                            "response": {
                                "$ref": "PermissionsListResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine",
                                "https://www.googleapis.com/auth/mapsengine.readonly"
                            ]
                        }
                    }
                }
            }
        },
        "layers": {
            "methods": {
                "cancelProcessing": {
                    "description": "Cancel processing on a layer asset.",
                    "httpMethod": "POST",
                    "id": "mapsengine.layers.cancelProcessing",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the layer.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "layers/{id}/cancelProcessing",
                    "response": {
                        "$ref": "ProcessResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                },
                "create": {
                    "description": "Create a layer asset.",
                    "httpMethod": "POST",
                    "id": "mapsengine.layers.create",
                    "parameters": {
                        "process": {
                            "description": "Whether to queue the created layer for processing.",
                            "location": "query",
                            "type": "boolean"
                        }
                    },
                    "path": "layers",
                    "request": {
                        "$ref": "Layer"
                    },
                    "response": {
                        "$ref": "Layer"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                },
                "delete": {
                    "description": "Delete a layer.",
                    "httpMethod": "DELETE",
                    "id": "mapsengine.layers.delete",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the layer. Only the layer creator or project owner are permitted to delete. If the layer is published, or included in a map, the request will fail. Unpublish the layer, and remove it from all maps prior to deleting.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "layers/{id}",
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                },
                "get": {
                    "description": "Return metadata for a particular layer.",
                    "httpMethod": "GET",
                    "id": "mapsengine.layers.get",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the layer.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        },
                        "version": {
                            "description": "Deprecated: The version parameter indicates which version of the layer should be returned. When version is set to published, the published version of the layer will be returned. Please use the layers.getPublished endpoint instead.",
                            "enum": [
                                "draft",
                                "published"
                            ],
                            "enumDescriptions": [
                                "The draft version.",
                                "The published version."
                            ],
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "layers/{id}",
                    "response": {
                        "$ref": "Layer"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine",
                        "https://www.googleapis.com/auth/mapsengine.readonly"
                    ]
                },
                "getPublished": {
                    "description": "Return the published metadata for a particular layer.",
                    "httpMethod": "GET",
                    "id": "mapsengine.layers.getPublished",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the layer.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "layers/{id}/published",
                    "response": {
                        "$ref": "PublishedLayer"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine",
                        "https://www.googleapis.com/auth/mapsengine.readonly"
                    ]
                },
                "list": {
                    "description": "Return all layers readable by the current user.",
                    "httpMethod": "GET",
                    "id": "mapsengine.layers.list",
                    "parameters": {
                        "bbox": {
                            "description": "A bounding box, expressed as \"west,south,east,north\". If set, only assets which intersect this bounding box will be returned.",
                            "location": "query",
                            "type": "string"
                        },
                        "createdAfter": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been created at or after this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "createdBefore": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been created at or before this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "creatorEmail": {
                            "description": "An email address representing a user. Returned assets that have been created by the user associated with the provided email address.",
                            "location": "query",
                            "type": "string"
                        },
                        "maxResults": {
                            "description": "The maximum number of items to include in a single response page. The maximum supported value is 100.",
                            "format": "uint32",
                            "location": "query",
                            "type": "integer"
                        },
                        "modifiedAfter": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been modified at or after this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "modifiedBefore": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been modified at or before this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "pageToken": {
                            "description": "The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response.",
                            "location": "query",
                            "type": "string"
                        },
                        "processingStatus": {
                            "enum": [
                                "complete",
                                "failed",
                                "notReady",
                                "processing",
                                "ready"
                            ],
                            "enumDescriptions": [
                                "The layer has completed processing.",
                                "The layer has failed processing.",
                                "The layer is not ready for processing.",
                                "The layer is processing.",
                                "The layer is ready for processing."
                            ],
                            "location": "query",
                            "type": "string"
                        },
                        "projectId": {
                            "description": "The ID of a Maps Engine project, used to filter the response. To list all available projects with their IDs, send a Projects: list request. You can also find your project ID as the value of the DashboardPlace:cid URL parameter when signed in to mapsengine.google.com.",
                            "location": "query",
                            "type": "string"
                        },
                        "role": {
                            "description": "The role parameter indicates that the response should only contain assets where the current user has the specified level of access.",
                            "enum": [
                                "owner",
                                "reader",
                                "writer"
                            ],
                            "enumDescriptions": [
                                "The user can read, write and administer the asset.",
                                "The user can read the asset.",
                                "The user can read and write the asset."
                            ],
                            "location": "query",
                            "type": "string"
                        },
                        "search": {
                            "description": "An unstructured search string used to filter the set of results based on asset metadata.",
                            "location": "query",
                            "type": "string"
                        },
                        "tags": {
                            "description": "A comma separated list of tags. Returned assets will contain all the tags from the list.",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "layers",
                    "response": {
                        "$ref": "LayersListResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine",
                        "https://www.googleapis.com/auth/mapsengine.readonly"
                    ]
                },
                "listPublished": {
                    "description": "Return all published layers readable by the current user.",
                    "httpMethod": "GET",
                    "id": "mapsengine.layers.listPublished",
                    "parameters": {
                        "maxResults": {
                            "description": "The maximum number of items to include in a single response page. The maximum supported value is 100.",
                            "format": "uint32",
                            "location": "query",
                            "type": "integer"
                        },
                        "pageToken": {
                            "description": "The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response.",
                            "location": "query",
                            "type": "string"
                        },
                        "projectId": {
                            "description": "The ID of a Maps Engine project, used to filter the response. To list all available projects with their IDs, send a Projects: list request. You can also find your project ID as the value of the DashboardPlace:cid URL parameter when signed in to mapsengine.google.com.",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "layers/published",
                    "response": {
                        "$ref": "PublishedLayersListResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine",
                        "https://www.googleapis.com/auth/mapsengine.readonly"
                    ]
                },
                "patch": {
                    "description": "Mutate a layer asset.",
                    "httpMethod": "PATCH",
                    "id": "mapsengine.layers.patch",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the layer.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "layers/{id}",
                    "request": {
                        "$ref": "Layer"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                },
                "process": {
                    "description": "Process a layer asset.",
                    "httpMethod": "POST",
                    "id": "mapsengine.layers.process",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the layer.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "layers/{id}/process",
                    "response": {
                        "$ref": "ProcessResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                },
                "publish": {
                    "description": "Publish a layer asset.",
                    "httpMethod": "POST",
                    "id": "mapsengine.layers.publish",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "force": {
                            "description": "If set to true, the API will allow publication of the layer even if it's out of date. If not true, you'll need to reprocess any out-of-date layer before publishing.",
                            "location": "query",
                            "type": "boolean"
                        },
                        "id": {
                            "description": "The ID of the layer.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "layers/{id}/publish",
                    "response": {
                        "$ref": "PublishResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                },
                "unpublish": {
                    "description": "Unpublish a layer asset.",
                    "httpMethod": "POST",
                    "id": "mapsengine.layers.unpublish",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the layer.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "layers/{id}/unpublish",
                    "response": {
                        "$ref": "PublishResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                }
            },
            "resources": {
                "parents": {
                    "methods": {
                        "list": {
                            "description": "Return all parent ids of the specified layer.",
                            "httpMethod": "GET",
                            "id": "mapsengine.layers.parents.list",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the layer whose parents will be listed.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                },
                                "maxResults": {
                                    "description": "The maximum number of items to include in a single response page. The maximum supported value is 50.",
                                    "format": "uint32",
                                    "location": "query",
                                    "type": "integer"
                                },
                                "pageToken": {
                                    "description": "The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response.",
                                    "location": "query",
                                    "type": "string"
                                }
                            },
                            "path": "layers/{id}/parents",
                            "response": {
                                "$ref": "ParentsListResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine",
                                "https://www.googleapis.com/auth/mapsengine.readonly"
                            ]
                        }
                    }
                },
                "permissions": {
                    "methods": {
                        "batchDelete": {
                            "description": "Remove permission entries from an already existing asset.",
                            "httpMethod": "POST",
                            "id": "mapsengine.layers.permissions.batchDelete",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the asset from which permissions will be removed.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "layers/{id}/permissions/batchDelete",
                            "request": {
                                "$ref": "PermissionsBatchDeleteRequest"
                            },
                            "response": {
                                "$ref": "PermissionsBatchDeleteResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine"
                            ]
                        },
                        "batchUpdate": {
                            "description": "Add or update permission entries to an already existing asset.\n\nAn asset can hold up to 20 different permission entries. Each batchInsert request is atomic.",
                            "httpMethod": "POST",
                            "id": "mapsengine.layers.permissions.batchUpdate",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the asset to which permissions will be added.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "layers/{id}/permissions/batchUpdate",
                            "request": {
                                "$ref": "PermissionsBatchUpdateRequest"
                            },
                            "response": {
                                "$ref": "PermissionsBatchUpdateResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine"
                            ]
                        },
                        "list": {
                            "description": "Return all of the permissions for the specified asset.",
                            "httpMethod": "GET",
                            "id": "mapsengine.layers.permissions.list",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the asset whose permissions will be listed.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "layers/{id}/permissions",
                            "response": {
                                "$ref": "PermissionsListResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine",
                                "https://www.googleapis.com/auth/mapsengine.readonly"
                            ]
                        }
                    }
                }
            }
        },
        "maps": {
            "methods": {
                "create": {
                    "description": "Create a map asset.",
                    "httpMethod": "POST",
                    "id": "mapsengine.maps.create",
                    "path": "maps",
                    "request": {
                        "$ref": "Map"
                    },
                    "response": {
                        "$ref": "Map"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                },
                "delete": {
                    "description": "Delete a map.",
                    "httpMethod": "DELETE",
                    "id": "mapsengine.maps.delete",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the map. Only the map creator or project owner are permitted to delete. If the map is published the request will fail. Unpublish the map prior to deleting.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "maps/{id}",
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                },
                "get": {
                    "description": "Return metadata for a particular map.",
                    "httpMethod": "GET",
                    "id": "mapsengine.maps.get",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the map.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        },
                        "version": {
                            "description": "Deprecated: The version parameter indicates which version of the map should be returned. When version is set to published, the published version of the map will be returned. Please use the maps.getPublished endpoint instead.",
                            "enum": [
                                "draft",
                                "published"
                            ],
                            "enumDescriptions": [
                                "The draft version.",
                                "The published version."
                            ],
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "maps/{id}",
                    "response": {
                        "$ref": "Map"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine",
                        "https://www.googleapis.com/auth/mapsengine.readonly"
                    ]
                },
                "getPublished": {
                    "description": "Return the published metadata for a particular map.",
                    "httpMethod": "GET",
                    "id": "mapsengine.maps.getPublished",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the map.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "maps/{id}/published",
                    "response": {
                        "$ref": "PublishedMap"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine",
                        "https://www.googleapis.com/auth/mapsengine.readonly"
                    ]
                },
                "list": {
                    "description": "Return all maps readable by the current user.",
                    "httpMethod": "GET",
                    "id": "mapsengine.maps.list",
                    "parameters": {
                        "bbox": {
                            "description": "A bounding box, expressed as \"west,south,east,north\". If set, only assets which intersect this bounding box will be returned.",
                            "location": "query",
                            "type": "string"
                        },
                        "createdAfter": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been created at or after this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "createdBefore": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been created at or before this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "creatorEmail": {
                            "description": "An email address representing a user. Returned assets that have been created by the user associated with the provided email address.",
                            "location": "query",
                            "type": "string"
                        },
                        "maxResults": {
                            "description": "The maximum number of items to include in a single response page. The maximum supported value is 100.",
                            "format": "uint32",
                            "location": "query",
                            "type": "integer"
                        },
                        "modifiedAfter": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been modified at or after this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "modifiedBefore": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been modified at or before this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "pageToken": {
                            "description": "The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response.",
                            "location": "query",
                            "type": "string"
                        },
                        "processingStatus": {
                            "enum": [
                                "complete",
                                "failed",
                                "notReady",
                                "processing"
                            ],
                            "enumDescriptions": [
                                "The map has completed processing.",
                                "The map has failed processing.",
                                "The map is not ready for processing.",
                                "The map is processing."
                            ],
                            "location": "query",
                            "type": "string"
                        },
                        "projectId": {
                            "description": "The ID of a Maps Engine project, used to filter the response. To list all available projects with their IDs, send a Projects: list request. You can also find your project ID as the value of the DashboardPlace:cid URL parameter when signed in to mapsengine.google.com.",
                            "location": "query",
                            "type": "string"
                        },
                        "role": {
                            "description": "The role parameter indicates that the response should only contain assets where the current user has the specified level of access.",
                            "enum": [
                                "owner",
                                "reader",
                                "writer"
                            ],
                            "enumDescriptions": [
                                "The user can read, write and administer the asset.",
                                "The user can read the asset.",
                                "The user can read and write the asset."
                            ],
                            "location": "query",
                            "type": "string"
                        },
                        "search": {
                            "description": "An unstructured search string used to filter the set of results based on asset metadata.",
                            "location": "query",
                            "type": "string"
                        },
                        "tags": {
                            "description": "A comma separated list of tags. Returned assets will contain all the tags from the list.",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "maps",
                    "response": {
                        "$ref": "MapsListResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine",
                        "https://www.googleapis.com/auth/mapsengine.readonly"
                    ]
                },
                "listPublished": {
                    "description": "Return all published maps readable by the current user.",
                    "httpMethod": "GET",
                    "id": "mapsengine.maps.listPublished",
                    "parameters": {
                        "maxResults": {
                            "description": "The maximum number of items to include in a single response page. The maximum supported value is 100.",
                            "format": "uint32",
                            "location": "query",
                            "type": "integer"
                        },
                        "pageToken": {
                            "description": "The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response.",
                            "location": "query",
                            "type": "string"
                        },
                        "projectId": {
                            "description": "The ID of a Maps Engine project, used to filter the response. To list all available projects with their IDs, send a Projects: list request. You can also find your project ID as the value of the DashboardPlace:cid URL parameter when signed in to mapsengine.google.com.",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "maps/published",
                    "response": {
                        "$ref": "PublishedMapsListResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine",
                        "https://www.googleapis.com/auth/mapsengine.readonly"
                    ]
                },
                "patch": {
                    "description": "Mutate a map asset.",
                    "httpMethod": "PATCH",
                    "id": "mapsengine.maps.patch",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the map.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "maps/{id}",
                    "request": {
                        "$ref": "Map"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                },
                "publish": {
                    "description": "Publish a map asset.",
                    "httpMethod": "POST",
                    "id": "mapsengine.maps.publish",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "force": {
                            "description": "If set to true, the API will allow publication of the map even if it's out of date. If false, the map must have a processingStatus of complete before publishing.",
                            "location": "query",
                            "type": "boolean"
                        },
                        "id": {
                            "description": "The ID of the map.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "maps/{id}/publish",
                    "response": {
                        "$ref": "PublishResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                },
                "unpublish": {
                    "description": "Unpublish a map asset.",
                    "httpMethod": "POST",
                    "id": "mapsengine.maps.unpublish",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the map.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "maps/{id}/unpublish",
                    "response": {
                        "$ref": "PublishResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                }
            },
            "resources": {
                "permissions": {
                    "methods": {
                        "batchDelete": {
                            "description": "Remove permission entries from an already existing asset.",
                            "httpMethod": "POST",
                            "id": "mapsengine.maps.permissions.batchDelete",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the asset from which permissions will be removed.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "maps/{id}/permissions/batchDelete",
                            "request": {
                                "$ref": "PermissionsBatchDeleteRequest"
                            },
                            "response": {
                                "$ref": "PermissionsBatchDeleteResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine"
                            ]
                        },
                        "batchUpdate": {
                            "description": "Add or update permission entries to an already existing asset.\n\nAn asset can hold up to 20 different permission entries. Each batchInsert request is atomic.",
                            "httpMethod": "POST",
                            "id": "mapsengine.maps.permissions.batchUpdate",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the asset to which permissions will be added.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "maps/{id}/permissions/batchUpdate",
                            "request": {
                                "$ref": "PermissionsBatchUpdateRequest"
                            },
                            "response": {
                                "$ref": "PermissionsBatchUpdateResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine"
                            ]
                        },
                        "list": {
                            "description": "Return all of the permissions for the specified asset.",
                            "httpMethod": "GET",
                            "id": "mapsengine.maps.permissions.list",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the asset whose permissions will be listed.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "maps/{id}/permissions",
                            "response": {
                                "$ref": "PermissionsListResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine",
                                "https://www.googleapis.com/auth/mapsengine.readonly"
                            ]
                        }
                    }
                }
            }
        },
        "projects": {
            "methods": {
                "list": {
                    "description": "Return all projects readable by the current user.",
                    "httpMethod": "GET",
                    "id": "mapsengine.projects.list",
                    "path": "projects",
                    "response": {
                        "$ref": "ProjectsListResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine",
                        "https://www.googleapis.com/auth/mapsengine.readonly"
                    ]
                }
            },
            "resources": {
                "icons": {
                    "methods": {
                        "create": {
                            "description": "Create an icon.",
                            "httpMethod": "POST",
                            "id": "mapsengine.projects.icons.create",
                            "mediaUpload": {
                                "accept": [
                                    "*/*"
                                ],
                                "maxSize": "100KB",
                                "protocols": {
                                    "resumable": {
                                        "multipart": true,
                                        "path": "/resumable/upload/mapsengine/v1/projects/{projectId}/icons"
                                    },
                                    "simple": {
                                        "multipart": true,
                                        "path": "/upload/mapsengine/v1/projects/{projectId}/icons"
                                    }
                                }
                            },
                            "parameterOrder": [
                                "projectId"
                            ],
                            "parameters": {
                                "projectId": {
                                    "description": "The ID of the project.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "projects/{projectId}/icons",
                            "request": {
                                "$ref": "Icon"
                            },
                            "response": {
                                "$ref": "Icon"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine"
                            ],
                            "supportsMediaUpload": true
                        },
                        "get": {
                            "description": "Return an icon or its associated metadata",
                            "httpMethod": "GET",
                            "id": "mapsengine.projects.icons.get",
                            "parameterOrder": [
                                "projectId",
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the icon.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                },
                                "projectId": {
                                    "description": "The ID of the project.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "projects/{projectId}/icons/{id}",
                            "response": {
                                "$ref": "Icon"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine",
                                "https://www.googleapis.com/auth/mapsengine.readonly"
                            ],
                            "supportsMediaDownload": true
                        },
                        "list": {
                            "description": "Return all icons in the current project",
                            "httpMethod": "GET",
                            "id": "mapsengine.projects.icons.list",
                            "parameterOrder": [
                                "projectId"
                            ],
                            "parameters": {
                                "maxResults": {
                                    "description": "The maximum number of items to include in a single response page. The maximum supported value is 50.",
                                    "format": "uint32",
                                    "location": "query",
                                    "type": "integer"
                                },
                                "pageToken": {
                                    "description": "The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "projectId": {
                                    "description": "The ID of the project.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "projects/{projectId}/icons",
                            "response": {
                                "$ref": "IconsListResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine",
                                "https://www.googleapis.com/auth/mapsengine.readonly"
                            ]
                        }
                    }
                }
            }
        },
        "rasterCollections": {
            "methods": {
                "cancelProcessing": {
                    "description": "Cancel processing on a raster collection asset.",
                    "httpMethod": "POST",
                    "id": "mapsengine.rasterCollections.cancelProcessing",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the raster collection.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "rasterCollections/{id}/cancelProcessing",
                    "response": {
                        "$ref": "ProcessResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                },
                "create": {
                    "description": "Create a raster collection asset.",
                    "httpMethod": "POST",
                    "id": "mapsengine.rasterCollections.create",
                    "path": "rasterCollections",
                    "request": {
                        "$ref": "RasterCollection"
                    },
                    "response": {
                        "$ref": "RasterCollection"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                },
                "delete": {
                    "description": "Delete a raster collection.",
                    "httpMethod": "DELETE",
                    "id": "mapsengine.rasterCollections.delete",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the raster collection. Only the raster collection creator or project owner are permitted to delete. If the rastor collection is included in a layer, the request will fail. Remove the raster collection from all layers prior to deleting.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "rasterCollections/{id}",
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                },
                "get": {
                    "description": "Return metadata for a particular raster collection.",
                    "httpMethod": "GET",
                    "id": "mapsengine.rasterCollections.get",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the raster collection.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "rasterCollections/{id}",
                    "response": {
                        "$ref": "RasterCollection"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine",
                        "https://www.googleapis.com/auth/mapsengine.readonly"
                    ]
                },
                "list": {
                    "description": "Return all raster collections readable by the current user.",
                    "httpMethod": "GET",
                    "id": "mapsengine.rasterCollections.list",
                    "parameters": {
                        "bbox": {
                            "description": "A bounding box, expressed as \"west,south,east,north\". If set, only assets which intersect this bounding box will be returned.",
                            "location": "query",
                            "type": "string"
                        },
                        "createdAfter": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been created at or after this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "createdBefore": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been created at or before this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "creatorEmail": {
                            "description": "An email address representing a user. Returned assets that have been created by the user associated with the provided email address.",
                            "location": "query",
                            "type": "string"
                        },
                        "maxResults": {
                            "description": "The maximum number of items to include in a single response page. The maximum supported value is 100.",
                            "format": "uint32",
                            "location": "query",
                            "type": "integer"
                        },
                        "modifiedAfter": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been modified at or after this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "modifiedBefore": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been modified at or before this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "pageToken": {
                            "description": "The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response.",
                            "location": "query",
                            "type": "string"
                        },
                        "processingStatus": {
                            "enum": [
                                "complete",
                                "failed",
                                "notReady",
                                "processing",
                                "ready"
                            ],
                            "enumDescriptions": [
                                "The raster collection has completed processing.",
                                "The raster collection has failed processing.",
                                "The raster collection is not ready for processing.",
                                "The raster collection is processing.",
                                "The raster collection is ready for processing."
                            ],
                            "location": "query",
                            "type": "string"
                        },
                        "projectId": {
                            "description": "The ID of a Maps Engine project, used to filter the response. To list all available projects with their IDs, send a Projects: list request. You can also find your project ID as the value of the DashboardPlace:cid URL parameter when signed in to mapsengine.google.com.",
                            "location": "query",
                            "type": "string"
                        },
                        "role": {
                            "description": "The role parameter indicates that the response should only contain assets where the current user has the specified level of access.",
                            "enum": [
                                "owner",
                                "reader",
                                "writer"
                            ],
                            "enumDescriptions": [
                                "The user can read, write and administer the asset.",
                                "The user can read the asset.",
                                "The user can read and write the asset."
                            ],
                            "location": "query",
                            "type": "string"
                        },
                        "search": {
                            "description": "An unstructured search string used to filter the set of results based on asset metadata.",
                            "location": "query",
                            "type": "string"
                        },
                        "tags": {
                            "description": "A comma separated list of tags. Returned assets will contain all the tags from the list.",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "rasterCollections",
                    "response": {
                        "$ref": "RasterCollectionsListResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine",
                        "https://www.googleapis.com/auth/mapsengine.readonly"
                    ]
                },
                "patch": {
                    "description": "Mutate a raster collection asset.",
                    "httpMethod": "PATCH",
                    "id": "mapsengine.rasterCollections.patch",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the raster collection.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "rasterCollections/{id}",
                    "request": {
                        "$ref": "RasterCollection"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                },
                "process": {
                    "description": "Process a raster collection asset.",
                    "httpMethod": "POST",
                    "id": "mapsengine.rasterCollections.process",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the raster collection.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "rasterCollections/{id}/process",
                    "response": {
                        "$ref": "ProcessResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                }
            },
            "resources": {
                "parents": {
                    "methods": {
                        "list": {
                            "description": "Return all parent ids of the specified raster collection.",
                            "httpMethod": "GET",
                            "id": "mapsengine.rasterCollections.parents.list",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the raster collection whose parents will be listed.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                },
                                "maxResults": {
                                    "description": "The maximum number of items to include in a single response page. The maximum supported value is 50.",
                                    "format": "uint32",
                                    "location": "query",
                                    "type": "integer"
                                },
                                "pageToken": {
                                    "description": "The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response.",
                                    "location": "query",
                                    "type": "string"
                                }
                            },
                            "path": "rasterCollections/{id}/parents",
                            "response": {
                                "$ref": "ParentsListResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine",
                                "https://www.googleapis.com/auth/mapsengine.readonly"
                            ]
                        }
                    }
                },
                "permissions": {
                    "methods": {
                        "batchDelete": {
                            "description": "Remove permission entries from an already existing asset.",
                            "httpMethod": "POST",
                            "id": "mapsengine.rasterCollections.permissions.batchDelete",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the asset from which permissions will be removed.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "rasterCollections/{id}/permissions/batchDelete",
                            "request": {
                                "$ref": "PermissionsBatchDeleteRequest"
                            },
                            "response": {
                                "$ref": "PermissionsBatchDeleteResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine"
                            ]
                        },
                        "batchUpdate": {
                            "description": "Add or update permission entries to an already existing asset.\n\nAn asset can hold up to 20 different permission entries. Each batchInsert request is atomic.",
                            "httpMethod": "POST",
                            "id": "mapsengine.rasterCollections.permissions.batchUpdate",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the asset to which permissions will be added.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "rasterCollections/{id}/permissions/batchUpdate",
                            "request": {
                                "$ref": "PermissionsBatchUpdateRequest"
                            },
                            "response": {
                                "$ref": "PermissionsBatchUpdateResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine"
                            ]
                        },
                        "list": {
                            "description": "Return all of the permissions for the specified asset.",
                            "httpMethod": "GET",
                            "id": "mapsengine.rasterCollections.permissions.list",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the asset whose permissions will be listed.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "rasterCollections/{id}/permissions",
                            "response": {
                                "$ref": "PermissionsListResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine",
                                "https://www.googleapis.com/auth/mapsengine.readonly"
                            ]
                        }
                    }
                },
                "rasters": {
                    "methods": {
                        "batchDelete": {
                            "description": "Remove rasters from an existing raster collection.\n\nUp to 50 rasters can be included in a single batchDelete request. Each batchDelete request is atomic.",
                            "httpMethod": "POST",
                            "id": "mapsengine.rasterCollections.rasters.batchDelete",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the raster collection to which these rasters belong.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "rasterCollections/{id}/rasters/batchDelete",
                            "request": {
                                "$ref": "RasterCollectionsRasterBatchDeleteRequest"
                            },
                            "response": {
                                "$ref": "RasterCollectionsRastersBatchDeleteResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine"
                            ]
                        },
                        "batchInsert": {
                            "description": "Add rasters to an existing raster collection. Rasters must be successfully processed in order to be added to a raster collection.\n\nUp to 50 rasters can be included in a single batchInsert request. Each batchInsert request is atomic.",
                            "httpMethod": "POST",
                            "id": "mapsengine.rasterCollections.rasters.batchInsert",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the raster collection to which these rasters belong.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "rasterCollections/{id}/rasters/batchInsert",
                            "request": {
                                "$ref": "RasterCollectionsRastersBatchInsertRequest"
                            },
                            "response": {
                                "$ref": "RasterCollectionsRastersBatchInsertResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine"
                            ]
                        },
                        "list": {
                            "description": "Return all rasters within a raster collection.",
                            "httpMethod": "GET",
                            "id": "mapsengine.rasterCollections.rasters.list",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "bbox": {
                                    "description": "A bounding box, expressed as \"west,south,east,north\". If set, only assets which intersect this bounding box will be returned.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "createdAfter": {
                                    "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been created at or after this time.",
                                    "format": "date-time",
                                    "location": "query",
                                    "type": "string"
                                },
                                "createdBefore": {
                                    "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been created at or before this time.",
                                    "format": "date-time",
                                    "location": "query",
                                    "type": "string"
                                },
                                "creatorEmail": {
                                    "description": "An email address representing a user. Returned assets that have been created by the user associated with the provided email address.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "id": {
                                    "description": "The ID of the raster collection to which these rasters belong.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                },
                                "maxResults": {
                                    "description": "The maximum number of items to include in a single response page. The maximum supported value is 100.",
                                    "format": "uint32",
                                    "location": "query",
                                    "type": "integer"
                                },
                                "modifiedAfter": {
                                    "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been modified at or after this time.",
                                    "format": "date-time",
                                    "location": "query",
                                    "type": "string"
                                },
                                "modifiedBefore": {
                                    "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been modified at or before this time.",
                                    "format": "date-time",
                                    "location": "query",
                                    "type": "string"
                                },
                                "pageToken": {
                                    "description": "The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "role": {
                                    "description": "The role parameter indicates that the response should only contain assets where the current user has the specified level of access.",
                                    "enum": [
                                        "owner",
                                        "reader",
                                        "writer"
                                    ],
                                    "enumDescriptions": [
                                        "The user can read, write and administer the asset.",
                                        "The user can read the asset.",
                                        "The user can read and write the asset."
                                    ],
                                    "location": "query",
                                    "type": "string"
                                },
                                "search": {
                                    "description": "An unstructured search string used to filter the set of results based on asset metadata.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "tags": {
                                    "description": "A comma separated list of tags. Returned assets will contain all the tags from the list.",
                                    "location": "query",
                                    "type": "string"
                                }
                            },
                            "path": "rasterCollections/{id}/rasters",
                            "response": {
                                "$ref": "RasterCollectionsRastersListResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine",
                                "https://www.googleapis.com/auth/mapsengine.readonly"
                            ]
                        }
                    }
                }
            }
        },
        "rasters": {
            "methods": {
                "delete": {
                    "description": "Delete a raster.",
                    "httpMethod": "DELETE",
                    "id": "mapsengine.rasters.delete",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the raster. Only the raster creator or project owner are permitted to delete. If the raster is included in a layer or mosaic, the request will fail. Remove it from all parents prior to deleting.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "rasters/{id}",
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                },
                "get": {
                    "description": "Return metadata for a single raster.",
                    "httpMethod": "GET",
                    "id": "mapsengine.rasters.get",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the raster.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "rasters/{id}",
                    "response": {
                        "$ref": "Raster"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine",
                        "https://www.googleapis.com/auth/mapsengine.readonly"
                    ]
                },
                "list": {
                    "description": "Return all rasters readable by the current user.",
                    "httpMethod": "GET",
                    "id": "mapsengine.rasters.list",
                    "parameterOrder": [
                        "projectId"
                    ],
                    "parameters": {
                        "bbox": {
                            "description": "A bounding box, expressed as \"west,south,east,north\". If set, only assets which intersect this bounding box will be returned.",
                            "location": "query",
                            "type": "string"
                        },
                        "createdAfter": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been created at or after this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "createdBefore": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been created at or before this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "creatorEmail": {
                            "description": "An email address representing a user. Returned assets that have been created by the user associated with the provided email address.",
                            "location": "query",
                            "type": "string"
                        },
                        "maxResults": {
                            "description": "The maximum number of items to include in a single response page. The maximum supported value is 100.",
                            "format": "uint32",
                            "location": "query",
                            "type": "integer"
                        },
                        "modifiedAfter": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been modified at or after this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "modifiedBefore": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been modified at or before this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "pageToken": {
                            "description": "The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response.",
                            "location": "query",
                            "type": "string"
                        },
                        "processingStatus": {
                            "enum": [
                                "complete",
                                "failed",
                                "notReady",
                                "processing",
                                "ready"
                            ],
                            "enumDescriptions": [
                                "The raster has completed processing.",
                                "The raster has failed processing.",
                                "The raster is not ready for processing.",
                                "The raster is processing.",
                                "The raster is ready for processing."
                            ],
                            "location": "query",
                            "type": "string"
                        },
                        "projectId": {
                            "description": "The ID of a Maps Engine project, used to filter the response. To list all available projects with their IDs, send a Projects: list request. You can also find your project ID as the value of the DashboardPlace:cid URL parameter when signed in to mapsengine.google.com.",
                            "location": "query",
                            "required": true,
                            "type": "string"
                        },
                        "role": {
                            "description": "The role parameter indicates that the response should only contain assets where the current user has the specified level of access.",
                            "enum": [
                                "owner",
                                "reader",
                                "writer"
                            ],
                            "enumDescriptions": [
                                "The user can read, write and administer the asset.",
                                "The user can read the asset.",
                                "The user can read and write the asset."
                            ],
                            "location": "query",
                            "type": "string"
                        },
                        "search": {
                            "description": "An unstructured search string used to filter the set of results based on asset metadata.",
                            "location": "query",
                            "type": "string"
                        },
                        "tags": {
                            "description": "A comma separated list of tags. Returned assets will contain all the tags from the list.",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "rasters",
                    "response": {
                        "$ref": "RastersListResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine",
                        "https://www.googleapis.com/auth/mapsengine.readonly"
                    ]
                },
                "patch": {
                    "description": "Mutate a raster asset.",
                    "httpMethod": "PATCH",
                    "id": "mapsengine.rasters.patch",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the raster.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "rasters/{id}",
                    "request": {
                        "$ref": "Raster"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                },
                "process": {
                    "description": "Process a raster asset.",
                    "httpMethod": "POST",
                    "id": "mapsengine.rasters.process",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the raster.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "rasters/{id}/process",
                    "response": {
                        "$ref": "ProcessResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                },
                "upload": {
                    "description": "Create a skeleton raster asset for upload.",
                    "httpMethod": "POST",
                    "id": "mapsengine.rasters.upload",
                    "path": "rasters/upload",
                    "request": {
                        "$ref": "Raster"
                    },
                    "response": {
                        "$ref": "Raster"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                }
            },
            "resources": {
                "files": {
                    "methods": {
                        "insert": {
                            "description": "Upload a file to a raster asset.",
                            "httpMethod": "POST",
                            "id": "mapsengine.rasters.files.insert",
                            "mediaUpload": {
                                "accept": [
                                    "*/*"
                                ],
                                "maxSize": "10GB",
                                "protocols": {
                                    "resumable": {
                                        "multipart": true,
                                        "path": "/resumable/upload/mapsengine/v1/rasters/{id}/files"
                                    },
                                    "simple": {
                                        "multipart": true,
                                        "path": "/upload/mapsengine/v1/rasters/{id}/files"
                                    }
                                }
                            },
                            "parameterOrder": [
                                "id",
                                "filename"
                            ],
                            "parameters": {
                                "filename": {
                                    "description": "The file name of this uploaded file.",
                                    "location": "query",
                                    "required": true,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "The ID of the raster asset.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "rasters/{id}/files",
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine"
                            ],
                            "supportsMediaUpload": true
                        }
                    }
                },
                "parents": {
                    "methods": {
                        "list": {
                            "description": "Return all parent ids of the specified rasters.",
                            "httpMethod": "GET",
                            "id": "mapsengine.rasters.parents.list",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the rasters whose parents will be listed.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                },
                                "maxResults": {
                                    "description": "The maximum number of items to include in a single response page. The maximum supported value is 50.",
                                    "format": "uint32",
                                    "location": "query",
                                    "type": "integer"
                                },
                                "pageToken": {
                                    "description": "The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response.",
                                    "location": "query",
                                    "type": "string"
                                }
                            },
                            "path": "rasters/{id}/parents",
                            "response": {
                                "$ref": "ParentsListResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine",
                                "https://www.googleapis.com/auth/mapsengine.readonly"
                            ]
                        }
                    }
                },
                "permissions": {
                    "methods": {
                        "batchDelete": {
                            "description": "Remove permission entries from an already existing asset.",
                            "httpMethod": "POST",
                            "id": "mapsengine.rasters.permissions.batchDelete",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the asset from which permissions will be removed.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "rasters/{id}/permissions/batchDelete",
                            "request": {
                                "$ref": "PermissionsBatchDeleteRequest"
                            },
                            "response": {
                                "$ref": "PermissionsBatchDeleteResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine"
                            ]
                        },
                        "batchUpdate": {
                            "description": "Add or update permission entries to an already existing asset.\n\nAn asset can hold up to 20 different permission entries. Each batchInsert request is atomic.",
                            "httpMethod": "POST",
                            "id": "mapsengine.rasters.permissions.batchUpdate",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the asset to which permissions will be added.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "rasters/{id}/permissions/batchUpdate",
                            "request": {
                                "$ref": "PermissionsBatchUpdateRequest"
                            },
                            "response": {
                                "$ref": "PermissionsBatchUpdateResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine"
                            ]
                        },
                        "list": {
                            "description": "Return all of the permissions for the specified asset.",
                            "httpMethod": "GET",
                            "id": "mapsengine.rasters.permissions.list",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the asset whose permissions will be listed.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "rasters/{id}/permissions",
                            "response": {
                                "$ref": "PermissionsListResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine",
                                "https://www.googleapis.com/auth/mapsengine.readonly"
                            ]
                        }
                    }
                }
            }
        },
        "tables": {
            "methods": {
                "create": {
                    "description": "Create a table asset.",
                    "httpMethod": "POST",
                    "id": "mapsengine.tables.create",
                    "path": "tables",
                    "request": {
                        "$ref": "Table"
                    },
                    "response": {
                        "$ref": "Table"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                },
                "delete": {
                    "description": "Delete a table.",
                    "httpMethod": "DELETE",
                    "id": "mapsengine.tables.delete",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the table. Only the table creator or project owner are permitted to delete. If the table is included in a layer, the request will fail. Remove it from all layers prior to deleting.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "tables/{id}",
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                },
                "get": {
                    "description": "Return metadata for a particular table, including the schema.",
                    "httpMethod": "GET",
                    "id": "mapsengine.tables.get",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the table.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        },
                        "version": {
                            "enum": [
                                "draft",
                                "published"
                            ],
                            "enumDescriptions": [
                                "The draft version.",
                                "The published version."
                            ],
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "tables/{id}",
                    "response": {
                        "$ref": "Table"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine",
                        "https://www.googleapis.com/auth/mapsengine.readonly"
                    ]
                },
                "list": {
                    "description": "Return all tables readable by the current user.",
                    "httpMethod": "GET",
                    "id": "mapsengine.tables.list",
                    "parameters": {
                        "bbox": {
                            "description": "A bounding box, expressed as \"west,south,east,north\". If set, only assets which intersect this bounding box will be returned.",
                            "location": "query",
                            "type": "string"
                        },
                        "createdAfter": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been created at or after this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "createdBefore": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been created at or before this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "creatorEmail": {
                            "description": "An email address representing a user. Returned assets that have been created by the user associated with the provided email address.",
                            "location": "query",
                            "type": "string"
                        },
                        "maxResults": {
                            "description": "The maximum number of items to include in a single response page. The maximum supported value is 100.",
                            "format": "uint32",
                            "location": "query",
                            "type": "integer"
                        },
                        "modifiedAfter": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been modified at or after this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "modifiedBefore": {
                            "description": "An RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z). Returned assets will have been modified at or before this time.",
                            "format": "date-time",
                            "location": "query",
                            "type": "string"
                        },
                        "pageToken": {
                            "description": "The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response.",
                            "location": "query",
                            "type": "string"
                        },
                        "processingStatus": {
                            "enum": [
                                "complete",
                                "failed",
                                "notReady",
                                "processing",
                                "ready"
                            ],
                            "enumDescriptions": [
                                "The table has completed processing.",
                                "The table has failed processing.",
                                "The table is not ready for processing.",
                                "The table is processing.",
                                "The table is ready for processing."
                            ],
                            "location": "query",
                            "type": "string"
                        },
                        "projectId": {
                            "description": "The ID of a Maps Engine project, used to filter the response. To list all available projects with their IDs, send a Projects: list request. You can also find your project ID as the value of the DashboardPlace:cid URL parameter when signed in to mapsengine.google.com.",
                            "location": "query",
                            "type": "string"
                        },
                        "role": {
                            "description": "The role parameter indicates that the response should only contain assets where the current user has the specified level of access.",
                            "enum": [
                                "owner",
                                "reader",
                                "writer"
                            ],
                            "enumDescriptions": [
                                "The user can read, write and administer the asset.",
                                "The user can read the asset.",
                                "The user can read and write the asset."
                            ],
                            "location": "query",
                            "type": "string"
                        },
                        "search": {
                            "description": "An unstructured search string used to filter the set of results based on asset metadata.",
                            "location": "query",
                            "type": "string"
                        },
                        "tags": {
                            "description": "A comma separated list of tags. Returned assets will contain all the tags from the list.",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "tables",
                    "response": {
                        "$ref": "TablesListResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine",
                        "https://www.googleapis.com/auth/mapsengine.readonly"
                    ]
                },
                "patch": {
                    "description": "Mutate a table asset.",
                    "httpMethod": "PATCH",
                    "id": "mapsengine.tables.patch",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the table.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "tables/{id}",
                    "request": {
                        "$ref": "Table"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                },
                "process": {
                    "description": "Process a table asset.",
                    "httpMethod": "POST",
                    "id": "mapsengine.tables.process",
                    "parameterOrder": [
                        "id"
                    ],
                    "parameters": {
                        "id": {
                            "description": "The ID of the table.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "tables/{id}/process",
                    "response": {
                        "$ref": "ProcessResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                },
                "upload": {
                    "description": "Create a placeholder table asset to which table files can be uploaded.\nOnce the placeholder has been created, files are uploaded to the https://www.googleapis.com/upload/mapsengine/v1/tables/table_id/files endpoint.\nSee Table Upload in the Developer's Guide or Table.files: insert in the reference documentation for more information.",
                    "httpMethod": "POST",
                    "id": "mapsengine.tables.upload",
                    "path": "tables/upload",
                    "request": {
                        "$ref": "Table"
                    },
                    "response": {
                        "$ref": "Table"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/mapsengine"
                    ]
                }
            },
            "resources": {
                "features": {
                    "methods": {
                        "batchDelete": {
                            "description": "Delete all features matching the given IDs.",
                            "httpMethod": "POST",
                            "id": "mapsengine.tables.features.batchDelete",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the table that contains the features to be deleted.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "tables/{id}/features/batchDelete",
                            "request": {
                                "$ref": "FeaturesBatchDeleteRequest"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine"
                            ]
                        },
                        "batchInsert": {
                            "description": "Append features to an existing table.\n\nA single batchInsert request can create:\n\n- Up to 50 features.\n- A combined total of 10 000 vertices.\nFeature limits are documented in the Supported data formats and limits article of the Google Maps Engine help center. Note that free and paid accounts have different limits.\n\nFor more information about inserting features, read Creating features in the Google Maps Engine developer's guide.",
                            "httpMethod": "POST",
                            "id": "mapsengine.tables.features.batchInsert",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the table to append the features to.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "tables/{id}/features/batchInsert",
                            "request": {
                                "$ref": "FeaturesBatchInsertRequest"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine"
                            ]
                        },
                        "batchPatch": {
                            "description": "Update the supplied features.\n\nA single batchPatch request can update:\n\n- Up to 50 features.\n- A combined total of 10 000 vertices.\nFeature limits are documented in the Supported data formats and limits article of the Google Maps Engine help center. Note that free and paid accounts have different limits.\n\nFeature updates use HTTP PATCH semantics:\n\n- A supplied value replaces an existing value (if any) in that field.\n- Omitted fields remain unchanged.\n- Complex values in geometries and properties must be replaced as atomic units. For example, providing just the coordinates of a geometry is not allowed; the complete geometry, including type, must be supplied.\n- Setting a property's value to null deletes that property.\nFor more information about updating features, read Updating features in the Google Maps Engine developer's guide.",
                            "httpMethod": "POST",
                            "id": "mapsengine.tables.features.batchPatch",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the table containing the features to be patched.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "tables/{id}/features/batchPatch",
                            "request": {
                                "$ref": "FeaturesBatchPatchRequest"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine"
                            ]
                        },
                        "get": {
                            "description": "Return a single feature, given its ID.",
                            "httpMethod": "GET",
                            "id": "mapsengine.tables.features.get",
                            "parameterOrder": [
                                "tableId",
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the feature to get.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                },
                                "select": {
                                    "description": "A SQL-like projection clause used to specify returned properties. If this parameter is not included, all properties are returned.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "tableId": {
                                    "description": "The ID of the table.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                },
                                "version": {
                                    "description": "The table version to access. See Accessing Public Data for information.",
                                    "enum": [
                                        "draft",
                                        "published"
                                    ],
                                    "enumDescriptions": [
                                        "The draft version.",
                                        "The published version."
                                    ],
                                    "location": "query",
                                    "type": "string"
                                }
                            },
                            "path": "tables/{tableId}/features/{id}",
                            "response": {
                                "$ref": "Feature"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine",
                                "https://www.googleapis.com/auth/mapsengine.readonly"
                            ]
                        },
                        "list": {
                            "description": "Return all features readable by the current user.",
                            "httpMethod": "GET",
                            "id": "mapsengine.tables.features.list",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the table to which these features belong.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                },
                                "include": {
                                    "description": "A comma separated list of optional data to include. Optional data available: schema.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "intersects": {
                                    "description": "A geometry literal that specifies the spatial restriction of the query.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "limit": {
                                    "description": "The total number of features to return from the query, irrespective of the number of pages.",
                                    "format": "uint32",
                                    "location": "query",
                                    "type": "integer"
                                },
                                "maxResults": {
                                    "description": "The maximum number of items to include in the response, used for paging. The maximum supported value is 1000.",
                                    "format": "uint32",
                                    "location": "query",
                                    "type": "integer"
                                },
                                "orderBy": {
                                    "description": "An SQL-like order by clause used to sort results. If this parameter is not included, the order of features is undefined.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "pageToken": {
                                    "description": "The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "select": {
                                    "description": "A SQL-like projection clause used to specify returned properties. If this parameter is not included, all properties are returned.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "version": {
                                    "description": "The table version to access. See Accessing Public Data for information.",
                                    "enum": [
                                        "draft",
                                        "published"
                                    ],
                                    "enumDescriptions": [
                                        "The draft version.",
                                        "The published version."
                                    ],
                                    "location": "query",
                                    "type": "string"
                                },
                                "where": {
                                    "description": "An SQL-like predicate used to filter results.",
                                    "location": "query",
                                    "type": "string"
                                }
                            },
                            "path": "tables/{id}/features",
                            "response": {
                                "$ref": "FeaturesListResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine",
                                "https://www.googleapis.com/auth/mapsengine.readonly"
                            ]
                        }
                    }
                },
                "files": {
                    "methods": {
                        "insert": {
                            "description": "Upload a file to a placeholder table asset. See Table Upload in the Developer's Guide for more information.\nSupported file types are listed in the Supported data formats and limits article of the Google Maps Engine help center.",
                            "httpMethod": "POST",
                            "id": "mapsengine.tables.files.insert",
                            "mediaUpload": {
                                "accept": [
                                    "*/*"
                                ],
                                "maxSize": "1GB",
                                "protocols": {
                                    "resumable": {
                                        "multipart": true,
                                        "path": "/resumable/upload/mapsengine/v1/tables/{id}/files"
                                    },
                                    "simple": {
                                        "multipart": true,
                                        "path": "/upload/mapsengine/v1/tables/{id}/files"
                                    }
                                }
                            },
                            "parameterOrder": [
                                "id",
                                "filename"
                            ],
                            "parameters": {
                                "filename": {
                                    "description": "The file name of this uploaded file.",
                                    "location": "query",
                                    "required": true,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "The ID of the table asset.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "tables/{id}/files",
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine"
                            ],
                            "supportsMediaUpload": true
                        }
                    }
                },
                "parents": {
                    "methods": {
                        "list": {
                            "description": "Return all parent ids of the specified table.",
                            "httpMethod": "GET",
                            "id": "mapsengine.tables.parents.list",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the table whose parents will be listed.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                },
                                "maxResults": {
                                    "description": "The maximum number of items to include in a single response page. The maximum supported value is 50.",
                                    "format": "uint32",
                                    "location": "query",
                                    "type": "integer"
                                },
                                "pageToken": {
                                    "description": "The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response.",
                                    "location": "query",
                                    "type": "string"
                                }
                            },
                            "path": "tables/{id}/parents",
                            "response": {
                                "$ref": "ParentsListResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine",
                                "https://www.googleapis.com/auth/mapsengine.readonly"
                            ]
                        }
                    }
                },
                "permissions": {
                    "methods": {
                        "batchDelete": {
                            "description": "Remove permission entries from an already existing asset.",
                            "httpMethod": "POST",
                            "id": "mapsengine.tables.permissions.batchDelete",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the asset from which permissions will be removed.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "tables/{id}/permissions/batchDelete",
                            "request": {
                                "$ref": "PermissionsBatchDeleteRequest"
                            },
                            "response": {
                                "$ref": "PermissionsBatchDeleteResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine"
                            ]
                        },
                        "batchUpdate": {
                            "description": "Add or update permission entries to an already existing asset.\n\nAn asset can hold up to 20 different permission entries. Each batchInsert request is atomic.",
                            "httpMethod": "POST",
                            "id": "mapsengine.tables.permissions.batchUpdate",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the asset to which permissions will be added.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "tables/{id}/permissions/batchUpdate",
                            "request": {
                                "$ref": "PermissionsBatchUpdateRequest"
                            },
                            "response": {
                                "$ref": "PermissionsBatchUpdateResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine"
                            ]
                        },
                        "list": {
                            "description": "Return all of the permissions for the specified asset.",
                            "httpMethod": "GET",
                            "id": "mapsengine.tables.permissions.list",
                            "parameterOrder": [
                                "id"
                            ],
                            "parameters": {
                                "id": {
                                    "description": "The ID of the asset whose permissions will be listed.",
                                    "location": "path",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "tables/{id}/permissions",
                            "response": {
                                "$ref": "PermissionsListResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/mapsengine",
                                "https://www.googleapis.com/auth/mapsengine.readonly"
                            ]
                        }
                    }
                }
            }
        }
    },
    "revision": "20150629",
    "rootUrl": "https://www.googleapis.com/",
    "schemas": {
        "AcquisitionTime": {
            "description": "Acquisition time represents acquired time of a raster.",
            "id": "AcquisitionTime",
            "properties": {
                "end": {
                    "description": "The end time if acquisition time is a range. The value is an RFC 3339 formatted date-time value (1970-01-01T00:00:00Z).",
                    "format": "date-time",
                    "type": "string"
                },
                "precision": {
                    "description": "The precision of acquisition time.",
                    "enum": [
                        "day",
                        "hour",
                        "minute",
                        "month",
                        "second",
                        "year"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "start": {
                    "description": "The acquisition time, or start time if acquisition time is a range. The value is an RFC 3339 formatted date-time value (1970-01-01T00:00:00Z).",
                    "format": "date-time",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Asset": {
            "description": "An asset is any Google Maps Engine resource that has a globally unique ID. Assets include maps, layers, vector tables, raster collections, and rasters. Projects and features are not considered assets.\n\nMore detailed information about an asset can be obtained by querying the asset's particular endpoint.",
            "id": "Asset",
            "properties": {
                "bbox": {
                    "description": "A rectangular bounding box which contains all of the data in this asset. The box is expressed as \\\"west, south, east, north\\\". The numbers represent latitude and longitude in decimal degrees.",
                    "items": {
                        "format": "double",
                        "type": "number"
                    },
                    "type": "array"
                },
                "creationTime": {
                    "description": "The creation time of this asset. The value is an RFC 3339-formatted date-time value (for example, 1970-01-01T00:00:00Z).",
                    "format": "date-time",
                    "type": "string"
                },
                "creatorEmail": {
                    "description": "The email address of the creator of this asset. This is only returned on GET requests and not LIST requests.",
                    "type": "string"
                },
                "description": {
                    "description": "The asset's description.",
                    "type": "string"
                },
                "etag": {
                    "description": "The ETag, used to refer to the current version of the asset.",
                    "type": "string"
                },
                "id": {
                    "description": "The asset's globally unique ID.",
                    "type": "string"
                },
                "lastModifiedTime": {
                    "description": "The last modified time of this asset. The value is an RFC 3339-formatted date-time value (for example, 1970-01-01T00:00:00Z).",
                    "format": "date-time",
                    "type": "string"
                },
                "lastModifierEmail": {
                    "description": "The email address of the last modifier of this asset. This is only returned on GET requests and not LIST requests.",
                    "type": "string"
                },
                "name": {
                    "description": "The asset's name.",
                    "type": "string"
                },
                "projectId": {
                    "description": "The ID of the project to which the asset belongs.",
                    "type": "string"
                },
                "resource": {
                    "description": "The URL to query to retrieve the asset's complete object. The assets endpoint only returns high-level information about a resource.",
                    "type": "string"
                },
                "tags": {
                    "description": "An array of text strings, with each string representing a tag. More information about tags can be found in the Tagging data article of the Maps Engine help center.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "The type of asset. One of raster, rasterCollection, table, map, or layer.",
                    "enum": [
                        "layer",
                        "map",
                        "raster",
                        "rasterCollection",
                        "table"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "writersCanEditPermissions": {
                    "description": "If true, WRITERs of the asset are able to edit the asset permissions.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "AssetsListResponse": {
            "description": "The response returned by a call to resources.List.",
            "id": "AssetsListResponse",
            "properties": {
                "assets": {
                    "description": "Assets returned.",
                    "items": {
                        "$ref": "Asset"
                    },
                    "type": "array"
                },
                "nextPageToken": {
                    "description": "Next page token.",
                    "format": "byte",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Border": {
            "description": "Border in line style. Both color and width are required.",
            "id": "Border",
            "properties": {
                "color": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create",
                            "mapsengine.layers.patch"
                        ]
                    },
                    "description": "Color of the border.",
                    "type": "string"
                },
                "opacity": {
                    "description": "Opacity of the border.",
                    "format": "double",
                    "type": "number"
                },
                "width": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create",
                            "mapsengine.layers.patch"
                        ]
                    },
                    "description": "Width of the border, in pixels.",
                    "format": "double",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "Color": {
            "description": "Basic color used in styling.",
            "id": "Color",
            "properties": {
                "color": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create",
                            "mapsengine.layers.patch"
                        ]
                    },
                    "description": "The CSS style color, can be in format of \"red\" or \"#7733EE\".",
                    "type": "string"
                },
                "opacity": {
                    "description": "Opacity ranges from 0 to 1, inclusive. If not provided, default to 1.",
                    "format": "double",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "Datasource": {
            "id": "Datasource",
            "properties": {
                "id": {
                    "description": "The ID of a datasource.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Datasources": {
            "id": "Datasources",
            "items": {
                "$ref": "Datasource"
            },
            "type": "array"
        },
        "DisplayRule": {
            "description": "A display rule of the vector style.",
            "id": "DisplayRule",
            "properties": {
                "filters": {
                    "description": "This display rule will only be applied to features that match all of the filters here. If filters is empty, then the rule applies to all features.",
                    "items": {
                        "$ref": "Filter"
                    },
                    "type": "array"
                },
                "lineOptions": {
                    "$ref": "LineStyle",
                    "description": "Style applied to lines. Required for LineString Geometry."
                },
                "name": {
                    "description": "Display rule name. Name is not unique and cannot be used for identification purpose.",
                    "type": "string"
                },
                "pointOptions": {
                    "$ref": "PointStyle",
                    "description": "Style applied to points. Required for Point Geometry."
                },
                "polygonOptions": {
                    "$ref": "PolygonStyle",
                    "description": "Style applied to polygons. Required for Polygon Geometry."
                },
                "zoomLevels": {
                    "$ref": "ZoomLevels",
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create",
                            "mapsengine.layers.patch"
                        ]
                    },
                    "description": "The zoom levels that this display rule apply."
                }
            },
            "type": "object"
        },
        "Feature": {
            "description": "A feature within a table.",
            "id": "Feature",
            "properties": {
                "geometry": {
                    "$ref": "GeoJsonGeometry",
                    "description": "The geometry member of this Feature."
                },
                "properties": {
                    "$ref": "GeoJsonProperties",
                    "description": "Key/value pairs of this Feature."
                },
                "type": {
                    "default": "Feature",
                    "description": "Identifies this object as a feature.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FeatureInfo": {
            "description": "A feature info contains information about individual feature.",
            "id": "FeatureInfo",
            "properties": {
                "content": {
                    "description": "HTML template of the info window. If not provided, a default template with all attributes will be generated.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FeaturesBatchDeleteRequest": {
            "description": "The request sent to features.BatchDelete.",
            "id": "FeaturesBatchDeleteRequest",
            "properties": {
                "gx_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "primaryKeys": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "FeaturesBatchInsertRequest": {
            "description": "The request sent to features.Insert.",
            "id": "FeaturesBatchInsertRequest",
            "properties": {
                "features": {
                    "items": {
                        "$ref": "Feature"
                    },
                    "type": "array"
                },
                "normalizeGeometries": {
                    "default": "true",
                    "description": "If true, the server will normalize feature geometries. It is assumed that the South Pole is exterior to any polygons given. See here for a list of normalizations. If false, all feature geometries must be given already normalized. The points in all LinearRings must be listed in counter-clockwise order, and LinearRings may not intersect.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "FeaturesBatchPatchRequest": {
            "description": "The request sent to features.BatchPatch.",
            "id": "FeaturesBatchPatchRequest",
            "properties": {
                "features": {
                    "items": {
                        "$ref": "Feature"
                    },
                    "type": "array"
                },
                "normalizeGeometries": {
                    "default": "true",
                    "description": "If true, the server will normalize feature geometries. It is assumed that the South Pole is exterior to any polygons given. See here for a list of normalizations. If false, all feature geometries must be given already normalized. The points in all LinearRings must be listed in counter-clockwise order, and LinearRings may not intersect.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "FeaturesListResponse": {
            "description": "The response returned by a call to features.List.",
            "id": "FeaturesListResponse",
            "properties": {
                "allowedQueriesPerSecond": {
                    "description": "An indicator of the maximum rate at which queries may be made, if all queries were as expensive as this query.",
                    "format": "double",
                    "type": "number"
                },
                "features": {
                    "description": "Resources returned.",
                    "items": {
                        "$ref": "Feature"
                    },
                    "type": "array"
                },
                "nextPageToken": {
                    "description": "Next page token.",
                    "type": "string"
                },
                "schema": {
                    "$ref": "Schema",
                    "description": "The feature schema."
                },
                "type": {
                    "default": "FeatureCollection",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "File": {
            "description": "A single File, which is a component of an Asset.",
            "id": "File",
            "properties": {
                "filename": {
                    "annotations": {
                        "required": [
                            "mapsengine.rasters.upload",
                            "mapsengine.tables.upload"
                        ]
                    },
                    "description": "The name of the file.",
                    "type": "string"
                },
                "size": {
                    "description": "The size of the file in bytes.",
                    "format": "int64",
                    "type": "string"
                },
                "uploadStatus": {
                    "description": "The upload status of the file.",
                    "enum": [
                        "canceled",
                        "complete",
                        "failed",
                        "inProgress"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Filter": {
            "description": "Conditions for filtering features.",
            "id": "Filter",
            "properties": {
                "column": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create",
                            "mapsengine.layers.patch"
                        ]
                    },
                    "description": "The column name to filter on.",
                    "type": "string"
                },
                "operator": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create",
                            "mapsengine.layers.patch"
                        ]
                    },
                    "description": "Operation used to evaluate the filter.",
                    "enum": [
                        "!=",
                        "<",
                        "<=",
                        "==",
                        ">",
                        ">=",
                        "contains",
                        "endsWith",
                        "startsWith"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "value": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create",
                            "mapsengine.layers.patch"
                        ]
                    },
                    "description": "Value to be evaluated against attribute.",
                    "type": "any"
                }
            },
            "type": "object"
        },
        "GeoJsonGeometry": {
            "id": "GeoJsonGeometry",
            "type": "object",
            "variant": {
                "discriminant": "type",
                "map": [
                    {
                        "$ref": "GeoJsonGeometryCollection",
                        "type_value": "GeometryCollection"
                    },
                    {
                        "$ref": "GeoJsonLineString",
                        "type_value": "LineString"
                    },
                    {
                        "$ref": "GeoJsonMultiLineString",
                        "type_value": "MultiLineString"
                    },
                    {
                        "$ref": "GeoJsonMultiPoint",
                        "type_value": "MultiPoint"
                    },
                    {
                        "$ref": "GeoJsonMultiPolygon",
                        "type_value": "MultiPolygon"
                    },
                    {
                        "$ref": "GeoJsonPoint",
                        "type_value": "Point"
                    },
                    {
                        "$ref": "GeoJsonPolygon",
                        "type_value": "Polygon"
                    }
                ]
            }
        },
        "GeoJsonGeometryCollection": {
            "description": "A heterogenous collection of GeoJsonGeometry objects.",
            "id": "GeoJsonGeometryCollection",
            "properties": {
                "geometries": {
                    "description": "An array of geometry objects. There must be at least 2 different types of geometries in the array.",
                    "items": {
                        "$ref": "GeoJsonGeometry"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "Identifies this object as a GeoJsonGeometryCollection.",
                    "enum": [
                        "GeometryCollection"
                    ],
                    "enumDescriptions": [
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GeoJsonLineString": {
            "id": "GeoJsonLineString",
            "properties": {
                "coordinates": {
                    "description": "An array of two or more positions, representing a line.",
                    "items": {
                        "$ref": "GeoJsonPosition"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "Identifies this object as a GeoJsonLineString.",
                    "enum": [
                        "LineString"
                    ],
                    "enumDescriptions": [
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GeoJsonMultiLineString": {
            "description": "Multi Line String",
            "id": "GeoJsonMultiLineString",
            "properties": {
                "coordinates": {
                    "description": "An array of at least two GeoJsonLineString coordinate arrays.",
                    "items": {
                        "items": {
                            "$ref": "GeoJsonPosition"
                        },
                        "type": "array"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "Identifies this object as a GeoJsonMultiLineString.",
                    "enum": [
                        "MultiLineString"
                    ],
                    "enumDescriptions": [
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GeoJsonMultiPoint": {
            "id": "GeoJsonMultiPoint",
            "properties": {
                "coordinates": {
                    "description": "An array of at least two GeoJsonPoint coordinate arrays.",
                    "items": {
                        "$ref": "GeoJsonPosition"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "Identifies this object as a GeoJsonMultiPoint.",
                    "enum": [
                        "MultiPoint"
                    ],
                    "enumDescriptions": [
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GeoJsonMultiPolygon": {
            "id": "GeoJsonMultiPolygon",
            "properties": {
                "coordinates": {
                    "description": "An array of at least two GeoJsonPolygon coordinate arrays.",
                    "items": {
                        "items": {
                            "items": {
                                "$ref": "GeoJsonPosition"
                            },
                            "type": "array"
                        },
                        "type": "array"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "Identifies this object as a GeoJsonMultiPolygon.",
                    "enum": [
                        "MultiPolygon"
                    ],
                    "enumDescriptions": [
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GeoJsonPoint": {
            "id": "GeoJsonPoint",
            "properties": {
                "coordinates": {
                    "$ref": "GeoJsonPosition",
                    "description": "A single GeoJsonPosition, specifying the location of the point."
                },
                "type": {
                    "description": "Identifies this object as a GeoJsonPoint.",
                    "enum": [
                        "Point"
                    ],
                    "enumDescriptions": [
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GeoJsonPolygon": {
            "id": "GeoJsonPolygon",
            "properties": {
                "coordinates": {
                    "description": "An array of LinearRings. A LinearRing is a GeoJsonLineString which is closed (that is, the first and last GeoJsonPositions are equal), and which contains at least four GeoJsonPositions. For polygons with multiple rings, the first LinearRing is the exterior ring, and any subsequent rings are interior rings (that is, holes).",
                    "items": {
                        "items": {
                            "$ref": "GeoJsonPosition"
                        },
                        "type": "array"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "Identifies this object as a GeoJsonPolygon.",
                    "enum": [
                        "Polygon"
                    ],
                    "enumDescriptions": [
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GeoJsonPosition": {
            "description": "A position represents a geographical position as an array containing a longitude and a latitude, and optionally an altitude, in that order. All Geometry objects make use of positions to represent geometries as nested arrays. The structure of the array is governed by the type of the geometry.",
            "id": "GeoJsonPosition",
            "items": {
                "format": "double",
                "type": "number"
            },
            "type": "array"
        },
        "GeoJsonProperties": {
            "additionalProperties": {
                "description": "An arbitrary key-value pair. The key must be the name of a column in the table's schema, and the type of the value must correspond to the type specified in the schema.",
                "type": "any"
            },
            "description": "The properties associated with a feature.",
            "id": "GeoJsonProperties",
            "type": "object"
        },
        "Icon": {
            "description": "An icon is a user-uploaded image that can be used to style point geometries.",
            "id": "Icon",
            "properties": {
                "description": {
                    "description": "The description of this Icon, supplied by the author.",
                    "type": "string"
                },
                "id": {
                    "description": "An ID used to refer to this Icon.",
                    "type": "string"
                },
                "name": {
                    "annotations": {
                        "required": [
                            "mapsengine.projects.icons.create"
                        ]
                    },
                    "description": "The name of this Icon, supplied by the author.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "IconStyle": {
            "description": "Style for icon, this is part of point style.",
            "id": "IconStyle",
            "properties": {
                "id": {
                    "description": "Custom icon id.",
                    "type": "string"
                },
                "name": {
                    "description": "Stock icon name. To use a stock icon, prefix it with 'gx_'. See Stock icon names for valid icon names. For example, to specify small_red, set name to 'gx_small_red'.",
                    "type": "string"
                },
                "scaledShape": {
                    "$ref": "ScaledShape",
                    "description": "A scalable shape."
                },
                "scalingFunction": {
                    "$ref": "ScalingFunction",
                    "description": "The function used to scale shapes. Required when a scaledShape is specified."
                }
            },
            "type": "object"
        },
        "IconsListResponse": {
            "description": "The response returned by a call to icons.List.",
            "id": "IconsListResponse",
            "properties": {
                "icons": {
                    "description": "Resources returned.",
                    "items": {
                        "$ref": "Icon"
                    },
                    "type": "array"
                },
                "nextPageToken": {
                    "description": "Next page token.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LabelStyle": {
            "description": "Text label style.",
            "id": "LabelStyle",
            "properties": {
                "color": {
                    "description": "Color of the text. If not provided, default to black.",
                    "type": "string"
                },
                "column": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create",
                            "mapsengine.layers.patch"
                        ]
                    },
                    "description": "The column value of the feature to be displayed.",
                    "type": "string"
                },
                "fontStyle": {
                    "description": "Font style of the label, defaults to 'normal'.",
                    "enum": [
                        "italic",
                        "normal"
                    ],
                    "enumDescriptions": [
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "fontWeight": {
                    "description": "Font weight of the label, defaults to 'normal'.",
                    "enum": [
                        "bold",
                        "normal"
                    ],
                    "enumDescriptions": [
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "opacity": {
                    "description": "Opacity of the text.",
                    "format": "double",
                    "type": "number"
                },
                "outline": {
                    "$ref": "Color",
                    "description": "Outline color of the text."
                },
                "size": {
                    "description": "Font size of the label, in pixels. 8 <= size <= 15. If not provided, a default size will be provided.",
                    "format": "double",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "LatLngBox": {
            "description": "A rectangular geographic bounds.",
            "id": "LatLngBox",
            "items": {
                "format": "double",
                "type": "number"
            },
            "type": "array"
        },
        "Layer": {
            "description": "A Layer combines multiple datasources, with styling information, for presentation on a map.",
            "id": "Layer",
            "properties": {
                "bbox": {
                    "description": "A rectangular bounding box which contains all of the data in this Layer. The box is expressed as \\\"west, south, east, north\\\". The numbers represent latitude and longitude in decimal degrees.",
                    "items": {
                        "format": "double",
                        "type": "number"
                    },
                    "type": "array"
                },
                "creationTime": {
                    "description": "The creation time of this layer. The value is an RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z).",
                    "format": "date-time",
                    "type": "string"
                },
                "creatorEmail": {
                    "description": "The email address of the creator of this layer. This is only returned on GET requests and not LIST requests.",
                    "type": "string"
                },
                "datasourceType": {
                    "description": "Deprecated: The type of the datasources used to build this Layer. Note: This has been replaced by layerType, but is still available for now to maintain backward compatibility.",
                    "enum": [
                        "image",
                        "table"
                    ],
                    "enumDescriptions": [
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "datasources": {
                    "$ref": "Datasources",
                    "description": "An array of datasources used to build this layer. If layerType is \"image\", or layerType is not specified and datasourceType is \"image\", then each element in this array is a reference to an Image or RasterCollection. If layerType is \"vector\", or layerType is not specified and datasourceType is \"table\" then each element in this array is a reference to a Vector Table."
                },
                "description": {
                    "description": "The description of this Layer, supplied by the author.",
                    "type": "string"
                },
                "draftAccessList": {
                    "description": "Deprecated: The name of an access list of the Map Editor type. The user on whose behalf the request is being sent must be an editor on that access list. Note: Google Maps Engine no longer uses access lists. Instead, each asset has its own list of permissions. For backward compatibility, the API still accepts access lists for projects that are already using access lists. If you created a GME account/project after July 14th, 2014, you will not be able to send API requests that include access lists. Note: This is an input field only. It is not returned in response to a list or get request.",
                    "type": "string"
                },
                "etag": {
                    "description": "The ETag, used to refer to the current version of the asset.",
                    "type": "string"
                },
                "id": {
                    "description": "A globally unique ID, used to refer to this Layer.",
                    "type": "string"
                },
                "lastModifiedTime": {
                    "description": "The last modified time of this layer. The value is an RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z).",
                    "format": "date-time",
                    "type": "string"
                },
                "lastModifierEmail": {
                    "description": "The email address of the last modifier of this layer. This is only returned on GET requests and not LIST requests.",
                    "type": "string"
                },
                "layerType": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create"
                        ]
                    },
                    "description": "The type of the datasources used to build this Layer. This should be used instead of datasourceType. At least one of layerType and datasourceType and must be specified, but layerType takes precedence.",
                    "enum": [
                        "image",
                        "vector"
                    ],
                    "enumDescriptions": [
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "name": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create"
                        ]
                    },
                    "description": "The name of this Layer, supplied by the author.",
                    "type": "string"
                },
                "processingStatus": {
                    "description": "The processing status of this layer.",
                    "enum": [
                        "complete",
                        "failed",
                        "notReady",
                        "processing",
                        "ready"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "projectId": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create"
                        ]
                    },
                    "description": "The ID of the project that this Layer is in.",
                    "type": "string"
                },
                "publishedAccessList": {
                    "description": "Deprecated: The access list to whom view permissions are granted. The value must be the name of a Maps Engine access list of the Map Viewer type, and the user must be a viewer on that list. Note: Google Maps Engine no longer uses access lists. Instead, each asset has its own list of permissions. For backward compatibility, the API still accepts access lists for projects that are already using access lists. If you created a GME account/project after July 14th, 2014, you will not be able to send API requests that include access lists. Note: This is an input field only. It is not returned in response to a list or get request.",
                    "type": "string"
                },
                "publishingStatus": {
                    "description": "The publishing status of this layer.",
                    "enum": [
                        "notPublished",
                        "published"
                    ],
                    "enumDescriptions": [
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "style": {
                    "$ref": "VectorStyle",
                    "description": "The styling information for a vector layer. Note: Style information is returned in response to a get request but not a list request. After requesting a list of layers, you'll need to send a get request to retrieve the VectorStyles for each layer."
                },
                "tags": {
                    "$ref": "Tags",
                    "description": "Tags of this Layer."
                },
                "writersCanEditPermissions": {
                    "description": "If true, WRITERs of the asset are able to edit the asset permissions.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "LayersListResponse": {
            "description": "The response returned by a call to layers.List. Note: The list response does not include all the fields available in a layer. Refer to the layer resource description for details of the fields that are not included. You'll need to send a get request to retrieve the additional fields for each layer.",
            "id": "LayersListResponse",
            "properties": {
                "layers": {
                    "description": "Resources returned.",
                    "items": {
                        "$ref": "Layer"
                    },
                    "type": "array"
                },
                "nextPageToken": {
                    "description": "Next page token.",
                    "format": "byte",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LineStyle": {
            "description": "Style for lines.",
            "id": "LineStyle",
            "properties": {
                "border": {
                    "$ref": "Border",
                    "description": "Border of the line. 0 < border.width <= 5."
                },
                "dash": {
                    "description": "Dash defines the pattern of the line, the values are pixel lengths of alternating dash and gap. If dash is not provided, then it means a solid line. Dash can contain up to 10 values and must contain even number of values.",
                    "items": {
                        "format": "double",
                        "type": "number"
                    },
                    "type": "array"
                },
                "label": {
                    "$ref": "LabelStyle",
                    "description": "Label style for the line."
                },
                "stroke": {
                    "description": "Stroke of the line.",
                    "properties": {
                        "color": {
                            "annotations": {
                                "required": [
                                    "mapsengine.layers.create",
                                    "mapsengine.layers.patch"
                                ]
                            },
                            "description": "Color of the line.",
                            "type": "string"
                        },
                        "opacity": {
                            "description": "Opacity of the line.",
                            "format": "double",
                            "type": "number"
                        },
                        "width": {
                            "annotations": {
                                "required": [
                                    "mapsengine.layers.create",
                                    "mapsengine.layers.patch"
                                ]
                            },
                            "description": "Width of the line, in pixels. 0 <= width <= 10. If width is set to 0, the line will be invisible.",
                            "format": "double",
                            "type": "number"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "Map": {
            "description": "A Map is a collection of Layers, optionally contained within folders.",
            "id": "Map",
            "properties": {
                "bbox": {
                    "description": "A rectangular bounding box which contains all of the data in this Map. The box is expressed as \\\"west, south, east, north\\\". The numbers represent latitude and longitude in decimal degrees.",
                    "items": {
                        "format": "double",
                        "type": "number"
                    },
                    "type": "array"
                },
                "contents": {
                    "$ref": "MapContents",
                    "description": "The contents of this Map."
                },
                "creationTime": {
                    "description": "The creation time of this map. The value is an RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z).",
                    "format": "date-time",
                    "type": "string"
                },
                "creatorEmail": {
                    "description": "The email address of the creator of this map. This is only returned on GET requests and not LIST requests.",
                    "type": "string"
                },
                "defaultViewport": {
                    "$ref": "LatLngBox",
                    "description": "An array of four numbers (west, south, east, north) which defines the rectangular bounding box of the default viewport. The numbers represent latitude and longitude in decimal degrees."
                },
                "description": {
                    "description": "The description of this Map, supplied by the author.",
                    "type": "string"
                },
                "draftAccessList": {
                    "description": "Deprecated: The name of an access list of the Map Editor type. The user on whose behalf the request is being sent must be an editor on that access list. Note: Google Maps Engine no longer uses access lists. Instead, each asset has its own list of permissions. For backward compatibility, the API still accepts access lists for projects that are already using access lists. If you created a GME account/project after July 14th, 2014, you will not be able to send API requests that include access lists. Note: This is an input field only. It is not returned in response to a list or get request.",
                    "type": "string"
                },
                "etag": {
                    "description": "The ETag, used to refer to the current version of the asset.",
                    "type": "string"
                },
                "id": {
                    "description": "A globally unique ID, used to refer to this Map.",
                    "type": "string"
                },
                "lastModifiedTime": {
                    "description": "The last modified time of this map. The value is an RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z).",
                    "format": "date-time",
                    "type": "string"
                },
                "lastModifierEmail": {
                    "description": "The email address of the last modifier of this map. This is only returned on GET requests and not LIST requests.",
                    "type": "string"
                },
                "name": {
                    "annotations": {
                        "required": [
                            "mapsengine.maps.create"
                        ]
                    },
                    "description": "The name of this Map, supplied by the author.",
                    "type": "string"
                },
                "processingStatus": {
                    "description": "The processing status of this map. Map processing is automatically started once a map becomes ready for processing.",
                    "enum": [
                        "complete",
                        "failed",
                        "notReady",
                        "processing",
                        "ready"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "projectId": {
                    "annotations": {
                        "required": [
                            "mapsengine.maps.create"
                        ]
                    },
                    "description": "The ID of the project that this Map is in.",
                    "type": "string"
                },
                "publishedAccessList": {
                    "description": "Deprecated: The access list to whom view permissions are granted. The value must be the name of a Maps Engine access list of the Map Viewer type, and the user must be a viewer on that list. Note: Google Maps Engine no longer uses access lists. Instead, each asset has its own list of permissions. For backward compatibility, the API still accepts access lists for projects that are already using access lists. If you created a GME account/project after July 14th, 2014, you will not be able to send API requests that include access lists. This is an input field only. It is not returned in response to a list or get request.",
                    "type": "string"
                },
                "publishingStatus": {
                    "description": "The publishing status of this map.",
                    "enum": [
                        "notPublished",
                        "published"
                    ],
                    "enumDescriptions": [
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "tags": {
                    "$ref": "Tags",
                    "description": "Tags of this Map."
                },
                "versions": {
                    "description": "Deprecated: An array containing the available versions of this Map. Currently may only contain \"published\". The publishingStatus field should be used instead.",
                    "items": {
                        "default": "published",
                        "type": "string"
                    },
                    "type": "array"
                },
                "writersCanEditPermissions": {
                    "description": "If true, WRITERs of the asset are able to edit the asset permissions.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "MapContents": {
            "id": "MapContents",
            "items": {
                "$ref": "MapItem"
            },
            "type": "array"
        },
        "MapFolder": {
            "id": "MapFolder",
            "properties": {
                "contents": {
                    "items": {
                        "$ref": "MapItem"
                    },
                    "type": "array"
                },
                "defaultViewport": {
                    "description": "An array of four numbers (west, south, east, north) which defines the rectangular bounding box of the default viewport. The numbers represent latitude and longitude in decimal degrees.",
                    "items": {
                        "format": "double",
                        "type": "number"
                    },
                    "type": "array"
                },
                "expandable": {
                    "description": "The expandability setting of this MapFolder. If true, the folder can be expanded.",
                    "type": "boolean"
                },
                "key": {
                    "description": "A user defined alias for this MapFolder, specific to this Map.",
                    "type": "string"
                },
                "name": {
                    "annotations": {
                        "required": [
                            "mapsengine.maps.create",
                            "mapsengine.maps.patch"
                        ]
                    },
                    "description": "The name of this MapFolder.",
                    "type": "string"
                },
                "type": {
                    "annotations": {
                        "required": [
                            "mapsengine.maps.create",
                            "mapsengine.maps.patch"
                        ]
                    },
                    "description": "Identifies this object as a MapFolder.",
                    "enum": [
                        "folder"
                    ],
                    "enumDescriptions": [
                        ""
                    ],
                    "type": "string"
                },
                "visibility": {
                    "description": "The visibility setting of this MapFolder. One of \"defaultOn\" or \"defaultOff\".",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MapItem": {
            "id": "MapItem",
            "type": "object",
            "variant": {
                "discriminant": "type",
                "map": [
                    {
                        "$ref": "MapFolder",
                        "type_value": "folder"
                    },
                    {
                        "$ref": "MapKmlLink",
                        "type_value": "kmlLink"
                    },
                    {
                        "$ref": "MapLayer",
                        "type_value": "layer"
                    }
                ]
            }
        },
        "MapKmlLink": {
            "id": "MapKmlLink",
            "properties": {
                "defaultViewport": {
                    "description": "An array of four numbers (west, south, east, north) which defines the rectangular bounding box of the default viewport. The numbers represent latitude and longitude in decimal degrees.",
                    "items": {
                        "format": "double",
                        "type": "number"
                    },
                    "type": "array"
                },
                "kmlUrl": {
                    "annotations": {
                        "required": [
                            "mapsengine.maps.create",
                            "mapsengine.maps.patch"
                        ]
                    },
                    "description": "The URL to the KML file represented by this MapKmlLink.",
                    "type": "string"
                },
                "name": {
                    "annotations": {
                        "required": [
                            "mapsengine.maps.create",
                            "mapsengine.maps.patch"
                        ]
                    },
                    "description": "The name of this MapKmlLink.",
                    "type": "string"
                },
                "type": {
                    "annotations": {
                        "required": [
                            "mapsengine.maps.create",
                            "mapsengine.maps.patch"
                        ]
                    },
                    "description": "Identifies this object as a MapKmlLink.",
                    "enum": [
                        "kmlLink"
                    ],
                    "enumDescriptions": [
                        ""
                    ],
                    "type": "string"
                },
                "visibility": {
                    "description": "The visibility setting of this MapKmlLink. One of \"defaultOn\" or \"defaultOff\".",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MapLayer": {
            "id": "MapLayer",
            "properties": {
                "defaultViewport": {
                    "description": "An array of four numbers (west, south, east, north) which defines the rectangular bounding box of the default viewport. The numbers represent latitude and longitude in decimal degrees.",
                    "items": {
                        "format": "double",
                        "type": "number"
                    },
                    "type": "array"
                },
                "id": {
                    "annotations": {
                        "required": [
                            "mapsengine.maps.create",
                            "mapsengine.maps.patch"
                        ]
                    },
                    "description": "The ID of this MapLayer. This ID can be used to request more details about the layer.",
                    "type": "string"
                },
                "key": {
                    "description": "A user defined alias for this MapLayer, specific to this Map.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of this MapLayer.",
                    "type": "string"
                },
                "type": {
                    "annotations": {
                        "required": [
                            "mapsengine.maps.create",
                            "mapsengine.maps.patch"
                        ]
                    },
                    "description": "Identifies this object as a MapLayer.",
                    "enum": [
                        "layer"
                    ],
                    "enumDescriptions": [
                        ""
                    ],
                    "type": "string"
                },
                "visibility": {
                    "description": "The visibility setting of this MapLayer. One of \"defaultOn\" or \"defaultOff\".",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MapsListResponse": {
            "description": "The response returned by a call to maps.List.",
            "id": "MapsListResponse",
            "properties": {
                "maps": {
                    "description": "Resources returned.",
                    "items": {
                        "$ref": "Map"
                    },
                    "type": "array"
                },
                "nextPageToken": {
                    "description": "Next page token.",
                    "format": "byte",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Parent": {
            "description": "A list of the parents of an asset.",
            "id": "Parent",
            "properties": {
                "id": {
                    "description": "The ID of this parent.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ParentsListResponse": {
            "description": "The response returned by a call to parents.List.",
            "id": "ParentsListResponse",
            "properties": {
                "nextPageToken": {
                    "description": "Next page token.",
                    "type": "string"
                },
                "parents": {
                    "description": "The parent assets.",
                    "items": {
                        "$ref": "Parent"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Permission": {
            "description": "A permission defines the user or group that has access to an asset, and the type of access they have.",
            "id": "Permission",
            "properties": {
                "discoverable": {
                    "description": "Indicates whether a public asset is listed and can be found via a web search (value true), or is visible only to people who have a link to the asset (value false).",
                    "type": "boolean"
                },
                "id": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.permissions.batchUpdate",
                            "mapsengine.maps.permissions.batchUpdate",
                            "mapsengine.rasterCollections.permissions.batchUpdate",
                            "mapsengine.tables.permissions.batchUpdate"
                        ]
                    },
                    "description": "The unique identifier of the permission. This could be the email address of the user or group this permission refers to, or the string \"anyone\" for public permissions.",
                    "type": "string"
                },
                "role": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.permissions.batchUpdate",
                            "mapsengine.maps.permissions.batchUpdate",
                            "mapsengine.rasterCollections.permissions.batchUpdate",
                            "mapsengine.tables.permissions.batchUpdate"
                        ]
                    },
                    "description": "The type of access granted to this user or group.",
                    "enum": [
                        "owner",
                        "reader",
                        "viewer",
                        "writer"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "type": {
                    "description": "The account type.",
                    "enum": [
                        "anyone",
                        "group",
                        "user"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PermissionsBatchDeleteRequest": {
            "description": "The request sent to mapsengine.permissions.batchDelete.",
            "id": "PermissionsBatchDeleteRequest",
            "properties": {
                "ids": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.permissions.batchDelete",
                            "mapsengine.maps.permissions.batchDelete",
                            "mapsengine.rasterCollections.permissions.batchDelete",
                            "mapsengine.tables.permissions.batchDelete"
                        ]
                    },
                    "description": "An array of permission ids to be removed. This could be the email address of the user or group this permission refers to, or the string \"anyone\" for public permissions.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PermissionsBatchDeleteResponse": {
            "description": "The response returned by a call to mapsengine.permissions.batchDelete.",
            "id": "PermissionsBatchDeleteResponse",
            "type": "object"
        },
        "PermissionsBatchUpdateRequest": {
            "description": "The request sent to mapsengine.permissions.batchUpdate.",
            "id": "PermissionsBatchUpdateRequest",
            "properties": {
                "permissions": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.permissions.batchUpdate",
                            "mapsengine.maps.permissions.batchUpdate",
                            "mapsengine.rasterCollections.permissions.batchUpdate",
                            "mapsengine.tables.permissions.batchUpdate"
                        ]
                    },
                    "description": "The permissions to be inserted or updated.",
                    "items": {
                        "$ref": "Permission"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PermissionsBatchUpdateResponse": {
            "description": "The response returned by a call to mapsengine.permissions.batchUpdate.",
            "id": "PermissionsBatchUpdateResponse",
            "type": "object"
        },
        "PermissionsListResponse": {
            "id": "PermissionsListResponse",
            "properties": {
                "permissions": {
                    "description": "The set of permissions associated with this asset.",
                    "items": {
                        "$ref": "Permission"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PointStyle": {
            "description": "Style for points.",
            "id": "PointStyle",
            "properties": {
                "icon": {
                    "$ref": "IconStyle",
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create",
                            "mapsengine.layers.patch"
                        ]
                    },
                    "description": "Icon for the point; if it isn't null, exactly one of 'name', 'id' or 'scaledShape' must be set."
                },
                "label": {
                    "$ref": "LabelStyle",
                    "description": "Label style for the point."
                }
            },
            "type": "object"
        },
        "PolygonStyle": {
            "description": "Style for polygons.",
            "id": "PolygonStyle",
            "properties": {
                "fill": {
                    "$ref": "Color",
                    "description": "Fill color of the polygon. If not provided, the polygon will be transparent and not visible if there is no border."
                },
                "label": {
                    "$ref": "LabelStyle",
                    "description": "Label style for the polygon."
                },
                "stroke": {
                    "$ref": "Border",
                    "description": "Border of the polygon. 0 < border.width <= 10."
                }
            },
            "type": "object"
        },
        "ProcessResponse": {
            "description": "The response returned by a call to any asset's Process method.",
            "id": "ProcessResponse",
            "type": "object"
        },
        "Project": {
            "description": "A Maps Engine project groups a collection of resources.",
            "id": "Project",
            "properties": {
                "id": {
                    "description": "An ID used to refer to this Maps Engine project.",
                    "type": "string"
                },
                "name": {
                    "description": "A user provided name for this Maps Engine project.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ProjectsListResponse": {
            "description": "The response returned by a call to projects.List.",
            "id": "ProjectsListResponse",
            "properties": {
                "projects": {
                    "description": "Projects returned.",
                    "items": {
                        "$ref": "Project"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PublishResponse": {
            "description": "The response returned by a call to any asset's Publish method.",
            "id": "PublishResponse",
            "type": "object"
        },
        "PublishedLayer": {
            "description": "The published version of a layer.",
            "id": "PublishedLayer",
            "properties": {
                "description": {
                    "description": "The description of this Layer, supplied by the author.",
                    "type": "string"
                },
                "id": {
                    "description": "A globally unique ID, used to refer to this Layer.",
                    "type": "string"
                },
                "layerType": {
                    "description": "The type of the datasources used to build this Layer. This should be used instead of datasourceType. At least one of layerType and datasourceType and must be specified, but layerType takes precedence.",
                    "enum": [
                        "image",
                        "vector"
                    ],
                    "enumDescriptions": [
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "The name of this Layer, supplied by the author.",
                    "type": "string"
                },
                "projectId": {
                    "description": "The ID of the project that this Layer is in.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PublishedLayersListResponse": {
            "description": "The response returned by a call to layers.List.published.",
            "id": "PublishedLayersListResponse",
            "properties": {
                "layers": {
                    "description": "Resources returned.",
                    "items": {
                        "$ref": "PublishedLayer"
                    },
                    "type": "array"
                },
                "nextPageToken": {
                    "description": "Next page token.",
                    "format": "byte",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PublishedMap": {
            "description": "The published version of a map asset.",
            "id": "PublishedMap",
            "properties": {
                "contents": {
                    "$ref": "MapContents",
                    "description": "The contents of this Map."
                },
                "defaultViewport": {
                    "$ref": "LatLngBox",
                    "description": "An array of four numbers (west, south, east, north) which defines the rectangular bounding box of the default viewport. The numbers represent latitude and longitude in decimal degrees."
                },
                "description": {
                    "description": "The description of this Map, supplied by the author.",
                    "type": "string"
                },
                "id": {
                    "description": "A globally unique ID, used to refer to this Map.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of this Map, supplied by the author.",
                    "type": "string"
                },
                "projectId": {
                    "description": "The ID of the project that this Map is in.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PublishedMapsListResponse": {
            "description": "The response returned by a call to maps.List.published.",
            "id": "PublishedMapsListResponse",
            "properties": {
                "maps": {
                    "description": "Resources returned.",
                    "items": {
                        "$ref": "PublishedMap"
                    },
                    "type": "array"
                },
                "nextPageToken": {
                    "description": "Next page token.",
                    "format": "byte",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Raster": {
            "description": "A geo-referenced raster.",
            "id": "Raster",
            "properties": {
                "acquisitionTime": {
                    "$ref": "AcquisitionTime",
                    "description": "The acquisition time of this Raster."
                },
                "attribution": {
                    "description": "The name of the attribution to be used for this Raster.",
                    "type": "string"
                },
                "bbox": {
                    "description": "A rectangular bounding box which contains all of the data in this Raster. The box is expressed as \\\"west, south, east, north\\\". The numbers represent latitudes and longitudes in decimal degrees.",
                    "items": {
                        "format": "double",
                        "type": "number"
                    },
                    "type": "array"
                },
                "creationTime": {
                    "description": "The creation time of this raster. The value is an RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z).",
                    "format": "date-time",
                    "type": "string"
                },
                "creatorEmail": {
                    "description": "The email address of the creator of this raster. This is only returned on GET requests and not LIST requests.",
                    "type": "string"
                },
                "description": {
                    "description": "The description of this Raster, supplied by the author.",
                    "type": "string"
                },
                "draftAccessList": {
                    "description": "Deprecated: The name of an access list of the Map Editor type. The user on whose behalf the request is being sent must be an editor on that access list. Note: Google Maps Engine no longer uses access lists. Instead, each asset has its own list of permissions. For backward compatibility, the API still accepts access lists for projects that are already using access lists. If you created a GME account/project after July 14th, 2014, you will not be able to send API requests that include access lists. Note: This is an input field only. It is not returned in response to a list or get request.",
                    "type": "string"
                },
                "etag": {
                    "description": "The ETag, used to refer to the current version of the asset.",
                    "type": "string"
                },
                "files": {
                    "annotations": {
                        "required": [
                            "mapsengine.rasters.upload"
                        ]
                    },
                    "description": "The files associated with this Raster.",
                    "items": {
                        "$ref": "File"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A globally unique ID, used to refer to this Raster.",
                    "type": "string"
                },
                "lastModifiedTime": {
                    "description": "The last modified time of this raster. The value is an RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z).",
                    "format": "date-time",
                    "type": "string"
                },
                "lastModifierEmail": {
                    "description": "The email address of the last modifier of this raster. This is only returned on GET requests and not LIST requests.",
                    "type": "string"
                },
                "maskType": {
                    "default": "autoMask",
                    "description": "The mask processing type of this Raster.",
                    "type": "string"
                },
                "name": {
                    "annotations": {
                        "required": [
                            "mapsengine.rasters.upload"
                        ]
                    },
                    "description": "The name of this Raster, supplied by the author.",
                    "type": "string"
                },
                "processingStatus": {
                    "description": "The processing status of this Raster.",
                    "enum": [
                        "complete",
                        "failed",
                        "notReady",
                        "processing",
                        "ready"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "projectId": {
                    "annotations": {
                        "required": [
                            "mapsengine.rasters.upload"
                        ]
                    },
                    "description": "The ID of the project that this Raster is in.",
                    "type": "string"
                },
                "rasterType": {
                    "annotations": {
                        "required": [
                            "mapsengine.rasters.upload"
                        ]
                    },
                    "description": "The type of this Raster. Always \"image\" today.",
                    "enum": [
                        "image"
                    ],
                    "enumDescriptions": [
                        ""
                    ],
                    "type": "string"
                },
                "tags": {
                    "$ref": "Tags",
                    "description": "Tags of this Raster."
                },
                "writersCanEditPermissions": {
                    "description": "If true, WRITERs of the asset are able to edit the asset permissions.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RasterCollection": {
            "description": "A raster collection groups multiple Raster resources for inclusion in a Layer.",
            "id": "RasterCollection",
            "properties": {
                "attribution": {
                    "description": "The name of the attribution to be used for this RasterCollection. Note: Attribution is returned in response to a get request but not a list request. After requesting a list of raster collections, you'll need to send a get request to retrieve the attribution for each raster collection.",
                    "type": "string"
                },
                "bbox": {
                    "description": "A rectangular bounding box which contains all of the data in this RasterCollection. The box is expressed as \\\"west, south, east, north\\\". The numbers represent latitude and longitude in decimal degrees.",
                    "items": {
                        "format": "double",
                        "type": "number"
                    },
                    "type": "array"
                },
                "creationTime": {
                    "description": "The creation time of this RasterCollection. The value is an RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z).",
                    "format": "date-time",
                    "type": "string"
                },
                "creatorEmail": {
                    "description": "The email address of the creator of this raster collection. This is only returned on GET requests and not LIST requests.",
                    "type": "string"
                },
                "description": {
                    "description": "The description of this RasterCollection, supplied by the author.",
                    "type": "string"
                },
                "draftAccessList": {
                    "description": "Deprecated: The name of an access list of the Map Editor type. The user on whose behalf the request is being sent must be an editor on that access list. Note: Google Maps Engine no longer uses access lists. Instead, each asset has its own list of permissions. For backward compatibility, the API still accepts access lists for projects that are already using access lists. If you created a GME account/project after July 14th, 2014, you will not be able to send API requests that include access lists. Note: This is an input field only. It is not returned in response to a list or get request.",
                    "type": "string"
                },
                "etag": {
                    "description": "The ETag, used to refer to the current version of the asset.",
                    "type": "string"
                },
                "id": {
                    "description": "A globally unique ID, used to refer to this RasterCollection.",
                    "type": "string"
                },
                "lastModifiedTime": {
                    "description": "The last modified time of this RasterCollection. The value is an RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z).",
                    "format": "date-time",
                    "type": "string"
                },
                "lastModifierEmail": {
                    "description": "The email address of the last modifier of this raster collection. This is only returned on GET requests and not LIST requests.",
                    "type": "string"
                },
                "mosaic": {
                    "annotations": {
                        "required": [
                            "mapsengine.rasterCollections.create"
                        ]
                    },
                    "description": "True if this RasterCollection is a mosaic.",
                    "type": "boolean"
                },
                "name": {
                    "annotations": {
                        "required": [
                            "mapsengine.rasterCollections.create"
                        ]
                    },
                    "description": "The name of this RasterCollection, supplied by the author.",
                    "type": "string"
                },
                "processingStatus": {
                    "description": "The processing status of this RasterCollection.",
                    "enum": [
                        "complete",
                        "failed",
                        "notReady",
                        "processing",
                        "ready"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "projectId": {
                    "annotations": {
                        "required": [
                            "mapsengine.rasterCollections.create"
                        ]
                    },
                    "description": "The ID of the project that this RasterCollection is in.",
                    "type": "string"
                },
                "rasterType": {
                    "annotations": {
                        "required": [
                            "mapsengine.rasterCollections.create"
                        ]
                    },
                    "description": "The type of rasters contained within this RasterCollection.",
                    "enum": [
                        "image"
                    ],
                    "enumDescriptions": [
                        ""
                    ],
                    "type": "string"
                },
                "tags": {
                    "$ref": "Tags",
                    "description": "Tags of this RasterCollection."
                },
                "writersCanEditPermissions": {
                    "description": "If true, WRITERs of the asset are able to edit the asset permissions.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RasterCollectionsListResponse": {
            "description": "The response returned by a call to raster_collections.List. Note: The list response does not include all the fields available in a raster collection. Refer to the RasterCollection resource description for details of the fields that are not included. You'll need to send a get request to retrieve the additional fields for each raster collection.",
            "id": "RasterCollectionsListResponse",
            "properties": {
                "nextPageToken": {
                    "description": "Next page token.",
                    "format": "byte",
                    "type": "string"
                },
                "rasterCollections": {
                    "description": "Resources returned.",
                    "items": {
                        "$ref": "RasterCollection"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "RasterCollectionsRaster": {
            "description": "A raster resource.",
            "id": "RasterCollectionsRaster",
            "properties": {
                "bbox": {
                    "description": "A rectangular bounding box which contains all of the data in this Raster. The box is expressed as \\\"west, south, east, north\\\". The numbers represent latitudes and longitudes in decimal degrees.",
                    "items": {
                        "format": "double",
                        "type": "number"
                    },
                    "type": "array"
                },
                "creationTime": {
                    "description": "The creation time of this raster. The value is an RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z).",
                    "format": "date-time",
                    "type": "string"
                },
                "description": {
                    "description": "The description of this Raster, supplied by the author.",
                    "type": "string"
                },
                "id": {
                    "description": "A globally unique ID, used to refer to this Raster.",
                    "type": "string"
                },
                "lastModifiedTime": {
                    "description": "The last modified time of this raster. The value is an RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z).",
                    "format": "date-time",
                    "type": "string"
                },
                "name": {
                    "description": "The name of this Raster, supplied by the author.",
                    "type": "string"
                },
                "projectId": {
                    "description": "The ID of the project that this Raster is in.",
                    "type": "string"
                },
                "rasterType": {
                    "default": "image",
                    "description": "The type of this Raster. Always \"image\" today.",
                    "type": "string"
                },
                "tags": {
                    "description": "Tags of this Raster.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "RasterCollectionsRasterBatchDeleteRequest": {
            "description": "The request sent to rasterCollections.Rasters.BatchDelete.",
            "id": "RasterCollectionsRasterBatchDeleteRequest",
            "properties": {
                "ids": {
                    "description": "An array of Raster asset IDs to be removed from this RasterCollection.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "RasterCollectionsRastersBatchDeleteResponse": {
            "description": "The response returned by a call to rasterCollections.rasters.batchDelete.",
            "id": "RasterCollectionsRastersBatchDeleteResponse",
            "type": "object"
        },
        "RasterCollectionsRastersBatchInsertRequest": {
            "description": "The request sent to rasterCollections.Rasters.BatchInsert.",
            "id": "RasterCollectionsRastersBatchInsertRequest",
            "properties": {
                "ids": {
                    "description": "An array of Raster asset IDs to be added to this RasterCollection.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "RasterCollectionsRastersBatchInsertResponse": {
            "description": "The response returned by a call to rasterCollections.rasters.batchInsert.",
            "id": "RasterCollectionsRastersBatchInsertResponse",
            "type": "object"
        },
        "RasterCollectionsRastersListResponse": {
            "description": "The response returned by a call to rasterCollections.rasters.List.",
            "id": "RasterCollectionsRastersListResponse",
            "properties": {
                "nextPageToken": {
                    "description": "Next page token.",
                    "type": "string"
                },
                "rasters": {
                    "description": "Resources returned.",
                    "items": {
                        "$ref": "RasterCollectionsRaster"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "RastersListResponse": {
            "description": "The response returned by a call to rasters.List.",
            "id": "RastersListResponse",
            "properties": {
                "nextPageToken": {
                    "description": "Next page token.",
                    "type": "string"
                },
                "rasters": {
                    "description": "Resources returned.",
                    "items": {
                        "$ref": "Raster"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ScaledShape": {
            "description": "Parameters for styling points as scaled shapes.",
            "id": "ScaledShape",
            "properties": {
                "border": {
                    "$ref": "Border",
                    "description": "Border color/width of the shape. If not specified the shape won't have a border."
                },
                "fill": {
                    "$ref": "Color",
                    "description": "The fill color of the shape. If not specified the shape will be transparent (although the borders may not be)."
                },
                "shape": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create",
                            "mapsengine.layers.patch"
                        ]
                    },
                    "description": "Name of the shape.",
                    "enum": [
                        "circle"
                    ],
                    "enumDescriptions": [
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ScalingFunction": {
            "description": "Parameters for scaling scaled shapes.",
            "id": "ScalingFunction",
            "properties": {
                "column": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create",
                            "mapsengine.layers.patch"
                        ]
                    },
                    "description": "Name of the numeric column used to scale a shape.",
                    "type": "string"
                },
                "scalingType": {
                    "description": "The type of scaling function to use. Defaults to SQRT. Currently only linear and square root scaling are supported.",
                    "enum": [
                        "linear",
                        "sqrt"
                    ],
                    "enumDescriptions": [
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "sizeRange": {
                    "$ref": "SizeRange",
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create",
                            "mapsengine.layers.patch"
                        ]
                    },
                    "description": "The range of shape sizes, in pixels. For circles, the size corresponds to the diameter."
                },
                "valueRange": {
                    "$ref": "ValueRange",
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create",
                            "mapsengine.layers.patch"
                        ]
                    },
                    "description": "The range of values to display across the size range."
                }
            },
            "type": "object"
        },
        "Schema": {
            "description": "A schema indicating the properties which may be associated with features within a Table, and the types of those properties.",
            "id": "Schema",
            "properties": {
                "columns": {
                    "annotations": {
                        "required": [
                            "mapsengine.tables.create"
                        ]
                    },
                    "description": "An array of TableColumn objects. The first object in the array must be named geometry and be of type points, lineStrings, polygons, or mixedGeometry.",
                    "items": {
                        "$ref": "TableColumn"
                    },
                    "type": "array"
                },
                "primaryGeometry": {
                    "description": "The name of the column that contains a feature's geometry. This field can be omitted during table create; Google Maps Engine supports only a single geometry column, which must be named geometry and be the first object in the columns array.",
                    "type": "string"
                },
                "primaryKey": {
                    "description": "The name of the column that contains the unique identifier of a Feature.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SizeRange": {
            "description": "Scaled shape size range in pixels. For circles, size corresponds to diameter.",
            "id": "SizeRange",
            "properties": {
                "max": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create",
                            "mapsengine.layers.patch"
                        ]
                    },
                    "description": "Maximum size, in pixels.",
                    "format": "double",
                    "type": "number"
                },
                "min": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create",
                            "mapsengine.layers.patch"
                        ]
                    },
                    "description": "Minimum size, in pixels.",
                    "format": "double",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "Table": {
            "description": "A collection of geographic features, and associated metadata.",
            "id": "Table",
            "properties": {
                "bbox": {
                    "description": "A rectangular bounding box which contains all of the data in this Table. The box is expressed as \\\"west, south, east, north\\\". The numbers represent latitude and longitude in decimal degrees.",
                    "items": {
                        "format": "double",
                        "type": "number"
                    },
                    "type": "array"
                },
                "creationTime": {
                    "description": "The creation time of this table. The value is an RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z).",
                    "format": "date-time",
                    "type": "string"
                },
                "creatorEmail": {
                    "description": "The email address of the creator of this table. This is only returned on GET requests and not LIST requests.",
                    "type": "string"
                },
                "description": {
                    "description": "The description of this table, supplied by the author.",
                    "type": "string"
                },
                "draftAccessList": {
                    "description": "Deprecated: The name of an access list of the Map Editor type. The user on whose behalf the request is being sent must be an editor on that access list. Note: Google Maps Engine no longer uses access lists. Instead, each asset has its own list of permissions. For backward compatibility, the API still accepts access lists for projects that are already using access lists. If you created a GME account/project after July 14th, 2014, you will not be able to send API requests that include access lists. Note: This is an input field only. It is not returned in response to a list or get request.",
                    "type": "string"
                },
                "etag": {
                    "description": "The ETag, used to refer to the current version of the asset.",
                    "type": "string"
                },
                "files": {
                    "annotations": {
                        "required": [
                            "mapsengine.tables.upload"
                        ]
                    },
                    "description": "The files associated with this table.",
                    "items": {
                        "$ref": "File"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A globally unique ID, used to refer to this table.",
                    "type": "string"
                },
                "lastModifiedTime": {
                    "description": "The last modified time of this table. The value is an RFC 3339 formatted date-time value (e.g. 1970-01-01T00:00:00Z).",
                    "format": "date-time",
                    "type": "string"
                },
                "lastModifierEmail": {
                    "description": "The email address of the last modifier of this table. This is only returned on GET requests and not LIST requests.",
                    "type": "string"
                },
                "name": {
                    "annotations": {
                        "required": [
                            "mapsengine.tables.create",
                            "mapsengine.tables.upload"
                        ]
                    },
                    "description": "The name of this table, supplied by the author.",
                    "type": "string"
                },
                "processingStatus": {
                    "description": "The processing status of this table.",
                    "enum": [
                        "complete",
                        "failed",
                        "notReady",
                        "processing",
                        "ready"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                },
                "projectId": {
                    "annotations": {
                        "required": [
                            "mapsengine.tables.create",
                            "mapsengine.tables.upload"
                        ]
                    },
                    "description": "The ID of the project to which the table belongs.",
                    "type": "string"
                },
                "publishedAccessList": {
                    "description": "Deprecated: The access list to whom view permissions are granted. The value must be the name of a Maps Engine access list of the Map Viewer type, and the user must be a viewer on that list. Note: Google Maps Engine no longer uses access lists. Instead, each asset has its own list of permissions. For backward compatibility, the API still accepts access lists for projects that are already using access lists. If you created a GME account/project after July 14th, 2014, you will not be able to send API requests that include access lists. Note: This is an input field only. It is not returned in response to a list or get request.",
                    "type": "string"
                },
                "schema": {
                    "$ref": "Schema",
                    "annotations": {
                        "required": [
                            "mapsengine.tables.create"
                        ]
                    },
                    "description": "The schema for this table. Note: The schema is returned in response to a get request but not a list request. After requesting a list of tables, you'll need to send a get request to retrieve the schema for each table."
                },
                "sourceEncoding": {
                    "default": "UTF-8",
                    "description": "Encoding of the uploaded files. Valid values include UTF-8, CP1251, ISO 8859-1, and Shift_JIS.",
                    "type": "string"
                },
                "tags": {
                    "$ref": "Tags",
                    "description": "An array of text strings, with each string representing a tag. More information about tags can be found in the Tagging data article of the Maps Engine help center."
                },
                "writersCanEditPermissions": {
                    "description": "If true, WRITERs of the asset are able to edit the asset permissions.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "TableColumn": {
            "id": "TableColumn",
            "properties": {
                "name": {
                    "annotations": {
                        "required": [
                            "mapsengine.tables.create"
                        ]
                    },
                    "description": "The column name.",
                    "type": "string"
                },
                "type": {
                    "annotations": {
                        "required": [
                            "mapsengine.tables.create"
                        ]
                    },
                    "description": "The type of data stored in this column.",
                    "enum": [
                        "datetime",
                        "double",
                        "integer",
                        "lineStrings",
                        "mixedGeometry",
                        "points",
                        "polygons",
                        "string"
                    ],
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TablesListResponse": {
            "description": "The response returned by a call to tables.List. Note: The list response does not include all the fields available in a table. Refer to the table resource description for details of the fields that are not included. You'll need to send a get request to retrieve the additional fields for each table.",
            "id": "TablesListResponse",
            "properties": {
                "nextPageToken": {
                    "description": "Next page token.",
                    "format": "byte",
                    "type": "string"
                },
                "tables": {
                    "description": "Resources returned.",
                    "items": {
                        "$ref": "Table"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Tags": {
            "id": "Tags",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "ValueRange": {
            "description": "Range of values used for scaling shapes. The min/max values will be drawn as shapes with the min/max size.",
            "id": "ValueRange",
            "properties": {
                "max": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create",
                            "mapsengine.layers.patch"
                        ]
                    },
                    "description": "Maximum value.",
                    "format": "double",
                    "type": "number"
                },
                "min": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create",
                            "mapsengine.layers.patch"
                        ]
                    },
                    "description": "Minimum value.",
                    "format": "double",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "VectorStyle": {
            "description": "A vector style contains styling information for vector layer.",
            "id": "VectorStyle",
            "properties": {
                "displayRules": {
                    "items": {
                        "$ref": "DisplayRule"
                    },
                    "type": "array"
                },
                "featureInfo": {
                    "$ref": "FeatureInfo",
                    "description": "Individual feature info, this is called Info Window in Maps Engine UI. If not provided, a default template with all attributes will be generated."
                },
                "type": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create",
                            "mapsengine.layers.patch"
                        ]
                    },
                    "description": "The type of the vector style. Currently, only displayRule is supported.",
                    "enum": [
                        "displayRule"
                    ],
                    "enumDescriptions": [
                        ""
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ZoomLevels": {
            "description": "Zoom level range. Zoom levels are restricted between 0 and 24, inclusive.",
            "id": "ZoomLevels",
            "properties": {
                "max": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create",
                            "mapsengine.layers.patch"
                        ]
                    },
                    "description": "Maximum zoom level.",
                    "format": "int32",
                    "type": "integer"
                },
                "min": {
                    "annotations": {
                        "required": [
                            "mapsengine.layers.create",
                            "mapsengine.layers.patch"
                        ]
                    },
                    "description": "Minimum zoom level.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "servicePath": "mapsengine/v1/",
    "title": "Google Maps Engine API",
    "version": "v1"
}