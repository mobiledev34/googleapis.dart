{
    "auth": {
        "oauth2": {
            "scopes": {
                "https://www.googleapis.com/auth/trace.append": {
                    "description": "Write Trace data for a project or application"
                },
                "https://www.googleapis.com/auth/cloud-platform": {
                    "description": "View and manage your data across Google Cloud Platform services"
                },
                "https://www.googleapis.com/auth/trace.readonly": {
                    "description": "Read Trace data for a project or application"
                }
            }
        }
    },
    "basePath": "",
    "baseUrl": "https://tracing.googleapis.com/",
    "batchPath": "batch",
    "canonicalName": "Tracing",
    "description": "Send and retrieve trace data from Google Stackdriver Trace.\n",
    "discoveryVersion": "v1",
    "documentationLink": "https://cloud.google.com/trace",
    "icons": {
        "x16": "http://www.google.com/images/icons/product/search-16.gif",
        "x32": "http://www.google.com/images/icons/product/search-32.gif"
    },
    "id": "tracing:v2",
    "kind": "discovery#restDescription",
    "name": "tracing",
    "ownerDomain": "google.com",
    "ownerName": "Google",
    "parameters": {
        "key": {
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
            "location": "query",
            "type": "string"
        },
        "access_token": {
            "description": "OAuth access token.",
            "location": "query",
            "type": "string"
        },
        "quotaUser": {
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
            "location": "query",
            "type": "string"
        },
        "pp": {
            "default": "true",
            "description": "Pretty-print response.",
            "location": "query",
            "type": "boolean"
        },
        "oauth_token": {
            "description": "OAuth 2.0 token for the current user.",
            "location": "query",
            "type": "string"
        },
        "bearer_token": {
            "description": "OAuth bearer token.",
            "location": "query",
            "type": "string"
        },
        "upload_protocol": {
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
            "location": "query",
            "type": "string"
        },
        "prettyPrint": {
            "default": "true",
            "description": "Returns response with indentations and line breaks.",
            "location": "query",
            "type": "boolean"
        },
        "uploadType": {
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
            "location": "query",
            "type": "string"
        },
        "fields": {
            "description": "Selector specifying which fields to include in a partial response.",
            "location": "query",
            "type": "string"
        },
        "$.xgafv": {
            "description": "V1 error format.",
            "enum": [
                "1",
                "2"
            ],
            "enumDescriptions": [
                "v1 error format",
                "v2 error format"
            ],
            "location": "query",
            "type": "string"
        },
        "callback": {
            "description": "JSONP",
            "location": "query",
            "type": "string"
        },
        "alt": {
            "default": "json",
            "description": "Data format for response.",
            "enum": [
                "json",
                "media",
                "proto"
            ],
            "enumDescriptions": [
                "Responses with Content-Type of application/json",
                "Media download with context-dependent Content-Type",
                "Responses with Content-Type of application/x-protobuf"
            ],
            "location": "query",
            "type": "string"
        }
    },
    "protocol": "rest",
    "resources": {
        "projects": {
            "resources": {
                "traces": {
                    "methods": {
                        "listSpans": {
                            "description": "Returns a list of spans within a trace.",
                            "httpMethod": "GET",
                            "id": "tracing.projects.traces.listSpans",
                            "parameterOrder": [
                                "parent"
                            ],
                            "parameters": {
                                "pageToken": {
                                    "description": "Token identifying the page of results to return. If provided, use the\nvalue of the `nextPageToken` field from a previous request. Optional.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "parent": {
                                    "description": "ID of the trace for which to list child spans. Format is\n`projects/PROJECT_ID/traces/TRACE_ID`.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/traces/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v2/{+parent}:listSpans",
                            "response": {
                                "$ref": "ListSpansResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/trace.readonly"
                            ]
                        },
                        "list": {
                            "description": "Returns of a list of traces that match the specified filter conditions.",
                            "httpMethod": "GET",
                            "id": "tracing.projects.traces.list",
                            "parameterOrder": [
                                "parent"
                            ],
                            "parameters": {
                                "filter": {
                                    "description": "An optional filter for the request.\nExample:\n`version_label_key:a some_label:some_label_key`\nreturns traces from version `a` and has `some_label` with `some_label_key`.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "endTime": {
                                    "description": "End of the time interval (inclusive) during which the trace data was\ncollected from the application.",
                                    "format": "google-datetime",
                                    "location": "query",
                                    "type": "string"
                                },
                                "pageToken": {
                                    "description": "Token identifying the page of results to return. If provided, use the\nvalue of the `next_page_token` field from a previous request. Optional.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "startTime": {
                                    "description": "Start of the time interval (inclusive) during which the trace data was\ncollected from the application.",
                                    "format": "google-datetime",
                                    "location": "query",
                                    "type": "string"
                                },
                                "pageSize": {
                                    "description": "Maximum number of traces to return. If not specified or <= 0, the\nimplementation selects a reasonable value. The implementation may\nreturn fewer traces than the requested page size. Optional.",
                                    "format": "int32",
                                    "location": "query",
                                    "type": "integer"
                                },
                                "parent": {
                                    "description": "ID of the Cloud project where the trace data is stored which is\n`projects/PROJECT_ID`.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                },
                                "orderBy": {
                                    "description": "Field used to sort the returned traces. Optional.\nCan be one of the following:\n\n*   `trace_id`\n*   `name` (`name` field of root span in the trace)\n*   `duration` (difference between `end_time` and `start_time` fields of\n     the root span)\n*   `start` (`start_time` field of the root span)\n\nDescending order can be specified by appending `desc` to the sort field\n(for example, `name desc`).\n\nOnly one sort field is permitted.",
                                    "location": "query",
                                    "type": "string"
                                }
                            },
                            "path": "v2/{+parent}/traces",
                            "response": {
                                "$ref": "ListTracesResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/trace.readonly"
                            ]
                        },
                        "batchWrite": {
                            "description": "Sends new spans to Stackdriver Trace or updates existing traces. If the\nname of a trace that you send matches that of an existing trace, new spans\nare added to the existing trace. Attempt to update existing spans results\nundefined behavior. If the name does not match, a new trace is created\nwith given set of spans.",
                            "httpMethod": "POST",
                            "id": "tracing.projects.traces.batchWrite",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "Name of the project where the spans belong to. Format is\n`projects/PROJECT_ID`.",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v2/{+name}/traces:batchWrite",
                            "request": {
                                "$ref": "BatchWriteSpansRequest"
                            },
                            "response": {
                                "$ref": "Empty"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/trace.append"
                            ]
                        }
                    },
                    "resources": {
                        "spans": {
                            "methods": {
                                "create": {
                                    "description": "Creates a new Span.",
                                    "httpMethod": "PUT",
                                    "id": "tracing.projects.traces.spans.create",
                                    "parameterOrder": [
                                        "name"
                                    ],
                                    "parameters": {
                                        "name": {
                                            "description": "The resource name of Span in the format\n`projects/PROJECT_ID/traces/TRACE_ID/spans/SPAN_ID`.\n`TRACE_ID` is a unique identifier for a trace within a project and is a\nbase16-encoded, case-insensitive string and is required to be 32 char long.\n`SPAN_ID` is a unique identifier for a span within a trace. It is a\nbase 16-encoded, case-insensitive string of a 8-bytes array and is required\nto be 16 char long.",
                                            "location": "path",
                                            "pattern": "^projects/[^/]+/traces/[^/]+/spans/[^/]+$",
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "path": "v2/{+name}",
                                    "request": {
                                        "$ref": "Span"
                                    },
                                    "response": {
                                        "$ref": "Span"
                                    },
                                    "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform",
                                        "https://www.googleapis.com/auth/trace.append"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "revision": "20170516",
    "rootUrl": "https://tracing.googleapis.com/",
    "schemas": {
        "Module": {
            "description": "Binary module.",
            "id": "Module",
            "properties": {
                "module": {
                    "$ref": "TruncatableString",
                    "description": "E.g. main binary, kernel modules, and dynamic libraries\nsuch as libc.so, sharedlib.so (up to 256 characters)."
                },
                "buildId": {
                    "$ref": "TruncatableString",
                    "description": "Build_id is a unique identifier for the module, usually a hash of its\ncontents (up to 128 characters)."
                }
            },
            "type": "object"
        },
        "Status": {
            "description": "The `Status` type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs. It is used by\n[gRPC](https://github.com/grpc). The error model is designed to be:\n\n- Simple to use and understand for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error message,\nand error details. The error code should be an enum value of\ngoogle.rpc.Code, but it may accept additional error codes if needed.  The\nerror message should be a developer-facing English message that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror message is needed, put the localized message in the error details or\nlocalize it in the client. The optional error details may contain arbitrary\ninformation about the error. There is a predefined set of error detail types\nin the package `google.rpc` that can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it\nis not necessarily the actual wire format. When the `Status` message is\nexposed in different client libraries and different wire protocols, it can be\nmapped differently. For example, it will likely be mapped to some exceptions\nin Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of\nenvironments, either with or without APIs, to provide a\nconsistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,\n    it may embed the `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may\n    have a `Status` message for error reporting.\n\n- Batch operations. If a client uses batch request and batch response, the\n    `Status` message should be used directly inside batch response, one for\n    each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation\n    results in its response, the status of those operations should be\n    represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could\n    be used directly after any stripping needed for security/privacy reasons.",
            "id": "Status",
            "properties": {
                "code": {
                    "description": "The status code, which should be an enum value of google.rpc.Code.",
                    "format": "int32",
                    "type": "integer"
                },
                "message": {
                    "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
                    "type": "string"
                },
                "details": {
                    "description": "A list of messages that carry the error details.  There will be a\ncommon set of message types for APIs to use.",
                    "items": {
                        "additionalProperties": {
                            "description": "Properties of the object. Contains field @type with type URL.",
                            "type": "any"
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BatchWriteSpansRequest": {
            "description": "The request message for the `BatchWriteSpans` method.",
            "id": "BatchWriteSpansRequest",
            "properties": {
                "spans": {
                    "description": "A collection of spans.",
                    "items": {
                        "$ref": "Span"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Empty": {
            "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
            "id": "Empty",
            "properties": {},
            "type": "object"
        },
        "Span": {
            "description": "A span represents a single operation within a trace. Spans can be nested\nto form a trace tree. Often, a trace contains a root span that\ndescribes the end-to-end latency and, optionally, one or more subspans for\nits sub-operations. (A trace could alternatively contain multiple root spans,\nor none at all.) Spans do not need to be contiguous. There may be gaps\nand/or overlaps between spans in a trace.",
            "id": "Span",
            "properties": {
                "timeEvents": {
                    "$ref": "TimeEvents",
                    "description": "A maximum of 32 annotations and 128 network events are allowed per Span."
                },
                "status": {
                    "$ref": "Status",
                    "description": "An optional final status for this span."
                },
                "name": {
                    "description": "The resource name of Span in the format\n`projects/PROJECT_ID/traces/TRACE_ID/spans/SPAN_ID`.\n`TRACE_ID` is a unique identifier for a trace within a project and is a\nbase16-encoded, case-insensitive string and is required to be 32 char long.\n`SPAN_ID` is a unique identifier for a span within a trace. It is a\nbase 16-encoded, case-insensitive string of a 8-bytes array and is required\nto be 16 char long.",
                    "type": "string"
                },
                "stackTrace": {
                    "$ref": "StackTrace",
                    "description": "Stack trace captured at the start of the span."
                },
                "links": {
                    "$ref": "Links",
                    "description": "A maximum of 128 links are allowed per Span."
                },
                "attributes": {
                    "$ref": "Attributes",
                    "description": "A set of attributes on the span. A maximum of 32 attributes are allowed per\nSpan."
                },
                "spanId": {
                    "description": "Unique identifier for a span within a trace. It is a base 16-encoded,\ncase-insensitive string of a 8-bytes array and is required.",
                    "type": "string"
                },
                "parentSpanId": {
                    "description": "ID of parent span which is a base 16-encoded, case-insensitive string of\na 8-bytes array and is required to be 16 char long. If this is a root span,\nthe value must be empty.",
                    "type": "string"
                },
                "endTime": {
                    "description": "End time of the span.\nOn the client side, this is the local machine clock time at which the span\nexecution was ended; on the server\nside, this is the time at which the server application handler stopped\nrunning.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "startTime": {
                    "description": "Start time of the span.\nOn the client side, this is the local machine clock time at which the span\nexecution was started; on the server\nside, this is the time at which the server application handler started\nrunning.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "displayName": {
                    "$ref": "TruncatableString",
                    "description": "Description of the operation in the span. It is sanitized and displayed in\nthe Stackdriver Trace tool in the\n{% dynamic print site_values.console_name %}.\nThe display_name may be a method name or some other per-call site\nname. For the same executable and the same call point, a best practice is\nto use a consistent operation name, which makes it easier to correlate\ncross-trace spans.\nThe maximum length for the display_name is 128 bytes."
                }
            },
            "type": "object"
        },
        "ListTracesResponse": {
            "description": "The response message for the `ListTraces` method.",
            "id": "ListTracesResponse",
            "properties": {
                "traces": {
                    "description": "List of trace records returned.",
                    "items": {
                        "$ref": "Trace"
                    },
                    "type": "array"
                },
                "nextPageToken": {
                    "description": "If defined, indicates that there are more traces that match the request\nand that this value should be passed to the next request to continue\nretrieving additional traces.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AttributeValue": {
            "description": "The allowed types for the value side of an attribute key:value pair.",
            "id": "AttributeValue",
            "properties": {
                "intValue": {
                    "description": "An integer value.",
                    "format": "int64",
                    "type": "string"
                },
                "stringValue": {
                    "$ref": "TruncatableString",
                    "description": "A string value (up to 256 bytes)."
                },
                "boolValue": {
                    "description": "A boolean value.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Attributes": {
            "description": "Attributes of a span with a key:value format.",
            "id": "Attributes",
            "properties": {
                "droppedAttributesCount": {
                    "description": "The number of dropped attributes after the maximum size was enforced. If\n0 then no attributes were dropped.",
                    "format": "int32",
                    "type": "integer"
                },
                "attributeMap": {
                    "additionalProperties": {
                        "$ref": "AttributeValue"
                    },
                    "description": "The maximum key length is 128 bytes (attributes are dropped if the\nkey size is larger than the maximum allowed). The value can be a string\n(up to 256 bytes), integer, or boolean (true/false). Some common pair\nexamples:\n\n    \"/instance_id\": \"my-instance\"\n    \"/zone\": \"us-central1-a\"\n    \"/grpc/peer_address\": \"ip:port\" (dns, etc.)\n    \"/grpc/deadline\": \"Duration\"\n    \"/http/user_agent\"\n    \"/http/request_bytes\": 300\n    \"/http/response_bytes\": 1200\n    \"/http/url\": google.com/apis\n    \"abc.com/myattribute\": true",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "Links": {
            "description": "A collection of links, which are references from this span to a span\nin the same or different trace.",
            "id": "Links",
            "properties": {
                "link": {
                    "description": "A collection of links.",
                    "items": {
                        "$ref": "Link"
                    },
                    "type": "array"
                },
                "droppedLinksCount": {
                    "description": "The number of dropped links after the maximum size was enforced. If\n0 then no links were dropped.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "StackTrace": {
            "description": "StackTrace collected in a trace.",
            "id": "StackTrace",
            "properties": {
                "stackTraceHashId": {
                    "description": "The hash ID is used to conserve network bandwidth for duplicate\nstack traces within a single trace.\n\nOften multiple spans will have identical stack traces.\nThe first occurance of a stack trace should contain both the\n`stackFrame` content and a value in `stackTraceHashId`.\n\nSubsequent spans within the same request can refer\nto that stack trace by only setting `stackTraceHashId`.",
                    "format": "uint64",
                    "type": "string"
                },
                "stackFrames": {
                    "$ref": "StackFrames",
                    "description": "Stack frames in this stack trace. A maximum of 128 frames are allowed."
                }
            },
            "type": "object"
        },
        "TruncatableString": {
            "description": "Represents a string value that might be truncated.",
            "id": "TruncatableString",
            "properties": {
                "truncatedCharacterCount": {
                    "description": "The number of characters truncated from the original string value. If 0 it\nmeans that the string value was not truncated.",
                    "format": "int32",
                    "type": "integer"
                },
                "value": {
                    "description": "The truncated string value. E.g. for a string attribute this may have up to\n256 bytes.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TimeEvent": {
            "description": "A time-stamped annotation in the Span.",
            "id": "TimeEvent",
            "properties": {
                "networkEvent": {
                    "$ref": "NetworkEvent",
                    "description": "An event describing an RPC message sent/received on the network."
                },
                "annotation": {
                    "$ref": "Annotation",
                    "description": "One or more key:value pairs."
                },
                "time": {
                    "description": "The timestamp indicating the time the event occurred.",
                    "format": "google-datetime",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ListSpansResponse": {
            "description": "The response message for the `ListSpans` method.",
            "id": "ListSpansResponse",
            "properties": {
                "spans": {
                    "description": "The requested spans if there are any in the specified trace.",
                    "items": {
                        "$ref": "Span"
                    },
                    "type": "array"
                },
                "nextPageToken": {
                    "description": "If defined, indicates that there are more spans that match the request.\nPass this as the value of `pageToken` in a subsequent request to retrieve\nadditional spans.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NetworkEvent": {
            "description": "An event describing an RPC message sent/received on the network. A\nmaximum of 128 network events are allowed per Span.",
            "id": "NetworkEvent",
            "properties": {
                "messageSize": {
                    "description": "The number of bytes sent or received.",
                    "format": "uint64",
                    "type": "string"
                },
                "time": {
                    "description": "If available, this is the kernel time:\n\n*  For sent messages, this is the time at which the first bit was sent.\n*  For received messages, this is the time at which the last bit was\n   received.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "type": {
                    "description": "Type of NetworkEvent. Indicates whether the RPC message was sent or\nreceived.",
                    "enum": [
                        "TYPE_UNSPECIFIED",
                        "SENT",
                        "RECV"
                    ],
                    "enumDescriptions": [
                        "Unknown event type.",
                        "Indicates a sent RPC message.",
                        "Indicates a received RPC message."
                    ],
                    "type": "string"
                },
                "messageId": {
                    "description": "An identifier for the message, which must be unique in this span.",
                    "format": "uint64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StackFrame": {
            "description": "Represents a single stack frame in a stack trace.",
            "id": "StackFrame",
            "properties": {
                "originalFunctionName": {
                    "$ref": "TruncatableString",
                    "description": "Used when the function name is\n[mangled](http://www.avabodh.com/cxxin/namemangling.html). May be\nfully-qualified (up to 1024 characters)."
                },
                "functionName": {
                    "$ref": "TruncatableString",
                    "description": "The fully-qualified name that uniquely identifies this function or\nmethod (up to 1024 characters)."
                },
                "lineNumber": {
                    "description": "Line number of the frame.",
                    "format": "int64",
                    "type": "string"
                },
                "loadModule": {
                    "$ref": "Module",
                    "description": "Binary module the code is loaded from."
                },
                "columnNumber": {
                    "description": "Column number is important in JavaScript (anonymous functions).\nMay not be available in some languages.",
                    "format": "int64",
                    "type": "string"
                },
                "fileName": {
                    "$ref": "TruncatableString",
                    "description": "The filename of the file containing this frame (up to 256 characters)."
                },
                "sourceVersion": {
                    "$ref": "TruncatableString",
                    "description": "The version of the deployed source code (up to 128 characters)."
                }
            },
            "type": "object"
        },
        "Link": {
            "description": "A pointer from this span to another span in a different `Trace` within\nthe same service project or within a different service project. Used\n(for example) in batching operations, where a single batch handler\nprocesses multiple requests from different traces or when receives a\nrequest from a different service project.",
            "id": "Link",
            "properties": {
                "type": {
                    "description": "The relationship of the current span relative to the linked span.",
                    "enum": [
                        "TYPE_UNSPECIFIED",
                        "CHILD",
                        "PARENT"
                    ],
                    "enumDescriptions": [
                        "The relationship of the two spans is unknown.",
                        "The current span is a child of the linked span.",
                        "The current span is the parent of the linked span."
                    ],
                    "type": "string"
                },
                "traceId": {
                    "description": "`TRACE_ID` is a unique identifier for a trace within a project. It is\na base16-encoded, case-insensitive string of a 16-bytes array and is\nrequired to be 32 char long.",
                    "type": "string"
                },
                "spanId": {
                    "description": "`SPAN_ID` is a unique identifier for a span within a trace. It is a\nbase16-encoded, case-insensitive string of a 8-bytes array and is\nrequired to be 16 char long.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Annotation": {
            "description": "Text annotation with a set of attributes. A maximum of 32 annotations are\nallowed per Span.",
            "id": "Annotation",
            "properties": {
                "description": {
                    "$ref": "TruncatableString",
                    "description": "A user-supplied message describing the event. The maximum length for\nthe description is 256 bytes."
                },
                "attributes": {
                    "$ref": "Attributes",
                    "description": "A set of attributes on the annotation. A maximum of 4 attributes are\nallowed per Annotation."
                }
            },
            "type": "object"
        },
        "StackFrames": {
            "description": "Represents collection of StackFrames that can be truncated.",
            "id": "StackFrames",
            "properties": {
                "droppedFramesCount": {
                    "description": "The number of dropped stack frames after the maximum size was enforced.\nIf 0 then no frames were dropped.",
                    "format": "int32",
                    "type": "integer"
                },
                "frame": {
                    "description": "Stack frames in this stack trace.",
                    "items": {
                        "$ref": "StackFrame"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Trace": {
            "description": "A trace describes how long it takes for an application to perform some\noperations. It consists of a set of spans, each representing\nan operation and including time information and operation details.",
            "id": "Trace",
            "properties": {
                "name": {
                    "description": "The resource name of Trace in the format\n`projects/PROJECT_ID/traces/TRACE_ID`. `TRACE_ID` is a unique identifier\nfor a trace within a project and is a base16-encoded, case-insensitive\nstring and is required to be 32 char long.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TimeEvents": {
            "description": "A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation\non the span, consisting of either user-supplied key:value pairs, or\ndetails of an RPC message sent/received on the network.",
            "id": "TimeEvents",
            "properties": {
                "droppedAnnotationsCount": {
                    "description": "The number of dropped annotations after the maximum size was enforced. If\n0 then no annotations were dropped.",
                    "format": "int32",
                    "type": "integer"
                },
                "timeEvent": {
                    "description": "A collection of `TimeEvent`s.",
                    "items": {
                        "$ref": "TimeEvent"
                    },
                    "type": "array"
                },
                "droppedNetworkEventsCount": {
                    "description": "The number of dropped network events after the maximum size was enforced.\nIf 0 then no annotations were dropped.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        }
    },
    "servicePath": "",
    "title": "Google Tracing API",
    "version": "v2"
}