{
    "auth": {
        "oauth2": {
            "scopes": {
                "https://www.googleapis.com/auth/cloud-platform": {
                    "description": "View and manage your data across Google Cloud Platform services"
                }
            }
        }
    },
    "basePath": "",
    "baseUrl": "https://vision.googleapis.com/",
    "batchPath": "batch",
    "canonicalName": "Vision",
    "description": "Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.",
    "discoveryVersion": "v1",
    "documentationLink": "https://cloud.google.com/vision/",
    "icons": {
        "x16": "http://www.google.com/images/icons/product/search-16.gif",
        "x32": "http://www.google.com/images/icons/product/search-32.gif"
    },
    "id": "vision:v1",
    "kind": "discovery#restDescription",
    "name": "vision",
    "ownerDomain": "google.com",
    "ownerName": "Google",
    "parameters": {
        "fields": {
            "description": "Selector specifying which fields to include in a partial response.",
            "location": "query",
            "type": "string"
        },
        "uploadType": {
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
            "location": "query",
            "type": "string"
        },
        "$.xgafv": {
            "description": "V1 error format.",
            "enum": [
                "1",
                "2"
            ],
            "enumDescriptions": [
                "v1 error format",
                "v2 error format"
            ],
            "location": "query",
            "type": "string"
        },
        "callback": {
            "description": "JSONP",
            "location": "query",
            "type": "string"
        },
        "alt": {
            "default": "json",
            "description": "Data format for response.",
            "enum": [
                "json",
                "media",
                "proto"
            ],
            "enumDescriptions": [
                "Responses with Content-Type of application/json",
                "Media download with context-dependent Content-Type",
                "Responses with Content-Type of application/x-protobuf"
            ],
            "location": "query",
            "type": "string"
        },
        "access_token": {
            "description": "OAuth access token.",
            "location": "query",
            "type": "string"
        },
        "key": {
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
            "location": "query",
            "type": "string"
        },
        "quotaUser": {
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
            "location": "query",
            "type": "string"
        },
        "pp": {
            "default": "true",
            "description": "Pretty-print response.",
            "location": "query",
            "type": "boolean"
        },
        "oauth_token": {
            "description": "OAuth 2.0 token for the current user.",
            "location": "query",
            "type": "string"
        },
        "bearer_token": {
            "description": "OAuth bearer token.",
            "location": "query",
            "type": "string"
        },
        "upload_protocol": {
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
            "location": "query",
            "type": "string"
        },
        "prettyPrint": {
            "default": "true",
            "description": "Returns response with indentations and line breaks.",
            "location": "query",
            "type": "boolean"
        }
    },
    "protocol": "rest",
    "resources": {
        "images": {
            "methods": {
                "annotate": {
                    "description": "Run image detection and annotation for a batch of images.",
                    "httpMethod": "POST",
                    "id": "vision.images.annotate",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/images:annotate",
                    "request": {
                        "$ref": "BatchAnnotateImagesRequest"
                    },
                    "response": {
                        "$ref": "BatchAnnotateImagesResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                    ]
                }
            }
        }
    },
    "revision": "20170131",
    "rootUrl": "https://vision.googleapis.com/",
    "schemas": {
        "ImageContext": {
            "description": "Image context and/or feature-specific parameters.",
            "id": "ImageContext",
            "properties": {
                "languageHints": {
                    "description": "List of languages to use for TEXT_DETECTION. In most cases, an empty value\nyields the best results since it enables automatic language detection. For\nlanguages based on the Latin alphabet, setting `language_hints` is not\nneeded. In rare cases, when the language of the text in the image is known,\nsetting a hint will help get better results (although it will be a\nsignificant hindrance if the hint is wrong). Text detection returns an\nerror if one or more of the specified languages is not one of the\n[supported languages](/vision/docs/languages).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "latLongRect": {
                    "$ref": "LatLongRect",
                    "description": "lat/long rectangle that specifies the location of the image."
                }
            },
            "type": "object"
        },
        "AnnotateImageRequest": {
            "description": "Request for performing Google Cloud Vision API tasks over a user-provided\nimage, with user-requested features.",
            "id": "AnnotateImageRequest",
            "properties": {
                "imageContext": {
                    "$ref": "ImageContext",
                    "description": "Additional context that may accompany the image."
                },
                "image": {
                    "$ref": "Image",
                    "description": "The image to be processed."
                },
                "features": {
                    "description": "Requested features.",
                    "items": {
                        "$ref": "Feature"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Status": {
            "description": "The `Status` type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs. It is used by\n[gRPC](https://github.com/grpc). The error model is designed to be:\n\n- Simple to use and understand for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error message,\nand error details. The error code should be an enum value of\ngoogle.rpc.Code, but it may accept additional error codes if needed.  The\nerror message should be a developer-facing English message that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror message is needed, put the localized message in the error details or\nlocalize it in the client. The optional error details may contain arbitrary\ninformation about the error. There is a predefined set of error detail types\nin the package `google.rpc` which can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it\nis not necessarily the actual wire format. When the `Status` message is\nexposed in different client libraries and different wire protocols, it can be\nmapped differently. For example, it will likely be mapped to some exceptions\nin Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of\nenvironments, either with or without APIs, to provide a\nconsistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,\n    it may embed the `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may\n    have a `Status` message for error reporting purpose.\n\n- Batch operations. If a client uses batch request and batch response, the\n    `Status` message should be used directly inside batch response, one for\n    each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation\n    results in its response, the status of those operations should be\n    represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could\n    be used directly after any stripping needed for security/privacy reasons.",
            "id": "Status",
            "properties": {
                "details": {
                    "description": "A list of messages that carry the error details.  There will be a\ncommon set of message types for APIs to use.",
                    "items": {
                        "additionalProperties": {
                            "description": "Properties of the object. Contains field @type with type URL.",
                            "type": "any"
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "code": {
                    "description": "The status code, which should be an enum value of google.rpc.Code.",
                    "format": "int32",
                    "type": "integer"
                },
                "message": {
                    "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LatLongRect": {
            "description": "Rectangle determined by min and max `LatLng` pairs.",
            "id": "LatLongRect",
            "properties": {
                "minLatLng": {
                    "$ref": "LatLng",
                    "description": "Min lat/long pair."
                },
                "maxLatLng": {
                    "$ref": "LatLng",
                    "description": "Max lat/long pair."
                }
            },
            "type": "object"
        },
        "LatLng": {
            "description": "An object representing a latitude/longitude pair. This is expressed as a pair\nof doubles representing degrees latitude and degrees longitude. Unless\nspecified otherwise, this must conform to the\n<a href=\"http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf\">WGS84\nstandard</a>. Values must be within normalized ranges.\n\nExample of normalization code in Python:\n\n    def NormalizeLongitude(longitude):\n      \"\"\"Wraps decimal degrees longitude to [-180.0, 180.0].\"\"\"\n      q, r = divmod(longitude, 360.0)\n      if r > 180.0 or (r == 180.0 and q <= -1.0):\n        return r - 360.0\n      return r\n\n    def NormalizeLatLng(latitude, longitude):\n      \"\"\"Wraps decimal degrees latitude and longitude to\n      [-90.0, 90.0] and [-180.0, 180.0], respectively.\"\"\"\n      r = latitude % 360.0\n      if r <= 90.0:\n        return r, NormalizeLongitude(longitude)\n      elif r >= 270.0:\n        return r - 360, NormalizeLongitude(longitude)\n      else:\n        return 180 - r, NormalizeLongitude(longitude + 180.0)\n\n    assert 180.0 == NormalizeLongitude(180.0)\n    assert -180.0 == NormalizeLongitude(-180.0)\n    assert -179.0 == NormalizeLongitude(181.0)\n    assert (0.0, 0.0) == NormalizeLatLng(360.0, 0.0)\n    assert (0.0, 0.0) == NormalizeLatLng(-360.0, 0.0)\n    assert (85.0, 180.0) == NormalizeLatLng(95.0, 0.0)\n    assert (-85.0, -170.0) == NormalizeLatLng(-95.0, 10.0)\n    assert (90.0, 10.0) == NormalizeLatLng(90.0, 10.0)\n    assert (-90.0, -10.0) == NormalizeLatLng(-90.0, -10.0)\n    assert (0.0, -170.0) == NormalizeLatLng(-180.0, 10.0)\n    assert (0.0, -170.0) == NormalizeLatLng(180.0, 10.0)\n    assert (-90.0, 10.0) == NormalizeLatLng(270.0, 10.0)\n    assert (90.0, 10.0) == NormalizeLatLng(-270.0, 10.0)\n\nThe code in logs/storage/validator/logs_validator_traits.cc treats this type\nas if it were annotated as ST_LOCATION.",
            "id": "LatLng",
            "properties": {
                "latitude": {
                    "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
                    "format": "double",
                    "type": "number"
                },
                "longitude": {
                    "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
                    "format": "double",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "Color": {
            "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well. Here are some examples:\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
            "id": "Color",
            "properties": {
                "green": {
                    "description": "The amount of green in the color as a value in the interval [0, 1].",
                    "format": "float",
                    "type": "number"
                },
                "blue": {
                    "description": "The amount of blue in the color as a value in the interval [0, 1].",
                    "format": "float",
                    "type": "number"
                },
                "alpha": {
                    "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                    "format": "float",
                    "type": "number"
                },
                "red": {
                    "description": "The amount of red in the color as a value in the interval [0, 1].",
                    "format": "float",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "Feature": {
            "description": "Users describe the type of Google Cloud Vision API tasks to perform over\nimages by using *Feature*s. Each Feature indicates a type of image\ndetection task to perform. Features encode the Cloud Vision API\nvertical to operate on and the number of top-scoring results to return.",
            "id": "Feature",
            "properties": {
                "type": {
                    "description": "The feature type.",
                    "enum": [
                        "TYPE_UNSPECIFIED",
                        "FACE_DETECTION",
                        "LANDMARK_DETECTION",
                        "LOGO_DETECTION",
                        "LABEL_DETECTION",
                        "TEXT_DETECTION",
                        "SAFE_SEARCH_DETECTION",
                        "IMAGE_PROPERTIES"
                    ],
                    "enumDescriptions": [
                        "Unspecified feature type.",
                        "Run face detection.",
                        "Run landmark detection.",
                        "Run logo detection.",
                        "Run label detection.",
                        "Run OCR.",
                        "Run computer vision models to compute image safe-search properties.",
                        "Compute a set of image properties, such as the image's dominant colors."
                    ],
                    "type": "string"
                },
                "maxResults": {
                    "description": "Maximum number of results of this type.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "ImageProperties": {
            "description": "Stores image properties, such as dominant colors.",
            "id": "ImageProperties",
            "properties": {
                "dominantColors": {
                    "$ref": "DominantColorsAnnotation",
                    "description": "If present, dominant colors completed successfully."
                }
            },
            "type": "object"
        },
        "SafeSearchAnnotation": {
            "description": "Set of features pertaining to the image, computed by computer vision\nmethods over safe-search verticals (for example, adult, spoof, medical,\nviolence).",
            "id": "SafeSearchAnnotation",
            "properties": {
                "violence": {
                    "description": "Violence likelihood.",
                    "enum": [
                        "UNKNOWN",
                        "VERY_UNLIKELY",
                        "UNLIKELY",
                        "POSSIBLE",
                        "LIKELY",
                        "VERY_LIKELY"
                    ],
                    "enumDescriptions": [
                        "Unknown likelihood.",
                        "It is very unlikely that the image belongs to the specified vertical.",
                        "It is unlikely that the image belongs to the specified vertical.",
                        "It is possible that the image belongs to the specified vertical.",
                        "It is likely that the image belongs to the specified vertical.",
                        "It is very likely that the image belongs to the specified vertical."
                    ],
                    "type": "string"
                },
                "adult": {
                    "description": "Represents the adult content likelihood for the image.",
                    "enum": [
                        "UNKNOWN",
                        "VERY_UNLIKELY",
                        "UNLIKELY",
                        "POSSIBLE",
                        "LIKELY",
                        "VERY_LIKELY"
                    ],
                    "enumDescriptions": [
                        "Unknown likelihood.",
                        "It is very unlikely that the image belongs to the specified vertical.",
                        "It is unlikely that the image belongs to the specified vertical.",
                        "It is possible that the image belongs to the specified vertical.",
                        "It is likely that the image belongs to the specified vertical.",
                        "It is very likely that the image belongs to the specified vertical."
                    ],
                    "type": "string"
                },
                "spoof": {
                    "description": "Spoof likelihood. The likelihood that an modification\nwas made to the image's canonical version to make it appear\nfunny or offensive.",
                    "enum": [
                        "UNKNOWN",
                        "VERY_UNLIKELY",
                        "UNLIKELY",
                        "POSSIBLE",
                        "LIKELY",
                        "VERY_LIKELY"
                    ],
                    "enumDescriptions": [
                        "Unknown likelihood.",
                        "It is very unlikely that the image belongs to the specified vertical.",
                        "It is unlikely that the image belongs to the specified vertical.",
                        "It is possible that the image belongs to the specified vertical.",
                        "It is likely that the image belongs to the specified vertical.",
                        "It is very likely that the image belongs to the specified vertical."
                    ],
                    "type": "string"
                },
                "medical": {
                    "description": "Likelihood that this is a medical image.",
                    "enum": [
                        "UNKNOWN",
                        "VERY_UNLIKELY",
                        "UNLIKELY",
                        "POSSIBLE",
                        "LIKELY",
                        "VERY_LIKELY"
                    ],
                    "enumDescriptions": [
                        "Unknown likelihood.",
                        "It is very unlikely that the image belongs to the specified vertical.",
                        "It is unlikely that the image belongs to the specified vertical.",
                        "It is possible that the image belongs to the specified vertical.",
                        "It is likely that the image belongs to the specified vertical.",
                        "It is very likely that the image belongs to the specified vertical."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DominantColorsAnnotation": {
            "description": "Set of dominant colors and their corresponding scores.",
            "id": "DominantColorsAnnotation",
            "properties": {
                "colors": {
                    "description": "RGB color values with their score and pixel fraction.",
                    "items": {
                        "$ref": "ColorInfo"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Vertex": {
            "description": "A vertex represents a 2D point in the image.\nNOTE: the vertex coordinates are in the same scale as the original image.",
            "id": "Vertex",
            "properties": {
                "y": {
                    "description": "Y coordinate.",
                    "format": "int32",
                    "type": "integer"
                },
                "x": {
                    "description": "X coordinate.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "BoundingPoly": {
            "description": "A bounding polygon for the detected image annotation.",
            "id": "BoundingPoly",
            "properties": {
                "vertices": {
                    "description": "The bounding polygon vertices.",
                    "items": {
                        "$ref": "Vertex"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AnnotateImageResponse": {
            "description": "Response to an image annotation request.",
            "id": "AnnotateImageResponse",
            "properties": {
                "imagePropertiesAnnotation": {
                    "$ref": "ImageProperties",
                    "description": "If present, image properties were extracted successfully."
                },
                "faceAnnotations": {
                    "description": "If present, face detection has completed successfully.",
                    "items": {
                        "$ref": "FaceAnnotation"
                    },
                    "type": "array"
                },
                "logoAnnotations": {
                    "description": "If present, logo detection has completed successfully.",
                    "items": {
                        "$ref": "EntityAnnotation"
                    },
                    "type": "array"
                },
                "labelAnnotations": {
                    "description": "If present, label detection has completed successfully.",
                    "items": {
                        "$ref": "EntityAnnotation"
                    },
                    "type": "array"
                },
                "safeSearchAnnotation": {
                    "$ref": "SafeSearchAnnotation",
                    "description": "If present, safe-search annotation has completed successfully."
                },
                "error": {
                    "$ref": "Status",
                    "description": "If set, represents the error message for the operation.\nNote that filled-in image annotations are guaranteed to be\ncorrect, even when `error` is set."
                },
                "landmarkAnnotations": {
                    "description": "If present, landmark detection has completed successfully.",
                    "items": {
                        "$ref": "EntityAnnotation"
                    },
                    "type": "array"
                },
                "textAnnotations": {
                    "description": "If present, text (OCR) detection or document (OCR) text detection has\ncompleted successfully.",
                    "items": {
                        "$ref": "EntityAnnotation"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Property": {
            "description": "A `Property` consists of a user-supplied name/value pair.",
            "id": "Property",
            "properties": {
                "value": {
                    "description": "Value of the property.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the property.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LocationInfo": {
            "description": "Detected entity location information.",
            "id": "LocationInfo",
            "properties": {
                "latLng": {
                    "$ref": "LatLng",
                    "description": "lat/long location coordinates."
                }
            },
            "type": "object"
        },
        "BatchAnnotateImagesResponse": {
            "description": "Response to a batch image annotation request.",
            "id": "BatchAnnotateImagesResponse",
            "properties": {
                "responses": {
                    "description": "Individual responses to image annotation requests within the batch.",
                    "items": {
                        "$ref": "AnnotateImageResponse"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ImageSource": {
            "description": "External image source (Google Cloud Storage image location).",
            "id": "ImageSource",
            "properties": {
                "gcsImageUri": {
                    "description": "NOTE: For new code `image_uri` below is preferred.\nGoogle Cloud Storage image URI, which must be in the following form:\n`gs://bucket_name/object_name` (for details, see\n[Google Cloud Storage Request\nURIs](https://cloud.google.com/storage/docs/reference-uris)).\nNOTE: Cloud Storage object versioning is not supported.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Position": {
            "description": "A 3D position in the image, used primarily for Face detection landmarks.\nA valid Position must have both x and y coordinates.\nThe position coordinates are in the same scale as the original image.",
            "id": "Position",
            "properties": {
                "x": {
                    "description": "X coordinate.",
                    "format": "float",
                    "type": "number"
                },
                "z": {
                    "description": "Z coordinate (or depth).",
                    "format": "float",
                    "type": "number"
                },
                "y": {
                    "description": "Y coordinate.",
                    "format": "float",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "ColorInfo": {
            "description": "Color information consists of RGB channels, score, and the fraction of\nthe image that the color occupies in the image.",
            "id": "ColorInfo",
            "properties": {
                "pixelFraction": {
                    "description": "The fraction of pixels the color occupies in the image.\nValue in range [0, 1].",
                    "format": "float",
                    "type": "number"
                },
                "color": {
                    "$ref": "Color",
                    "description": "RGB components of the color."
                },
                "score": {
                    "description": "Image-specific score for this color. Value in range [0, 1].",
                    "format": "float",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "EntityAnnotation": {
            "description": "Set of detected entity features.",
            "id": "EntityAnnotation",
            "properties": {
                "mid": {
                    "description": "Opaque entity ID. Some IDs may be available in\n[Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).",
                    "type": "string"
                },
                "confidence": {
                    "description": "The accuracy of the entity detection in an image.\nFor example, for an image in which the \"Eiffel Tower\" entity is detected,\nthis field represents the confidence that there is a tower in the query\nimage. Range [0, 1].",
                    "format": "float",
                    "type": "number"
                },
                "boundingPoly": {
                    "$ref": "BoundingPoly",
                    "description": "Image region to which this entity belongs. Currently not produced\nfor `LABEL_DETECTION` features. For `TEXT_DETECTION` (OCR), `boundingPoly`s\nare produced for the entire text detected in an image region, followed by\n`boundingPoly`s for each word within the detected text."
                },
                "locale": {
                    "description": "The language code for the locale in which the entity textual\n`description` is expressed.",
                    "type": "string"
                },
                "description": {
                    "description": "Entity textual description, expressed in its `locale` language.",
                    "type": "string"
                },
                "topicality": {
                    "description": "The relevancy of the ICA (Image Content Annotation) label to the\nimage. For example, the relevancy of \"tower\" is likely higher to an image\ncontaining the detected \"Eiffel Tower\" than to an image containing a\ndetected distant towering building, even though the confidence that\nthere is a tower in each image may be the same. Range [0, 1].",
                    "format": "float",
                    "type": "number"
                },
                "properties": {
                    "description": "Some entities may have optional user-supplied `Property` (name/value)\nfields, such a score or string that qualifies the entity.",
                    "items": {
                        "$ref": "Property"
                    },
                    "type": "array"
                },
                "score": {
                    "description": "Overall score of the result. Range [0, 1].",
                    "format": "float",
                    "type": "number"
                },
                "locations": {
                    "description": "The location information for the detected entity. Multiple\n`LocationInfo` elements can be present because one location may\nindicate the location of the scene in the image, and another location\nmay indicate the location of the place where the image was taken.\nLocation information is usually present for landmarks.",
                    "items": {
                        "$ref": "LocationInfo"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Landmark": {
            "description": "A face-specific landmark (for example, a face feature).\nLandmark positions may fall outside the bounds of the image\nif the face is near one or more edges of the image.\nTherefore it is NOT guaranteed that `0 <= x < width` or\n`0 <= y < height`.",
            "id": "Landmark",
            "properties": {
                "position": {
                    "$ref": "Position",
                    "description": "Face landmark position."
                },
                "type": {
                    "description": "Face landmark type.",
                    "enum": [
                        "UNKNOWN_LANDMARK",
                        "LEFT_EYE",
                        "RIGHT_EYE",
                        "LEFT_OF_LEFT_EYEBROW",
                        "RIGHT_OF_LEFT_EYEBROW",
                        "LEFT_OF_RIGHT_EYEBROW",
                        "RIGHT_OF_RIGHT_EYEBROW",
                        "MIDPOINT_BETWEEN_EYES",
                        "NOSE_TIP",
                        "UPPER_LIP",
                        "LOWER_LIP",
                        "MOUTH_LEFT",
                        "MOUTH_RIGHT",
                        "MOUTH_CENTER",
                        "NOSE_BOTTOM_RIGHT",
                        "NOSE_BOTTOM_LEFT",
                        "NOSE_BOTTOM_CENTER",
                        "LEFT_EYE_TOP_BOUNDARY",
                        "LEFT_EYE_RIGHT_CORNER",
                        "LEFT_EYE_BOTTOM_BOUNDARY",
                        "LEFT_EYE_LEFT_CORNER",
                        "RIGHT_EYE_TOP_BOUNDARY",
                        "RIGHT_EYE_RIGHT_CORNER",
                        "RIGHT_EYE_BOTTOM_BOUNDARY",
                        "RIGHT_EYE_LEFT_CORNER",
                        "LEFT_EYEBROW_UPPER_MIDPOINT",
                        "RIGHT_EYEBROW_UPPER_MIDPOINT",
                        "LEFT_EAR_TRAGION",
                        "RIGHT_EAR_TRAGION",
                        "LEFT_EYE_PUPIL",
                        "RIGHT_EYE_PUPIL",
                        "FOREHEAD_GLABELLA",
                        "CHIN_GNATHION",
                        "CHIN_LEFT_GONION",
                        "CHIN_RIGHT_GONION"
                    ],
                    "enumDescriptions": [
                        "Unknown face landmark detected. Should not be filled.",
                        "Left eye.",
                        "Right eye.",
                        "Left of left eyebrow.",
                        "Right of left eyebrow.",
                        "Left of right eyebrow.",
                        "Right of right eyebrow.",
                        "Midpoint between eyes.",
                        "Nose tip.",
                        "Upper lip.",
                        "Lower lip.",
                        "Mouth left.",
                        "Mouth right.",
                        "Mouth center.",
                        "Nose, bottom right.",
                        "Nose, bottom left.",
                        "Nose, bottom center.",
                        "Left eye, top boundary.",
                        "Left eye, right corner.",
                        "Left eye, bottom boundary.",
                        "Left eye, left corner.",
                        "Right eye, top boundary.",
                        "Right eye, right corner.",
                        "Right eye, bottom boundary.",
                        "Right eye, left corner.",
                        "Left eyebrow, upper midpoint.",
                        "Right eyebrow, upper midpoint.",
                        "Left ear tragion.",
                        "Right ear tragion.",
                        "Left eye pupil.",
                        "Right eye pupil.",
                        "Forehead glabella.",
                        "Chin gnathion.",
                        "Chin left gonion.",
                        "Chin right gonion."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Image": {
            "description": "Client image to perform Google Cloud Vision API tasks over.",
            "id": "Image",
            "properties": {
                "content": {
                    "description": "Image content, represented as a stream of bytes.\nNote: as with all `bytes` fields, protobuffers use a pure binary\nrepresentation, whereas JSON representations use base64.",
                    "format": "byte",
                    "type": "string"
                },
                "source": {
                    "$ref": "ImageSource",
                    "description": "Google Cloud Storage image location. If both `content` and `source`\nare provided for an image, `content` takes precedence and is\nused to perform the image annotation request."
                }
            },
            "type": "object"
        },
        "FaceAnnotation": {
            "description": "A face annotation object contains the results of face detection.",
            "id": "FaceAnnotation",
            "properties": {
                "blurredLikelihood": {
                    "description": "Blurred likelihood.",
                    "enum": [
                        "UNKNOWN",
                        "VERY_UNLIKELY",
                        "UNLIKELY",
                        "POSSIBLE",
                        "LIKELY",
                        "VERY_LIKELY"
                    ],
                    "enumDescriptions": [
                        "Unknown likelihood.",
                        "It is very unlikely that the image belongs to the specified vertical.",
                        "It is unlikely that the image belongs to the specified vertical.",
                        "It is possible that the image belongs to the specified vertical.",
                        "It is likely that the image belongs to the specified vertical.",
                        "It is very likely that the image belongs to the specified vertical."
                    ],
                    "type": "string"
                },
                "headwearLikelihood": {
                    "description": "Headwear likelihood.",
                    "enum": [
                        "UNKNOWN",
                        "VERY_UNLIKELY",
                        "UNLIKELY",
                        "POSSIBLE",
                        "LIKELY",
                        "VERY_LIKELY"
                    ],
                    "enumDescriptions": [
                        "Unknown likelihood.",
                        "It is very unlikely that the image belongs to the specified vertical.",
                        "It is unlikely that the image belongs to the specified vertical.",
                        "It is possible that the image belongs to the specified vertical.",
                        "It is likely that the image belongs to the specified vertical.",
                        "It is very likely that the image belongs to the specified vertical."
                    ],
                    "type": "string"
                },
                "boundingPoly": {
                    "$ref": "BoundingPoly",
                    "description": "The bounding polygon around the face. The coordinates of the bounding box\nare in the original image's scale, as returned in `ImageParams`.\nThe bounding box is computed to \"frame\" the face in accordance with human\nexpectations. It is based on the landmarker results.\nNote that one or more x and/or y coordinates may not be generated in the\n`BoundingPoly` (the polygon will be unbounded) if only a partial face\nappears in the image to be annotated."
                },
                "rollAngle": {
                    "description": "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation\nof the face relative to the image vertical about the axis perpendicular to\nthe face. Range [-180,180].",
                    "format": "float",
                    "type": "number"
                },
                "sorrowLikelihood": {
                    "description": "Sorrow likelihood.",
                    "enum": [
                        "UNKNOWN",
                        "VERY_UNLIKELY",
                        "UNLIKELY",
                        "POSSIBLE",
                        "LIKELY",
                        "VERY_LIKELY"
                    ],
                    "enumDescriptions": [
                        "Unknown likelihood.",
                        "It is very unlikely that the image belongs to the specified vertical.",
                        "It is unlikely that the image belongs to the specified vertical.",
                        "It is possible that the image belongs to the specified vertical.",
                        "It is likely that the image belongs to the specified vertical.",
                        "It is very likely that the image belongs to the specified vertical."
                    ],
                    "type": "string"
                },
                "tiltAngle": {
                    "description": "Pitch angle, which indicates the upwards/downwards angle that the face is\npointing relative to the image's horizontal plane. Range [-180,180].",
                    "format": "float",
                    "type": "number"
                },
                "fdBoundingPoly": {
                    "$ref": "BoundingPoly",
                    "description": "The `fd_bounding_poly` bounding polygon is tighter than the\n`boundingPoly`, and encloses only the skin part of the face. Typically, it\nis used to eliminate the face from any image analysis that detects the\n\"amount of skin\" visible in an image. It is not based on the\nlandmarker results, only on the initial face detection, hence\nthe <code>fd</code> (face detection) prefix."
                },
                "surpriseLikelihood": {
                    "description": "Surprise likelihood.",
                    "enum": [
                        "UNKNOWN",
                        "VERY_UNLIKELY",
                        "UNLIKELY",
                        "POSSIBLE",
                        "LIKELY",
                        "VERY_LIKELY"
                    ],
                    "enumDescriptions": [
                        "Unknown likelihood.",
                        "It is very unlikely that the image belongs to the specified vertical.",
                        "It is unlikely that the image belongs to the specified vertical.",
                        "It is possible that the image belongs to the specified vertical.",
                        "It is likely that the image belongs to the specified vertical.",
                        "It is very likely that the image belongs to the specified vertical."
                    ],
                    "type": "string"
                },
                "landmarks": {
                    "description": "Detected face landmarks.",
                    "items": {
                        "$ref": "Landmark"
                    },
                    "type": "array"
                },
                "angerLikelihood": {
                    "description": "Anger likelihood.",
                    "enum": [
                        "UNKNOWN",
                        "VERY_UNLIKELY",
                        "UNLIKELY",
                        "POSSIBLE",
                        "LIKELY",
                        "VERY_LIKELY"
                    ],
                    "enumDescriptions": [
                        "Unknown likelihood.",
                        "It is very unlikely that the image belongs to the specified vertical.",
                        "It is unlikely that the image belongs to the specified vertical.",
                        "It is possible that the image belongs to the specified vertical.",
                        "It is likely that the image belongs to the specified vertical.",
                        "It is very likely that the image belongs to the specified vertical."
                    ],
                    "type": "string"
                },
                "joyLikelihood": {
                    "description": "Joy likelihood.",
                    "enum": [
                        "UNKNOWN",
                        "VERY_UNLIKELY",
                        "UNLIKELY",
                        "POSSIBLE",
                        "LIKELY",
                        "VERY_LIKELY"
                    ],
                    "enumDescriptions": [
                        "Unknown likelihood.",
                        "It is very unlikely that the image belongs to the specified vertical.",
                        "It is unlikely that the image belongs to the specified vertical.",
                        "It is possible that the image belongs to the specified vertical.",
                        "It is likely that the image belongs to the specified vertical.",
                        "It is very likely that the image belongs to the specified vertical."
                    ],
                    "type": "string"
                },
                "landmarkingConfidence": {
                    "description": "Face landmarking confidence. Range [0, 1].",
                    "format": "float",
                    "type": "number"
                },
                "underExposedLikelihood": {
                    "description": "Under-exposed likelihood.",
                    "enum": [
                        "UNKNOWN",
                        "VERY_UNLIKELY",
                        "UNLIKELY",
                        "POSSIBLE",
                        "LIKELY",
                        "VERY_LIKELY"
                    ],
                    "enumDescriptions": [
                        "Unknown likelihood.",
                        "It is very unlikely that the image belongs to the specified vertical.",
                        "It is unlikely that the image belongs to the specified vertical.",
                        "It is possible that the image belongs to the specified vertical.",
                        "It is likely that the image belongs to the specified vertical.",
                        "It is very likely that the image belongs to the specified vertical."
                    ],
                    "type": "string"
                },
                "panAngle": {
                    "description": "Yaw angle, which indicates the leftward/rightward angle that the face is\npointing relative to the vertical plane perpendicular to the image. Range\n[-180,180].",
                    "format": "float",
                    "type": "number"
                },
                "detectionConfidence": {
                    "description": "Detection confidence. Range [0, 1].",
                    "format": "float",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "BatchAnnotateImagesRequest": {
            "description": "Multiple image annotation requests are batched into a single service call.",
            "id": "BatchAnnotateImagesRequest",
            "properties": {
                "requests": {
                    "description": "Individual image annotation requests for this batch.",
                    "items": {
                        "$ref": "AnnotateImageRequest"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "servicePath": "",
    "title": "Google Cloud Vision API",
    "version": "v1"
}