{
    "auth": {
        "oauth2": {
            "scopes": {
                "https://www.googleapis.com/auth/cloud-platform": {
                    "description": "View and manage your data across Google Cloud Platform services"
                },
                "https://www.googleapis.com/auth/firebase": {
                    "description": "View and administer all your Firebase data and settings"
                },
                "https://www.googleapis.com/auth/firebase.readonly": {
                    "description": "View all your Firebase data and settings"
                }
            }
        }
    },
    "basePath": "",
    "baseUrl": "https://firebaserules.googleapis.com/",
    "batchPath": "batch",
    "canonicalName": "Firebase Rules API",
    "description": "Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request.\n",
    "discoveryVersion": "v1",
    "documentationLink": "https://firebase.google.com/docs/storage/security",
    "icons": {
        "x16": "http://www.google.com/images/icons/product/search-16.gif",
        "x32": "http://www.google.com/images/icons/product/search-32.gif"
    },
    "id": "firebaserules:v1",
    "kind": "discovery#restDescription",
    "name": "firebaserules",
    "ownerDomain": "google.com",
    "ownerName": "Google",
    "parameters": {
        "quotaUser": {
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
            "location": "query",
            "type": "string"
        },
        "pp": {
            "default": "true",
            "description": "Pretty-print response.",
            "location": "query",
            "type": "boolean"
        },
        "bearer_token": {
            "description": "OAuth bearer token.",
            "location": "query",
            "type": "string"
        },
        "oauth_token": {
            "description": "OAuth 2.0 token for the current user.",
            "location": "query",
            "type": "string"
        },
        "upload_protocol": {
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
            "location": "query",
            "type": "string"
        },
        "prettyPrint": {
            "default": "true",
            "description": "Returns response with indentations and line breaks.",
            "location": "query",
            "type": "boolean"
        },
        "fields": {
            "description": "Selector specifying which fields to include in a partial response.",
            "location": "query",
            "type": "string"
        },
        "uploadType": {
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
            "location": "query",
            "type": "string"
        },
        "callback": {
            "description": "JSONP",
            "location": "query",
            "type": "string"
        },
        "$.xgafv": {
            "description": "V1 error format.",
            "enum": [
                "1",
                "2"
            ],
            "enumDescriptions": [
                "v1 error format",
                "v2 error format"
            ],
            "location": "query",
            "type": "string"
        },
        "alt": {
            "default": "json",
            "description": "Data format for response.",
            "enum": [
                "json",
                "media",
                "proto"
            ],
            "enumDescriptions": [
                "Responses with Content-Type of application/json",
                "Media download with context-dependent Content-Type",
                "Responses with Content-Type of application/x-protobuf"
            ],
            "location": "query",
            "type": "string"
        },
        "access_token": {
            "description": "OAuth access token.",
            "location": "query",
            "type": "string"
        },
        "key": {
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
            "location": "query",
            "type": "string"
        }
    },
    "protocol": "rest",
    "resources": {
        "projects": {
            "methods": {
                "test": {
                    "description": "Test `Source` for syntactic and semantic correctness. Issues present in the\nrules, if any, will be returned to the caller with a description, severity,\nand source location.\n\nThe test method will typically be executed with a developer provided\n`Source`, but if regression testing is desired, this method may be\nexecuted against a `Ruleset` resource name and the `Source` will be\nretrieved from the persisted `Ruleset`.\n\nThe following is an example of `Source` that permits users to upload images\nto a bucket bearing their user id and matching the correct metadata:\n\n_*Example*_\n\n    // Users are allowed to subscribe and unsubscribe to the blog.\n    service firebase.storage {\n      match /users/{userId}/images/{imageName} {\n          allow write: if userId == request.userId\n              && (imageName.endsWith('.png') || imageName.endsWith('.jpg'))\n              && resource.mimeType.startsWith('image/')\n      }\n    }",
                    "httpMethod": "POST",
                    "id": "firebaserules.projects.test",
                    "parameterOrder": [
                        "name"
                    ],
                    "parameters": {
                        "name": {
                            "description": "Name of the project.\n\nFormat: `projects/{project_id}`",
                            "location": "path",
                            "pattern": "^projects/.+$",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "v1/{+name}:test",
                    "request": {
                        "$ref": "TestRulesetRequest"
                    },
                    "response": {
                        "$ref": "TestRulesetResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/firebase",
                        "https://www.googleapis.com/auth/firebase.readonly"
                    ]
                }
            },
            "resources": {
                "rulesets": {
                    "methods": {
                        "delete": {
                            "description": "Delete a `Ruleset` by resource name.\n\nIf the `Ruleset` is referenced by a `Release` the operation will fail.",
                            "httpMethod": "DELETE",
                            "id": "firebaserules.projects.rulesets.delete",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "Resource name for the ruleset to delete.\n\nFormat: `projects/{project_id}/rulesets/{ruleset_id}`",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/rulesets/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+name}",
                            "response": {
                                "$ref": "Empty"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/firebase"
                            ]
                        },
                        "get": {
                            "description": "Get a `Ruleset` by name including the full `Source` contents.",
                            "httpMethod": "GET",
                            "id": "firebaserules.projects.rulesets.get",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "Resource name for the ruleset to get.\n\nFormat: `projects/{project_id}/rulesets/{ruleset_id}`",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/rulesets/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+name}",
                            "response": {
                                "$ref": "Ruleset"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/firebase",
                                "https://www.googleapis.com/auth/firebase.readonly"
                            ]
                        },
                        "list": {
                            "description": "List `Ruleset` metadata only and optionally filter the results by Ruleset\nname.\n\nThe full `Source` contents of a `Ruleset` may be retrieved with\nGetRuleset.",
                            "httpMethod": "GET",
                            "id": "firebaserules.projects.rulesets.list",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "Resource name for the project.\n\nFormat: `projects/{project_id}`",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                },
                                "pageToken": {
                                    "description": "Next page token for loading the next batch of `Ruleset` instances.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "pageSize": {
                                    "description": "Page size to load. Maximum of 100. Defaults to 10.\nNote: `page_size` is just a hint and the service may choose to load less\nthan `page_size` due to the size of the output. To traverse all of the\nreleases, caller should iterate until the `page_token` is empty.",
                                    "format": "int32",
                                    "location": "query",
                                    "type": "integer"
                                }
                            },
                            "path": "v1/{+name}/rulesets",
                            "response": {
                                "$ref": "ListRulesetsResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/firebase",
                                "https://www.googleapis.com/auth/firebase.readonly"
                            ]
                        },
                        "create": {
                            "description": "Create a `Ruleset` from `Source`.\n\nThe `Ruleset` is given a unique generated name which is returned to the\ncaller. `Source` containing syntactic or semantics errors will result in an\nerror response indicating the first error encountered. For a detailed view\nof `Source` issues, use TestRuleset.",
                            "httpMethod": "POST",
                            "id": "firebaserules.projects.rulesets.create",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "Resource name for Project which owns this `Ruleset`.\n\nFormat: `projects/{project_id}`",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+name}/rulesets",
                            "request": {
                                "$ref": "Ruleset"
                            },
                            "response": {
                                "$ref": "Ruleset"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/firebase"
                            ]
                        }
                    }
                },
                "releases": {
                    "methods": {
                        "get": {
                            "description": "Get a `Release` by name.",
                            "httpMethod": "GET",
                            "id": "firebaserules.projects.releases.get",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "Resource name of the `Release`.\n\n\nFormat: `projects/{project_id}/releases/{release_id}`",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/releases/.+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+name}",
                            "response": {
                                "$ref": "Release"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/firebase",
                                "https://www.googleapis.com/auth/firebase.readonly"
                            ]
                        },
                        "list": {
                            "description": "List the `Release` values for a project. This list may optionally be\nfiltered by `Release` name or `Ruleset` id or both.",
                            "httpMethod": "GET",
                            "id": "firebaserules.projects.releases.list",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "Resource name for the project.\n\nFormat: `projects/{project_id}`",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                },
                                "pageToken": {
                                    "description": "Next page token for the next batch of `Release` instances.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "pageSize": {
                                    "description": "Page size to load. Maximum of 100. Defaults to 10.\nNote: `page_size` is just a hint and the service may choose to load less\nthan `page_size` due to the size of the output. To traverse all of the\nreleases, caller should iterate until the `page_token` is empty.",
                                    "format": "int32",
                                    "location": "query",
                                    "type": "integer"
                                },
                                "filter": {
                                    "description": "`Release` filter. The list method supports filters with restrictions on the\n`Release` `name` and also on the `Ruleset` `ruleset_name`.\n\nExample 1) A filter of 'name=prod*' might return `Release`s with names\nwithin 'projects/foo' prefixed with 'prod':\n\nName                          | Ruleset Name\n------------------------------|-------------\nprojects/foo/releases/prod    | projects/foo/rulesets/uuid1234\nprojects/foo/releases/prod/v1 | projects/foo/rulesets/uuid1234\nprojects/foo/releases/prod/v2 | projects/foo/rulesets/uuid8888\n\nExample 2) A filter of `name=prod* ruleset_name=uuid1234` would return only\n`Release` instances for 'projects/foo' with names prefixed with 'prod'\nreferring to the same `Ruleset` name of 'uuid1234':\n\nName                          | Ruleset Name\n------------------------------|-------------\nprojects/foo/releases/prod    | projects/foo/rulesets/1234\nprojects/foo/releases/prod/v1 | projects/foo/rulesets/1234\n\nIn the examples, the filter parameters refer to the search filters for\nrelease and ruleset names are relative to the project releases and rulesets\ncollections. Fully qualified prefixed may also be used. e.g.\n`name=projects/foo/releases/prod* ruleset_name=projects/foo/rulesets/uuid1`",
                                    "location": "query",
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+name}/releases",
                            "response": {
                                "$ref": "ListReleasesResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/firebase",
                                "https://www.googleapis.com/auth/firebase.readonly"
                            ]
                        },
                        "update": {
                            "description": "Update a `Release`.\n\nOnly updates to the `ruleset_name` field will be honored. `Release` rename\nis not supported. To create a `Release` use the CreateRelease method\ninstead.",
                            "httpMethod": "PUT",
                            "id": "firebaserules.projects.releases.update",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "Resource name for the `Release`.\n\n`Release` names may be structured `app1/prod/v2` or flat `app1_prod_v2`\nwhich affords developers a great deal of flexibility in mapping the name\nto the style that best fits their existing development practices. For\nexample, a name could refer to an environment, an app, a version, or some\ncombination of three.\n\nIn the table below, for the project name `projects/foo`, the following\nrelative release paths show how flat and structured names might be chosen\nto match a desired development / deployment strategy.\n\nUse Case     | Flat Name           | Structured Name\n-------------|---------------------|----------------\nEnvironments | releases/qa         | releases/qa\nApps         | releases/app1_qa    | releases/app1/qa\nVersions     | releases/app1_v2_qa | releases/app1/v2/qa\n\nThe delimiter between the release name path elements can be almost anything\nand it should work equally well with the release name list filter, but in\nmany ways the structured paths provide a clearer picture of the\nrelationship between `Release` instances.\n\nFormat: `projects/{project_id}/releases/{release_id}`",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/releases/.+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+name}",
                            "request": {
                                "$ref": "Release"
                            },
                            "response": {
                                "$ref": "Release"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/firebase"
                            ]
                        },
                        "create": {
                            "description": "Create a `Release`.\n\nRelease names should reflect the developer's deployment practices. For\nexample, the release name may include the environment name, application\nname, application version, or any other name meaningful to the developer.\nOnce a `Release` refers to a `Ruleset`, the rules can be enforced by\nFirebase Rules-enabled services.\n\nMore than one `Release` may be 'live' concurrently. Consider the following\nthree `Release` names for `projects/foo` and the `Ruleset` to which they\nrefer.\n\nRelease Name                    | Ruleset Name\n--------------------------------|-------------\nprojects/foo/releases/prod      | projects/foo/rulesets/uuid123\nprojects/foo/releases/prod/beta | projects/foo/rulesets/uuid123\nprojects/foo/releases/prod/v23  | projects/foo/rulesets/uuid456\n\nThe table reflects the `Ruleset` rollout in progress. The `prod` and\n`prod/beta` releases refer to the same `Ruleset`. However, `prod/v23`\nrefers to a new `Ruleset`. The `Ruleset` reference for a `Release` may be\nupdated using the UpdateRelease method, and the custom `Release` name\nmay be referenced by specifying the `X-Firebase-Rules-Release-Name` header.",
                            "httpMethod": "POST",
                            "id": "firebaserules.projects.releases.create",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "Resource name for the project which owns this `Release`.\n\nFormat: `projects/{project_id}`",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+name}/releases",
                            "request": {
                                "$ref": "Release"
                            },
                            "response": {
                                "$ref": "Release"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/firebase"
                            ]
                        },
                        "delete": {
                            "description": "Delete a `Release` by resource name.",
                            "httpMethod": "DELETE",
                            "id": "firebaserules.projects.releases.delete",
                            "parameterOrder": [
                                "name"
                            ],
                            "parameters": {
                                "name": {
                                    "description": "Resource name for the `Release` to delete.\n\nFormat: `projects/{project_id}/releases/{release_id}`",
                                    "location": "path",
                                    "pattern": "^projects/[^/]+/releases/.+$",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+name}",
                            "response": {
                                "$ref": "Empty"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/firebase"
                            ]
                        }
                    }
                }
            }
        }
    },
    "revision": "20170127",
    "rootUrl": "https://firebaserules.googleapis.com/",
    "schemas": {
        "ListRulesetsResponse": {
            "description": "The response for FirebaseRulesService.ListRulesets",
            "id": "ListRulesetsResponse",
            "properties": {
                "rulesets": {
                    "description": "List of `Ruleset` instances.",
                    "items": {
                        "$ref": "Ruleset"
                    },
                    "type": "array"
                },
                "nextPageToken": {
                    "description": "The pagination token to retrieve the next page of results. If the value is\nempty, no further results remain.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Source": {
            "description": "`Source` is one or more `File` messages comprising a logical set of rules.",
            "id": "Source",
            "properties": {
                "files": {
                    "description": "`File` set constituting the `Source` bundle.",
                    "items": {
                        "$ref": "File"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SourcePosition": {
            "description": "Position in the `Source` content including its line, column number, and an\nindex of the `File` in the `Source` message. Used for debug purposes.",
            "id": "SourcePosition",
            "properties": {
                "column": {
                    "description": "First column on the source line associated with the source fragment.",
                    "format": "int32",
                    "type": "integer"
                },
                "fileName": {
                    "description": "Name of the `File`.",
                    "type": "string"
                },
                "line": {
                    "description": "Line number of the source fragment. 1-based.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "Issue": {
            "description": "Issues include warnings, errors, and deprecation notices.",
            "id": "Issue",
            "properties": {
                "description": {
                    "description": "Short error description.",
                    "type": "string"
                },
                "sourcePosition": {
                    "$ref": "SourcePosition",
                    "description": "Position of the issue in the `Source`."
                },
                "severity": {
                    "description": "The severity of the issue.",
                    "enum": [
                        "SEVERITY_UNSPECIFIED",
                        "DEPRECATION",
                        "WARNING",
                        "ERROR"
                    ],
                    "enumDescriptions": [
                        "An unspecified severity.",
                        "Deprecation issue for statements and method that may no longer be\nsupported or maintained.",
                        "Warnings such as: unused variables.",
                        "Errors such as: unmatched curly braces or variable redefinition."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TestRulesetRequest": {
            "description": "The request for FirebaseRulesService.TestRuleset.",
            "id": "TestRulesetRequest",
            "properties": {
                "source": {
                    "$ref": "Source",
                    "description": "`Source` to be checked for correctness."
                }
            },
            "type": "object"
        },
        "Ruleset": {
            "description": "`Ruleset` is an immutable copy of `Source` with a globally unique identifier\nand a creation time.",
            "id": "Ruleset",
            "properties": {
                "createTime": {
                    "description": "Time the `Ruleset` was created.\n@OutputOnly",
                    "format": "google-datetime",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the `Ruleset`. The ruleset_id is auto generated by the service.\nFormat: `projects/{project_id}/rulesets/{ruleset_id}`\n@OutputOnly",
                    "type": "string"
                },
                "source": {
                    "$ref": "Source",
                    "description": "`Source` for the `Ruleset`."
                }
            },
            "type": "object"
        },
        "Empty": {
            "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
            "id": "Empty",
            "properties": {},
            "type": "object"
        },
        "File": {
            "description": "`File` containing source content.",
            "id": "File",
            "properties": {
                "name": {
                    "description": "File name.",
                    "type": "string"
                },
                "content": {
                    "description": "Textual Content.",
                    "type": "string"
                },
                "fingerprint": {
                    "description": "Fingerprint (e.g. github sha) associated with the `File`.",
                    "format": "byte",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ListReleasesResponse": {
            "description": "The response for FirebaseRulesService.ListReleases.",
            "id": "ListReleasesResponse",
            "properties": {
                "releases": {
                    "description": "List of `Release` instances.",
                    "items": {
                        "$ref": "Release"
                    },
                    "type": "array"
                },
                "nextPageToken": {
                    "description": "The pagination token to retrieve the next page of results. If the value is\nempty, no further results remain.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Release": {
            "description": "`Release` is a named reference to a `Ruleset`. Once a `Release` refers to a\n`Ruleset`, rules-enabled services will be able to enforce the `Ruleset`.",
            "id": "Release",
            "properties": {
                "createTime": {
                    "description": "Time the release was created.\n@OutputOnly",
                    "format": "google-datetime",
                    "type": "string"
                },
                "updateTime": {
                    "description": "Time the release was updated.\n@OutputOnly",
                    "format": "google-datetime",
                    "type": "string"
                },
                "name": {
                    "description": "Resource name for the `Release`.\n\n`Release` names may be structured `app1/prod/v2` or flat `app1_prod_v2`\nwhich affords developers a great deal of flexibility in mapping the name\nto the style that best fits their existing development practices. For\nexample, a name could refer to an environment, an app, a version, or some\ncombination of three.\n\nIn the table below, for the project name `projects/foo`, the following\nrelative release paths show how flat and structured names might be chosen\nto match a desired development / deployment strategy.\n\nUse Case     | Flat Name           | Structured Name\n-------------|---------------------|----------------\nEnvironments | releases/qa         | releases/qa\nApps         | releases/app1_qa    | releases/app1/qa\nVersions     | releases/app1_v2_qa | releases/app1/v2/qa\n\nThe delimiter between the release name path elements can be almost anything\nand it should work equally well with the release name list filter, but in\nmany ways the structured paths provide a clearer picture of the\nrelationship between `Release` instances.\n\nFormat: `projects/{project_id}/releases/{release_id}`",
                    "type": "string"
                },
                "rulesetName": {
                    "description": "Name of the `Ruleset` referred to by this `Release`. The `Ruleset` must\nexist the `Release` to be created.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TestRulesetResponse": {
            "description": "The response for FirebaseRulesService.TestRuleset.",
            "id": "TestRulesetResponse",
            "properties": {
                "issues": {
                    "description": "Syntactic and semantic `Source` issues of varying severity. Issues of\n`ERROR` severity will prevent tests from executing.",
                    "items": {
                        "$ref": "Issue"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "servicePath": "",
    "title": "Firebase Rules API",
    "version": "v1"
}