{
    "auth": {
        "oauth2": {
            "scopes": {
                "https://www.googleapis.com/auth/user.emails.read": {
                    "description": "View your email addresses"
                },
                "https://www.googleapis.com/auth/contacts": {
                    "description": "Manage your contacts"
                },
                "https://www.googleapis.com/auth/user.addresses.read": {
                    "description": "View your street addresses"
                },
                "https://www.googleapis.com/auth/user.phonenumbers.read": {
                    "description": "View your phone numbers"
                },
                "https://www.googleapis.com/auth/userinfo.email": {
                    "description": "View your email address"
                },
                "https://www.googleapis.com/auth/contacts.readonly": {
                    "description": "View your contacts"
                },
                "https://www.googleapis.com/auth/user.birthday.read": {
                    "description": "View your complete date of birth"
                },
                "https://www.googleapis.com/auth/plus.login": {
                    "description": "Know the list of people in your circles, your age range, and language"
                },
                "https://www.googleapis.com/auth/userinfo.profile": {
                    "description": "View your basic profile info"
                }
            }
        }
    },
    "basePath": "",
    "baseUrl": "https://people.googleapis.com/",
    "batchPath": "batch",
    "canonicalName": "People Service",
    "description": "Provides access to information about profiles and contacts.",
    "discoveryVersion": "v1",
    "documentationLink": "https://developers.google.com/people/",
    "icons": {
        "x16": "http://www.google.com/images/icons/product/search-16.gif",
        "x32": "http://www.google.com/images/icons/product/search-32.gif"
    },
    "id": "people:v1",
    "kind": "discovery#restDescription",
    "name": "people",
    "ownerDomain": "google.com",
    "ownerName": "Google",
    "parameters": {
        "alt": {
            "default": "json",
            "description": "Data format for response.",
            "enum": [
                "json",
                "media",
                "proto"
            ],
            "enumDescriptions": [
                "Responses with Content-Type of application/json",
                "Media download with context-dependent Content-Type",
                "Responses with Content-Type of application/x-protobuf"
            ],
            "location": "query",
            "type": "string"
        },
        "key": {
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
            "location": "query",
            "type": "string"
        },
        "access_token": {
            "description": "OAuth access token.",
            "location": "query",
            "type": "string"
        },
        "quotaUser": {
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
            "location": "query",
            "type": "string"
        },
        "pp": {
            "default": "true",
            "description": "Pretty-print response.",
            "location": "query",
            "type": "boolean"
        },
        "bearer_token": {
            "description": "OAuth bearer token.",
            "location": "query",
            "type": "string"
        },
        "oauth_token": {
            "description": "OAuth 2.0 token for the current user.",
            "location": "query",
            "type": "string"
        },
        "upload_protocol": {
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
            "location": "query",
            "type": "string"
        },
        "prettyPrint": {
            "default": "true",
            "description": "Returns response with indentations and line breaks.",
            "location": "query",
            "type": "boolean"
        },
        "fields": {
            "description": "Selector specifying which fields to include in a partial response.",
            "location": "query",
            "type": "string"
        },
        "uploadType": {
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
            "location": "query",
            "type": "string"
        },
        "$.xgafv": {
            "description": "V1 error format.",
            "enum": [
                "1",
                "2"
            ],
            "enumDescriptions": [
                "v1 error format",
                "v2 error format"
            ],
            "location": "query",
            "type": "string"
        },
        "callback": {
            "description": "JSONP",
            "location": "query",
            "type": "string"
        }
    },
    "protocol": "rest",
    "resources": {
        "people": {
            "methods": {
                "getBatchGet": {
                    "description": "Provides information about a list of specific people by specifying a list\nof requested resource names. Use `people/me` to indicate the authenticated\nuser.",
                    "httpMethod": "GET",
                    "id": "people.people.getBatchGet",
                    "parameterOrder": [],
                    "parameters": {
                        "requestMask.includeField": {
                            "description": "Required. Comma-separated list of person fields to be included in the\nresponse. Each path should start with `person.`: for example,\n`person.names` or `person.photos`.",
                            "format": "google-fieldmask",
                            "location": "query",
                            "type": "string"
                        },
                        "resourceNames": {
                            "description": "The resource name, such as one returned by\n[`people.connections.list`](/people/api/rest/v1/people.connections/list),\nof one of the people to provide information about. You can include this\nparameter up to 50 times in one request.",
                            "location": "query",
                            "repeated": true,
                            "type": "string"
                        }
                    },
                    "path": "v1/people:batchGet",
                    "response": {
                        "$ref": "GetPeopleResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/contacts",
                        "https://www.googleapis.com/auth/contacts.readonly",
                        "https://www.googleapis.com/auth/plus.login",
                        "https://www.googleapis.com/auth/user.addresses.read",
                        "https://www.googleapis.com/auth/user.birthday.read",
                        "https://www.googleapis.com/auth/user.emails.read",
                        "https://www.googleapis.com/auth/user.phonenumbers.read",
                        "https://www.googleapis.com/auth/userinfo.email",
                        "https://www.googleapis.com/auth/userinfo.profile"
                    ]
                },
                "get": {
                    "description": "Provides information about a person by specifying a resource name. Use\n`people/me` to indicate the authenticated user.",
                    "httpMethod": "GET",
                    "id": "people.people.get",
                    "parameterOrder": [
                        "resourceName"
                    ],
                    "parameters": {
                        "resourceName": {
                            "description": "The resource name of the person to provide information about.\n\n- To get information about the authenticated user, specify `people/me`.\n- To get information about any user, specify the resource name that\n  identifies the user, such as the resource names returned by\n  [`people.connections.list`](/people/api/rest/v1/people.connections/list).",
                            "location": "path",
                            "pattern": "^people/[^/]+$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMask.includeField": {
                            "description": "Required. Comma-separated list of person fields to be included in the\nresponse. Each path should start with `person.`: for example,\n`person.names` or `person.photos`.",
                            "format": "google-fieldmask",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/{+resourceName}",
                    "response": {
                        "$ref": "Person"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/contacts",
                        "https://www.googleapis.com/auth/contacts.readonly",
                        "https://www.googleapis.com/auth/plus.login",
                        "https://www.googleapis.com/auth/user.addresses.read",
                        "https://www.googleapis.com/auth/user.birthday.read",
                        "https://www.googleapis.com/auth/user.emails.read",
                        "https://www.googleapis.com/auth/user.phonenumbers.read",
                        "https://www.googleapis.com/auth/userinfo.email",
                        "https://www.googleapis.com/auth/userinfo.profile"
                    ]
                }
            },
            "resources": {
                "connections": {
                    "methods": {
                        "list": {
                            "description": "Provides a list of the authenticated user's contacts merged with any\nlinked profiles.",
                            "httpMethod": "GET",
                            "id": "people.people.connections.list",
                            "parameterOrder": [
                                "resourceName"
                            ],
                            "parameters": {
                                "requestMask.includeField": {
                                    "description": "Required. Comma-separated list of person fields to be included in the\nresponse. Each path should start with `person.`: for example,\n`person.names` or `person.photos`.",
                                    "format": "google-fieldmask",
                                    "location": "query",
                                    "type": "string"
                                },
                                "pageSize": {
                                    "description": "The number of connections to include in the response. Valid values are\nbetween 1 and 2000, inclusive. Defaults to 100.",
                                    "format": "int32",
                                    "location": "query",
                                    "type": "integer"
                                },
                                "syncToken": {
                                    "description": "A sync token, returned by a previous call to `people.connections.list`.\nOnly resources changed since the sync token was created will be returned.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "sortOrder": {
                                    "description": "The order in which the connections should be sorted. Defaults to\n`LAST_MODIFIED_ASCENDING`.",
                                    "enum": [
                                        "LAST_MODIFIED_ASCENDING",
                                        "FIRST_NAME_ASCENDING",
                                        "LAST_NAME_ASCENDING"
                                    ],
                                    "location": "query",
                                    "type": "string"
                                },
                                "requestSyncToken": {
                                    "description": "Whether the response should include a sync token, which can be used to get\nall changes since the last request.",
                                    "location": "query",
                                    "type": "boolean"
                                },
                                "resourceName": {
                                    "description": "The resource name to return connections for. Only `people/me` is valid.",
                                    "location": "path",
                                    "pattern": "^people/[^/]+$",
                                    "required": true,
                                    "type": "string"
                                },
                                "pageToken": {
                                    "description": "The token of the page to be returned.",
                                    "location": "query",
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+resourceName}/connections",
                            "response": {
                                "$ref": "ListConnectionsResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/contacts",
                                "https://www.googleapis.com/auth/contacts.readonly"
                            ]
                        }
                    }
                }
            }
        }
    },
    "revision": "20170608",
    "rootUrl": "https://people.googleapis.com/",
    "schemas": {
        "CoverPhoto": {
            "description": "A person's read-only cover photo. A large image shown on the person's\nprofile page that represents who they are or what they care about.",
            "id": "CoverPhoto",
            "properties": {
                "default": {
                    "description": "True if the cover photo is the default cover photo;\nfalse if the cover photo is a user-provided cover photo.",
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the cover photo."
                },
                "url": {
                    "description": "The URL of the cover photo.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Interest": {
            "description": "One of the person's interests.",
            "id": "Interest",
            "properties": {
                "value": {
                    "description": "The interest; for example, `stargazing`.",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the interest."
                }
            },
            "type": "object"
        },
        "ImClient": {
            "description": "A person's instant messaging client.",
            "id": "ImClient",
            "properties": {
                "formattedProtocol": {
                    "description": "The read-only protocol of the IM client formatted in the viewer's account\nlocale or the `Accept-Language` HTTP header locale.",
                    "type": "string"
                },
                "formattedType": {
                    "description": "The read-only type of the IM client translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale.",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the IM client."
                },
                "type": {
                    "description": "The type of the IM client. The type can be custom or predefined.\nPossible values include, but are not limited to, the following:\n\n* `home`\n* `work`\n* `other`",
                    "type": "string"
                },
                "protocol": {
                    "description": "The protocol of the IM client. The protocol can be custom or predefined.\nPossible values include, but are not limited to, the following:\n\n* `aim`\n* `msn`\n* `yahoo`\n* `skype`\n* `qq`\n* `googleTalk`\n* `icq`\n* `jabber`\n* `netMeeting`",
                    "type": "string"
                },
                "username": {
                    "description": "The user name used in the IM client.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Nickname": {
            "description": "A person's nickname.",
            "id": "Nickname",
            "properties": {
                "type": {
                    "description": "The type of the nickname.",
                    "enum": [
                        "DEFAULT",
                        "MAIDEN_NAME",
                        "INITIALS",
                        "GPLUS",
                        "OTHER_NAME"
                    ],
                    "enumDescriptions": [
                        "Generic nickname.",
                        "Maiden name or birth family name. Used when the person's family name has\nchanged as a result of marriage.",
                        "Initials.",
                        "Google+ profile nickname.",
                        "A professional affiliation or other name; for example, `Dr. Smith.`"
                    ],
                    "type": "string"
                },
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the nickname."
                },
                "value": {
                    "description": "The nickname.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EmailAddress": {
            "description": "A person's email address.",
            "id": "EmailAddress",
            "properties": {
                "displayName": {
                    "description": "The display name of the email.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the email address. The type can be custom or predefined.\nPossible values include, but are not limited to, the following:\n\n* `home`\n* `work`\n* `other`",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the email address."
                },
                "value": {
                    "description": "The email address.",
                    "type": "string"
                },
                "formattedType": {
                    "description": "The read-only type of the email address translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Skill": {
            "description": "A skill that the person has.",
            "id": "Skill",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the skill."
                },
                "value": {
                    "description": "The skill; for example, `underwater basket weaving`.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DomainMembership": {
            "description": "A Google Apps Domain membership.",
            "id": "DomainMembership",
            "properties": {
                "inViewerDomain": {
                    "description": "True if the person is in the viewer's Google Apps domain.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Membership": {
            "description": "A person's read-only membership in a group.",
            "id": "Membership",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the membership."
                },
                "domainMembership": {
                    "$ref": "DomainMembership",
                    "description": "The domain membership."
                },
                "contactGroupMembership": {
                    "$ref": "ContactGroupMembership",
                    "description": "The contact group membership."
                }
            },
            "type": "object"
        },
        "RelationshipStatus": {
            "description": "A person's read-only relationship status.",
            "id": "RelationshipStatus",
            "properties": {
                "formattedValue": {
                    "description": "The read-only value of the relationship status translated and formatted in\nthe viewer's account locale or the `Accept-Language` HTTP header locale.",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the relationship status."
                },
                "value": {
                    "description": "The relationship status. The value can be custom or predefined.\nPossible values include, but are not limited to, the following:\n\n* `single`\n* `inARelationship`\n* `engaged`\n* `married`\n* `itsComplicated`\n* `openRelationship`\n* `widowed`\n* `inDomesticPartnership`\n* `inCivilUnion`",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Date": {
            "description": "Represents a whole calendar date, for example a date of birth. The time\nof day and time zone are either specified elsewhere or are not\nsignificant. The date is relative to the\n[Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar).\nThe day may be 0 to represent a year and month where the day is not\nsignificant. The year may be 0 to represent a month and day independent\nof year; for example, anniversary date.",
            "id": "Date",
            "properties": {
                "day": {
                    "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0\nif specifying a year/month where the day is not significant.",
                    "format": "int32",
                    "type": "integer"
                },
                "year": {
                    "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without\na year.",
                    "format": "int32",
                    "type": "integer"
                },
                "month": {
                    "description": "Month of year. Must be from 1 to 12.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "Tagline": {
            "description": "A read-only brief one-line description of the person.",
            "id": "Tagline",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the tagline."
                },
                "value": {
                    "description": "The tagline.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Name": {
            "description": "A person's name. If the name is a mononym, the family name is empty.",
            "id": "Name",
            "properties": {
                "honorificPrefix": {
                    "description": "The honorific prefixes, such as `Mrs.` or `Dr.`",
                    "type": "string"
                },
                "phoneticHonorificSuffix": {
                    "description": "The honorific suffixes spelled as they sound.",
                    "type": "string"
                },
                "givenName": {
                    "description": "The given name.",
                    "type": "string"
                },
                "middleName": {
                    "description": "The middle name(s).",
                    "type": "string"
                },
                "phoneticHonorificPrefix": {
                    "description": "The honorific prefixes spelled as they sound.",
                    "type": "string"
                },
                "phoneticGivenName": {
                    "description": "The given name spelled as it sounds.",
                    "type": "string"
                },
                "phoneticFamilyName": {
                    "description": "The family name spelled as it sounds.",
                    "type": "string"
                },
                "familyName": {
                    "description": "The family name.",
                    "type": "string"
                },
                "phoneticMiddleName": {
                    "description": "The middle name(s) spelled as they sound.",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the name."
                },
                "phoneticFullName": {
                    "description": "The full name spelled as it sounds.",
                    "type": "string"
                },
                "displayNameLastFirst": {
                    "description": "The read-only display name with the last name first formatted according to\nthe locale specified by the viewer's account or the\n<code>Accept-Language</code> HTTP header.",
                    "type": "string"
                },
                "displayName": {
                    "description": "The read-only display name formatted according to the locale specified by\nthe viewer's account or the <code>Accept-Language</code> HTTP header.",
                    "type": "string"
                },
                "honorificSuffix": {
                    "description": "The honorific suffixes, such as `Jr.`",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BraggingRights": {
            "description": "A person's bragging rights.",
            "id": "BraggingRights",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the bragging rights."
                },
                "value": {
                    "description": "The bragging rights; for example, `climbed mount everest`.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Locale": {
            "description": "A person's locale preference.",
            "id": "Locale",
            "properties": {
                "value": {
                    "description": "The well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47)\nlanguage tag representing the locale.",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the locale."
                }
            },
            "type": "object"
        },
        "Organization": {
            "description": "A person's past or current organization. Overlapping date ranges are\npermitted.",
            "id": "Organization",
            "properties": {
                "symbol": {
                    "description": "The symbol associated with the organization; for example, a stock ticker\nsymbol, abbreviation, or acronym.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the organization.",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the organization."
                },
                "location": {
                    "description": "The location of the organization office the person works at.",
                    "type": "string"
                },
                "title": {
                    "description": "The person's job title at the organization.",
                    "type": "string"
                },
                "current": {
                    "description": "True if the organization is the person's current organization;\nfalse if the organization is a past organization.",
                    "type": "boolean"
                },
                "startDate": {
                    "$ref": "Date",
                    "description": "The start date when the person joined the organization."
                },
                "formattedType": {
                    "description": "The read-only type of the organization translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale.",
                    "type": "string"
                },
                "domain": {
                    "description": "The domain name associated with the organization; for example, `google.com`.",
                    "type": "string"
                },
                "department": {
                    "description": "The person's department at the organization.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the organization. The type can be custom or predefined.\nPossible values include, but are not limited to, the following:\n\n* `work`\n* `school`",
                    "type": "string"
                },
                "phoneticName": {
                    "description": "The phonetic name of the organization.",
                    "type": "string"
                },
                "jobDescription": {
                    "description": "The person's job description at the organization.",
                    "type": "string"
                },
                "endDate": {
                    "$ref": "Date",
                    "description": "The end date when the person left the organization."
                }
            },
            "type": "object"
        },
        "Biography": {
            "description": "A person's short biography.",
            "id": "Biography",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the biography."
                },
                "value": {
                    "description": "The short biography.",
                    "type": "string"
                },
                "contentType": {
                    "description": "The content type of the biography.",
                    "enum": [
                        "CONTENT_TYPE_UNSPECIFIED",
                        "TEXT_PLAIN",
                        "TEXT_HTML"
                    ],
                    "enumDescriptions": [
                        "Unspecified.",
                        "Plain text.",
                        "HTML text."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AgeRangeType": {
            "description": "A person's age range.",
            "id": "AgeRangeType",
            "properties": {
                "ageRange": {
                    "description": "The age range.",
                    "enum": [
                        "AGE_RANGE_UNSPECIFIED",
                        "LESS_THAN_EIGHTEEN",
                        "EIGHTEEN_TO_TWENTY",
                        "TWENTY_ONE_OR_OLDER"
                    ],
                    "enumDescriptions": [
                        "Unspecified.",
                        "Younger than eighteen.",
                        "Between eighteen and twenty.",
                        "Twenty-one and older."
                    ],
                    "type": "string"
                },
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the age range."
                }
            },
            "type": "object"
        },
        "FieldMetadata": {
            "description": "Metadata about a field.",
            "id": "FieldMetadata",
            "properties": {
                "primary": {
                    "description": "True if the field is the primary field; false if the field is a secondary\nfield.",
                    "type": "boolean"
                },
                "source": {
                    "$ref": "Source",
                    "description": "The source of the field."
                },
                "verified": {
                    "description": "True if the field is verified; false if the field is unverified. A\nverified field is typically a name, email address, phone number, or\nwebsite that has been confirmed to be owned by the person.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PersonResponse": {
            "description": "The response for a single person",
            "id": "PersonResponse",
            "properties": {
                "httpStatusCode": {
                    "description": "DEPRECATED(Please use status instead).\n[HTTP 1.1 status\ncode](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).",
                    "format": "int32",
                    "type": "integer"
                },
                "requestedResourceName": {
                    "description": "The original requested resource name. May be different than the resource\nname on the returned person.\n\nThe resource name can change when adding or removing fields that link a\ncontact and profile such as a verified email, verified phone number, or a\nprofile URL.",
                    "type": "string"
                },
                "person": {
                    "$ref": "Person",
                    "description": "The person."
                },
                "status": {
                    "$ref": "Status",
                    "description": "The status of the response."
                }
            },
            "type": "object"
        },
        "RelationshipInterest": {
            "description": "A person's read-only relationship interest .",
            "id": "RelationshipInterest",
            "properties": {
                "value": {
                    "description": "The kind of relationship the person is looking for. The value can be custom\nor predefined. Possible values include, but are not limited to, the\nfollowing values:\n\n* `friend`\n* `date`\n* `relationship`\n* `networking`",
                    "type": "string"
                },
                "formattedValue": {
                    "description": "The value of the relationship interest translated and formatted in the\nviewer's account locale or the locale specified in the Accept-Language\nHTTP header.",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the relationship interest."
                }
            },
            "type": "object"
        },
        "Source": {
            "description": "The source of a field.",
            "id": "Source",
            "properties": {
                "etag": {
                    "description": "The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the\nsource. Used for web cache validation. Only populated in\nperson.metadata.sources.",
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier within the source type generated by the server.",
                    "type": "string"
                },
                "profileMetadata": {
                    "$ref": "ProfileMetadata",
                    "description": "Metadata about a source of type PROFILE."
                },
                "type": {
                    "description": "The source type.",
                    "enum": [
                        "SOURCE_TYPE_UNSPECIFIED",
                        "ACCOUNT",
                        "PROFILE",
                        "DOMAIN_PROFILE",
                        "CONTACT"
                    ],
                    "enumDescriptions": [
                        "Unspecified.",
                        "[Google Account](https://accounts.google.com).",
                        "[Google profile](https://profiles.google.com). You can view the\nprofile at https://profiles.google.com/<id> where <id> is the source\nid.",
                        "[Google Apps domain profile](https://admin.google.com).",
                        "[Google contact](https://contacts.google.com). You can view the\ncontact at https://contact.google.com/<id> where <id> is the source\nid."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Relation": {
            "description": "A person's relation to another person.",
            "id": "Relation",
            "properties": {
                "type": {
                    "description": "The person's relation to the other person. The type can be custom or predefined.\nPossible values include, but are not limited to, the following values:\n\n* `spouse`\n* `child`\n* `mother`\n* `father`\n* `parent`\n* `brother`\n* `sister`\n* `friend`\n* `relative`\n* `domesticPartner`\n* `manager`\n* `assistant`\n* `referredBy`\n* `partner`",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the relation."
                },
                "formattedType": {
                    "description": "The type of the relation translated and formatted in the viewer's account\nlocale or the locale specified in the Accept-Language HTTP header.",
                    "type": "string"
                },
                "person": {
                    "description": "The name of the other person this relation refers to.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Occupation": {
            "description": "A person's occupation.",
            "id": "Occupation",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the occupation."
                },
                "value": {
                    "description": "The occupation; for example, `carpenter`.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Person": {
            "description": "Information about a person merged from various data sources such as the\nauthenticated user's contacts and profile data.\n\nMost fields can have multiple items. The items in a field have no guaranteed\norder, but each non-empty field is guaranteed to have exactly one field with\n`metadata.primary` set to true.",
            "id": "Person",
            "properties": {
                "resourceName": {
                    "description": "The resource name for the person, assigned by the server. An ASCII string\nwith a max length of 27 characters, in the form of `people/<person_id>`.",
                    "type": "string"
                },
                "interests": {
                    "description": "The person's interests.",
                    "items": {
                        "$ref": "Interest"
                    },
                    "type": "array"
                },
                "biographies": {
                    "description": "The person's biographies.",
                    "items": {
                        "$ref": "Biography"
                    },
                    "type": "array"
                },
                "skills": {
                    "description": "The person's skills.",
                    "items": {
                        "$ref": "Skill"
                    },
                    "type": "array"
                },
                "relationshipStatuses": {
                    "description": "The person's relationship statuses.",
                    "items": {
                        "$ref": "RelationshipStatus"
                    },
                    "type": "array"
                },
                "photos": {
                    "description": "The person's photos.",
                    "items": {
                        "$ref": "Photo"
                    },
                    "type": "array"
                },
                "ageRange": {
                    "description": "DEPRECATED(Please read person.age_ranges instead). The person's age range.",
                    "enum": [
                        "AGE_RANGE_UNSPECIFIED",
                        "LESS_THAN_EIGHTEEN",
                        "EIGHTEEN_TO_TWENTY",
                        "TWENTY_ONE_OR_OLDER"
                    ],
                    "enumDescriptions": [
                        "Unspecified.",
                        "Younger than eighteen.",
                        "Between eighteen and twenty.",
                        "Twenty-one and older."
                    ],
                    "type": "string"
                },
                "taglines": {
                    "description": "The person's taglines.",
                    "items": {
                        "$ref": "Tagline"
                    },
                    "type": "array"
                },
                "ageRanges": {
                    "description": "The person's age ranges.",
                    "items": {
                        "$ref": "AgeRangeType"
                    },
                    "type": "array"
                },
                "addresses": {
                    "description": "The person's street addresses.",
                    "items": {
                        "$ref": "Address"
                    },
                    "type": "array"
                },
                "events": {
                    "description": "The person's events.",
                    "items": {
                        "$ref": "Event"
                    },
                    "type": "array"
                },
                "memberships": {
                    "description": "The person's group memberships.",
                    "items": {
                        "$ref": "Membership"
                    },
                    "type": "array"
                },
                "phoneNumbers": {
                    "description": "The person's phone numbers.",
                    "items": {
                        "$ref": "PhoneNumber"
                    },
                    "type": "array"
                },
                "coverPhotos": {
                    "description": "The person's cover photos.",
                    "items": {
                        "$ref": "CoverPhoto"
                    },
                    "type": "array"
                },
                "imClients": {
                    "description": "The person's instant messaging clients.",
                    "items": {
                        "$ref": "ImClient"
                    },
                    "type": "array"
                },
                "birthdays": {
                    "description": "The person's birthdays.",
                    "items": {
                        "$ref": "Birthday"
                    },
                    "type": "array"
                },
                "locales": {
                    "description": "The person's locale preferences.",
                    "items": {
                        "$ref": "Locale"
                    },
                    "type": "array"
                },
                "relationshipInterests": {
                    "description": "The kind of relationship the person is looking for.",
                    "items": {
                        "$ref": "RelationshipInterest"
                    },
                    "type": "array"
                },
                "urls": {
                    "description": "The person's associated URLs.",
                    "items": {
                        "$ref": "Url"
                    },
                    "type": "array"
                },
                "nicknames": {
                    "description": "The person's nicknames.",
                    "items": {
                        "$ref": "Nickname"
                    },
                    "type": "array"
                },
                "names": {
                    "description": "The person's names.",
                    "items": {
                        "$ref": "Name"
                    },
                    "type": "array"
                },
                "relations": {
                    "description": "The person's relations.",
                    "items": {
                        "$ref": "Relation"
                    },
                    "type": "array"
                },
                "occupations": {
                    "description": "The person's occupations.",
                    "items": {
                        "$ref": "Occupation"
                    },
                    "type": "array"
                },
                "emailAddresses": {
                    "description": "The person's email addresses.",
                    "items": {
                        "$ref": "EmailAddress"
                    },
                    "type": "array"
                },
                "organizations": {
                    "description": "The person's past or current organizations.",
                    "items": {
                        "$ref": "Organization"
                    },
                    "type": "array"
                },
                "etag": {
                    "description": "The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the\nresource. Used for web cache validation.",
                    "type": "string"
                },
                "braggingRights": {
                    "description": "The person's bragging rights.",
                    "items": {
                        "$ref": "BraggingRights"
                    },
                    "type": "array"
                },
                "metadata": {
                    "$ref": "PersonMetadata",
                    "description": "Metadata about the person."
                },
                "residences": {
                    "description": "The person's residences.",
                    "items": {
                        "$ref": "Residence"
                    },
                    "type": "array"
                },
                "genders": {
                    "description": "The person's genders.",
                    "items": {
                        "$ref": "Gender"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "GetPeopleResponse": {
            "id": "GetPeopleResponse",
            "properties": {
                "responses": {
                    "description": "The response for each requested resource name.",
                    "items": {
                        "$ref": "PersonResponse"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Photo": {
            "description": "A person's read-only photo. A picture shown next to the person's name to\nhelp others recognize the person.",
            "id": "Photo",
            "properties": {
                "url": {
                    "description": "The URL of the photo. You can change the desired size by appending a query\nparameter `sz=<size>` at the end of the url. Example:\n`https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50`",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the photo."
                }
            },
            "type": "object"
        },
        "PhoneNumber": {
            "description": "A person's phone number.",
            "id": "PhoneNumber",
            "properties": {
                "type": {
                    "description": "The type of the phone number. The type can be custom or predefined.\nPossible values include, but are not limited to, the following:\n\n* `home`\n* `work`\n* `mobile`\n* `homeFax`\n* `workFax`\n* `otherFax`\n* `pager`\n* `workMobile`\n* `workPager`\n* `main`\n* `googleVoice`\n* `other`",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the phone number."
                },
                "value": {
                    "description": "The phone number.",
                    "type": "string"
                },
                "formattedType": {
                    "description": "The read-only type of the phone number translated and formatted in the\nviewer's account locale or the the `Accept-Language` HTTP header locale.",
                    "type": "string"
                },
                "canonicalForm": {
                    "description": "The read-only canonicalized [ITU-T E.164](https://law.resource.org/pub/us/cfr/ibr/004/itu-t.E.164.1.2008.pdf)\nform of the phone number.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ListConnectionsResponse": {
            "id": "ListConnectionsResponse",
            "properties": {
                "nextPageToken": {
                    "description": "The token that can be used to retrieve the next page of results.",
                    "type": "string"
                },
                "totalItems": {
                    "description": "The total number of items in the list without pagination.",
                    "format": "int32",
                    "type": "integer"
                },
                "nextSyncToken": {
                    "description": "The token that can be used to retrieve changes since the last request.",
                    "type": "string"
                },
                "connections": {
                    "description": "The list of people that the requestor is connected to.",
                    "items": {
                        "$ref": "Person"
                    },
                    "type": "array"
                },
                "totalPeople": {
                    "description": "DEPRECATED(Please use total_items). The total number of people in the list\nwithout pagination.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "Birthday": {
            "description": "A person's birthday. At least one of the `date` and `text` fields are\nspecified. The `date` and `text` fields typically represent the same\ndate, but are not guaranteed to.",
            "id": "Birthday",
            "properties": {
                "text": {
                    "description": "A free-form string representing the user's birthday.",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the birthday."
                },
                "date": {
                    "$ref": "Date",
                    "description": "The date of the birthday."
                }
            },
            "type": "object"
        },
        "Address": {
            "description": "A person's physical address. May be a P.O. box or street address. All fields\nare optional.",
            "id": "Address",
            "properties": {
                "region": {
                    "description": "The region of the address; for example, the state or province.",
                    "type": "string"
                },
                "streetAddress": {
                    "description": "The street address.",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the address."
                },
                "countryCode": {
                    "description": "The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm) country\ncode of the address.",
                    "type": "string"
                },
                "formattedType": {
                    "description": "The read-only type of the address translated and formatted in the viewer's\naccount locale or the `Accept-Language` HTTP header locale.",
                    "type": "string"
                },
                "city": {
                    "description": "The city of the address.",
                    "type": "string"
                },
                "formattedValue": {
                    "description": "The unstructured value of the address. If this is not set by the user it\nwill be automatically constructed from structured values.",
                    "type": "string"
                },
                "country": {
                    "description": "The country of the address.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the address. The type can be custom or predefined.\nPossible values include, but are not limited to, the following:\n\n* `home`\n* `work`\n* `other`",
                    "type": "string"
                },
                "extendedAddress": {
                    "description": "The extended address of the address; for example, the apartment number.",
                    "type": "string"
                },
                "poBox": {
                    "description": "The P.O. box of the address.",
                    "type": "string"
                },
                "postalCode": {
                    "description": "The postal code of the address.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Residence": {
            "description": "A person's past or current residence.",
            "id": "Residence",
            "properties": {
                "current": {
                    "description": "True if the residence is the person's current residence;\nfalse if the residence is a past residence.",
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the residence."
                },
                "value": {
                    "description": "The address of the residence.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Status": {
            "description": "The `Status` type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs. It is used by\n[gRPC](https://github.com/grpc). The error model is designed to be:\n\n- Simple to use and understand for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error message,\nand error details. The error code should be an enum value of\ngoogle.rpc.Code, but it may accept additional error codes if needed.  The\nerror message should be a developer-facing English message that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror message is needed, put the localized message in the error details or\nlocalize it in the client. The optional error details may contain arbitrary\ninformation about the error. There is a predefined set of error detail types\nin the package `google.rpc` that can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it\nis not necessarily the actual wire format. When the `Status` message is\nexposed in different client libraries and different wire protocols, it can be\nmapped differently. For example, it will likely be mapped to some exceptions\nin Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of\nenvironments, either with or without APIs, to provide a\nconsistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,\n    it may embed the `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may\n    have a `Status` message for error reporting.\n\n- Batch operations. If a client uses batch request and batch response, the\n    `Status` message should be used directly inside batch response, one for\n    each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation\n    results in its response, the status of those operations should be\n    represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could\n    be used directly after any stripping needed for security/privacy reasons.",
            "id": "Status",
            "properties": {
                "code": {
                    "description": "The status code, which should be an enum value of google.rpc.Code.",
                    "format": "int32",
                    "type": "integer"
                },
                "message": {
                    "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
                    "type": "string"
                },
                "details": {
                    "description": "A list of messages that carry the error details.  There will be a\ncommon set of message types for APIs to use.",
                    "items": {
                        "additionalProperties": {
                            "description": "Properties of the object. Contains field @type with type URL.",
                            "type": "any"
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ContactGroupMembership": {
            "description": "A Google contact group membership.",
            "id": "ContactGroupMembership",
            "properties": {
                "contactGroupId": {
                    "description": "The contact group ID for the contact group membership. The contact group\nID can be custom or predefined. Possible values include, but are not\nlimited to, the following:\n\n*  `myContacts`\n*  `starred`\n*  A numerical ID for user-created groups.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PersonMetadata": {
            "description": "The read-only metadata about a person.",
            "id": "PersonMetadata",
            "properties": {
                "previousResourceNames": {
                    "description": "Any former resource names this person has had. Populated only for\n[`connections.list`](/people/api/rest/v1/people.connections/list) requests\nthat include a sync token.\n\nThe resource name may change when adding or removing fields that link a\ncontact and profile such as a verified email, verified phone number, or\nprofile URL.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "sources": {
                    "description": "The sources of data for the person.",
                    "items": {
                        "$ref": "Source"
                    },
                    "type": "array"
                },
                "deleted": {
                    "description": "True if the person resource has been deleted. Populated only for\n[`connections.list`](/people/api/rest/v1/people.connections/list) requests\nthat include a sync token.",
                    "type": "boolean"
                },
                "objectType": {
                    "description": "DEPRECATED(Please read person.metadata.sources.profile_metadata instead).\nThe type of the person object.",
                    "enum": [
                        "OBJECT_TYPE_UNSPECIFIED",
                        "PERSON",
                        "PAGE"
                    ],
                    "enumDescriptions": [
                        "Unspecified.",
                        "Person.",
                        "[Google+ Page.](http://www.google.com/+/brands/)"
                    ],
                    "type": "string"
                },
                "linkedPeopleResourceNames": {
                    "description": "Resource names of people linked to this resource.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Event": {
            "description": "An event related to the person.",
            "id": "Event",
            "properties": {
                "formattedType": {
                    "description": "The read-only type of the event translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the event. The type can be custom or predefined.\nPossible values include, but are not limited to, the following:\n\n* `anniversary`\n* `other`",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the event."
                },
                "date": {
                    "$ref": "Date",
                    "description": "The date of the event."
                }
            },
            "type": "object"
        },
        "ProfileMetadata": {
            "description": "The read-only metadata about a profile.",
            "id": "ProfileMetadata",
            "properties": {
                "objectType": {
                    "description": "The profile object type.",
                    "enum": [
                        "OBJECT_TYPE_UNSPECIFIED",
                        "PERSON",
                        "PAGE"
                    ],
                    "enumDescriptions": [
                        "Unspecified.",
                        "Person.",
                        "[Google+ Page.](http://www.google.com/+/brands/)"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Gender": {
            "description": "A person's gender.",
            "id": "Gender",
            "properties": {
                "formattedValue": {
                    "description": "The read-only value of the gender translated and formatted in the viewer's\naccount locale or the `Accept-Language` HTTP header locale.",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the gender."
                },
                "value": {
                    "description": "The gender for the person. The gender can be custom or predefined.\nPossible values include, but are not limited to, the\nfollowing:\n\n* `male`\n* `female`\n* `other`\n* `unknown`",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Url": {
            "description": "A person's associated URLs.",
            "id": "Url",
            "properties": {
                "type": {
                    "description": "The type of the URL. The type can be custom or predefined.\nPossible values include, but are not limited to, the following:\n\n* `home`\n* `work`\n* `blog`\n* `profile`\n* `homePage`\n* `ftp`\n* `reservations`\n* `appInstallPage`: website for a Google+ application.\n* `other`",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the URL."
                },
                "value": {
                    "description": "The URL.",
                    "type": "string"
                },
                "formattedType": {
                    "description": "The read-only type of the URL translated and formatted in the viewer's\naccount locale or the `Accept-Language` HTTP header locale.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "servicePath": "",
    "title": "Google People API",
    "version": "v1"
}