{
    "auth": {
        "oauth2": {
            "scopes": {
                "https://www.googleapis.com/auth/contacts": {
                    "description": "Manage your contacts"
                },
                "https://www.googleapis.com/auth/contacts.readonly": {
                    "description": "View your contacts"
                },
                "https://www.googleapis.com/auth/plus.login": {
                    "description": "Know your basic profile info and list of people in your circles."
                },
                "https://www.googleapis.com/auth/user.addresses.read": {
                    "description": "View your street addresses"
                },
                "https://www.googleapis.com/auth/user.birthday.read": {
                    "description": "View your complete date of birth"
                },
                "https://www.googleapis.com/auth/user.emails.read": {
                    "description": "View your email addresses"
                },
                "https://www.googleapis.com/auth/user.phonenumbers.read": {
                    "description": "View your phone numbers"
                },
                "https://www.googleapis.com/auth/userinfo.email": {
                    "description": "View your email address"
                },
                "https://www.googleapis.com/auth/userinfo.profile": {
                    "description": "View your basic profile info"
                }
            }
        }
    },
    "basePath": "",
    "baseUrl": "https://people.googleapis.com/",
    "batchPath": "batch",
    "description": "The Google People API service gives access to information about profiles and contacts.",
    "discoveryVersion": "v1",
    "documentationLink": "https://developers.google.com/people/",
    "etag": "\"bRFOOrZKfO9LweMbPqu0kcu6De8/tzwJjoO4XDFgwNQjmiM8lPsFMzA\"",
    "icons": {
        "x16": "http://www.google.com/images/icons/product/search-16.gif",
        "x32": "http://www.google.com/images/icons/product/search-32.gif"
    },
    "id": "people:v1",
    "kind": "discovery#restDescription",
    "name": "people",
    "ownerDomain": "google.com",
    "ownerName": "Google",
    "parameters": {
        "access_token": {
            "description": "OAuth access token.",
            "location": "query",
            "type": "string"
        },
        "alt": {
            "default": "json",
            "description": "Data format for response.",
            "enumDescriptions": [
                "Responses with Content-Type of application/json",
                "Media download with context-dependent Content-Type",
                "Responses with Content-Type of application/x-protobuf"
            ],
            "location": "query",
            "type": "string"
        },
        "bearer_token": {
            "description": "OAuth bearer token.",
            "location": "query",
            "type": "string"
        },
        "callback": {
            "description": "JSONP",
            "location": "query",
            "type": "string"
        },
        "fields": {
            "description": "Selector specifying which fields to include in a partial response.",
            "location": "query",
            "type": "string"
        },
        "key": {
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
            "location": "query",
            "type": "string"
        },
        "oauth_token": {
            "description": "OAuth 2.0 token for the current user.",
            "location": "query",
            "type": "string"
        },
        "pp": {
            "default": "true",
            "description": "Pretty-print response.",
            "location": "query",
            "type": "boolean"
        },
        "prettyPrint": {
            "default": "true",
            "description": "Returns response with indentations and line breaks.",
            "location": "query",
            "type": "boolean"
        },
        "quotaUser": {
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
            "location": "query",
            "type": "string"
        },
        "upload_protocol": {
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
            "location": "query",
            "type": "string"
        },
        "uploadType": {
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
            "location": "query",
            "type": "string"
        },
        "$.xgafv": {
            "description": "V1 error format.",
            "enumDescriptions": [
                "v1 error format",
                "v2 error format"
            ],
            "location": "query",
            "type": "string"
        }
    },
    "protocol": "rest",
    "resources": {
        "people": {
            "methods": {
                "get": {
                    "description": "Provides information about a person resource for a resource name. Use `people/me` to indicate the authenticated user.",
                    "httpMethod": "GET",
                    "id": "people.people.get",
                    "parameterOrder": [
                        "resourceName"
                    ],
                    "parameters": {
                        "resourceName": {
                            "description": "The resource name of the person to provide information about. - To get information about the authenticated user, specify `people/me`. - To get information about any user, specify the resource name that identifies the user, such as the resource names returned by [`people.connections.list`](/people/api/rest/v1/people.connections/list).",
                            "location": "path",
                            "pattern": "^people/[^/]*$",
                            "required": true,
                            "type": "string"
                        },
                        "requestMask.includeField": {
                            "description": "Comma-separated list of fields to be included in the response. Omitting this field will include all fields. Each path should start with `person.`: for example, `person.names` or `person.photos`.",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/{+resourceName}",
                    "response": {
                        "$ref": "Person"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/contacts",
                        "https://www.googleapis.com/auth/contacts.readonly",
                        "https://www.googleapis.com/auth/plus.login",
                        "https://www.googleapis.com/auth/user.addresses.read",
                        "https://www.googleapis.com/auth/user.birthday.read",
                        "https://www.googleapis.com/auth/user.emails.read",
                        "https://www.googleapis.com/auth/user.phonenumbers.read",
                        "https://www.googleapis.com/auth/userinfo.email",
                        "https://www.googleapis.com/auth/userinfo.profile"
                    ]
                },
                "getBatchGet": {
                    "description": "Provides information about a list of specific people by specifying a list of requested resource names. Use `people/me` to indicate the authenticated user.",
                    "httpMethod": "GET",
                    "id": "people.people.getBatchGet",
                    "parameters": {
                        "resourceNames": {
                            "description": "The resource name, such as one returned by [`people.connections.list`](/people/api/rest/v1/people.connections/list), of one of the people to provide information about. You can include this parameter up to 50 times in one request.",
                            "location": "query",
                            "repeated": true,
                            "type": "string"
                        },
                        "requestMask.includeField": {
                            "description": "Comma-separated list of fields to be included in the response. Omitting this field will include all fields. Each path should start with `person.`: for example, `person.names` or `person.photos`.",
                            "location": "query",
                            "type": "string"
                        }
                    },
                    "path": "v1/people:batchGet",
                    "response": {
                        "$ref": "GetPeopleResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/contacts",
                        "https://www.googleapis.com/auth/contacts.readonly",
                        "https://www.googleapis.com/auth/plus.login",
                        "https://www.googleapis.com/auth/user.addresses.read",
                        "https://www.googleapis.com/auth/user.birthday.read",
                        "https://www.googleapis.com/auth/user.emails.read",
                        "https://www.googleapis.com/auth/user.phonenumbers.read",
                        "https://www.googleapis.com/auth/userinfo.email",
                        "https://www.googleapis.com/auth/userinfo.profile"
                    ]
                }
            },
            "resources": {
                "connections": {
                    "methods": {
                        "list": {
                            "description": "Provides a list of the authenticated user's contacts merged with any linked profiles.",
                            "httpMethod": "GET",
                            "id": "people.people.connections.list",
                            "parameterOrder": [
                                "resourceName"
                            ],
                            "parameters": {
                                "resourceName": {
                                    "description": "The resource name to return connections for. Only `people/me` is valid.",
                                    "location": "path",
                                    "pattern": "^people/[^/]*$",
                                    "required": true,
                                    "type": "string"
                                },
                                "pageToken": {
                                    "description": "The token of the page to be returned.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "pageSize": {
                                    "description": "The number of connections to include in the response. Valid values are between 1 and 500, inclusive. Defaults to 100.",
                                    "format": "int32",
                                    "location": "query",
                                    "type": "integer"
                                },
                                "sortOrder": {
                                    "description": "The order in which the connections should be sorted. Defaults to `LAST_MODIFIED_ASCENDING`.",
                                    "enum": [
                                        "LAST_MODIFIED_ASCENDING",
                                        "FIRST_NAME_ASCENDING",
                                        "LAST_NAME_ASCENDING"
                                    ],
                                    "location": "query",
                                    "type": "string"
                                },
                                "syncToken": {
                                    "description": "A sync token, returned by a previous call to `people.connections.list`. Only resources changed since the sync token was created are returned.",
                                    "location": "query",
                                    "type": "string"
                                },
                                "requestMask.includeField": {
                                    "description": "Comma-separated list of fields to be included in the response. Omitting this field will include all fields. Each path should start with `person.`: for example, `person.names` or `person.photos`.",
                                    "location": "query",
                                    "type": "string"
                                }
                            },
                            "path": "v1/{+resourceName}/connections",
                            "response": {
                                "$ref": "ListConnectionsResponse"
                            },
                            "scopes": [
                                "https://www.googleapis.com/auth/contacts",
                                "https://www.googleapis.com/auth/contacts.readonly"
                            ]
                        }
                    }
                }
            }
        }
    },
    "revision": "20160210",
    "rootUrl": "https://people.googleapis.com/",
    "schemas": {
        "Person": {
            "description": "Information about a person merged from various data sources such as the authenticated user's contacts and profile data. Fields other than IDs, metadata, and group memberships are user-edited. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with `metadata.primary` set to true.",
            "id": "Person",
            "properties": {
                "resourceName": {
                    "description": "The resource name for the person, assigned by the server. An ASCII string with a max length of 27 characters. Always starts with `people/`.",
                    "type": "string"
                },
                "etag": {
                    "description": "The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "PersonMetadata",
                    "description": "Metadata about the person."
                },
                "locales": {
                    "description": "The person's locale preferences.",
                    "items": {
                        "$ref": "Locale"
                    },
                    "type": "array"
                },
                "names": {
                    "description": "The person's names.",
                    "items": {
                        "$ref": "Name"
                    },
                    "type": "array"
                },
                "nicknames": {
                    "description": "The person's nicknames.",
                    "items": {
                        "$ref": "Nickname"
                    },
                    "type": "array"
                },
                "coverPhotos": {
                    "description": "The person's cover photos.",
                    "items": {
                        "$ref": "CoverPhoto"
                    },
                    "type": "array"
                },
                "photos": {
                    "description": "The person's photos.",
                    "items": {
                        "$ref": "Photo"
                    },
                    "type": "array"
                },
                "genders": {
                    "description": "The person's genders.",
                    "items": {
                        "$ref": "Gender"
                    },
                    "type": "array"
                },
                "ageRange": {
                    "description": "The person's age range.",
                    "enum": [
                        "AGE_RANGE_UNSPECIFIED",
                        "LESS_THAN_EIGHTEEN",
                        "EIGHTEEN_TO_TWENTY",
                        "TWENTY_ONE_OR_OLDER"
                    ],
                    "type": "string"
                },
                "birthdays": {
                    "description": "The person's birthdays.",
                    "items": {
                        "$ref": "Birthday"
                    },
                    "type": "array"
                },
                "events": {
                    "description": "The person's events.",
                    "items": {
                        "$ref": "Event"
                    },
                    "type": "array"
                },
                "addresses": {
                    "description": "The person's street addresses.",
                    "items": {
                        "$ref": "Address"
                    },
                    "type": "array"
                },
                "residences": {
                    "description": "The person's residences.",
                    "items": {
                        "$ref": "Residence"
                    },
                    "type": "array"
                },
                "emailAddresses": {
                    "description": "The person's email addresses.",
                    "items": {
                        "$ref": "EmailAddress"
                    },
                    "type": "array"
                },
                "phoneNumbers": {
                    "description": "The person's phone numbers.",
                    "items": {
                        "$ref": "PhoneNumber"
                    },
                    "type": "array"
                },
                "imClients": {
                    "description": "The person's instant messaging clients.",
                    "items": {
                        "$ref": "ImClient"
                    },
                    "type": "array"
                },
                "taglines": {
                    "description": "The person's taglines.",
                    "items": {
                        "$ref": "Tagline"
                    },
                    "type": "array"
                },
                "biographies": {
                    "description": "The person's biographies.",
                    "items": {
                        "$ref": "Biography"
                    },
                    "type": "array"
                },
                "urls": {
                    "description": "The person's associated URLs.",
                    "items": {
                        "$ref": "Url"
                    },
                    "type": "array"
                },
                "organizations": {
                    "description": "The person's past or current organizations.",
                    "items": {
                        "$ref": "Organization"
                    },
                    "type": "array"
                },
                "occupations": {
                    "description": "The person's occupations.",
                    "items": {
                        "$ref": "Occupation"
                    },
                    "type": "array"
                },
                "interests": {
                    "description": "The person's interests.",
                    "items": {
                        "$ref": "Interest"
                    },
                    "type": "array"
                },
                "skills": {
                    "description": "The person's skills.",
                    "items": {
                        "$ref": "Skill"
                    },
                    "type": "array"
                },
                "braggingRights": {
                    "description": "The person's bragging rights.",
                    "items": {
                        "$ref": "BraggingRights"
                    },
                    "type": "array"
                },
                "relations": {
                    "description": "The person's relations.",
                    "items": {
                        "$ref": "Relation"
                    },
                    "type": "array"
                },
                "relationshipInterests": {
                    "description": "The kind of relationship the person is looking for.",
                    "items": {
                        "$ref": "RelationshipInterest"
                    },
                    "type": "array"
                },
                "relationshipStatuses": {
                    "description": "The person's relationship statuses.",
                    "items": {
                        "$ref": "RelationshipStatus"
                    },
                    "type": "array"
                },
                "memberships": {
                    "description": "The person's group memberships.",
                    "items": {
                        "$ref": "Membership"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PersonMetadata": {
            "description": "Metadata about a person.",
            "id": "PersonMetadata",
            "properties": {
                "sources": {
                    "description": "The sources of data for the person.",
                    "items": {
                        "$ref": "Source"
                    },
                    "type": "array"
                },
                "previousResourceNames": {
                    "description": "Any former resource names this person has had. Populated only for [`connections.list`](/people/api/rest/v1/people.connections/list) requests that include a sync token. The resource name may change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or profile URL.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "deleted": {
                    "description": "True if the person resource has been deleted. Populated only for [`connections.list`](/people/api/rest/v1/people.connections/list) requests that include a sync token.",
                    "type": "boolean"
                },
                "objectType": {
                    "description": "The type of the person object.",
                    "enum": [
                        "OBJECT_TYPE_UNSPECIFIED",
                        "PERSON",
                        "PAGE"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Source": {
            "description": "The source of a field.",
            "id": "Source",
            "properties": {
                "type": {
                    "description": "The source type.",
                    "enum": [
                        "OTHER",
                        "ACCOUNT",
                        "PROFILE",
                        "DOMAIN_PROFILE",
                        "CONTACT"
                    ],
                    "type": "string"
                },
                "id": {
                    "description": "A unique identifier within the source type generated by the server.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Locale": {
            "description": "A person's locale preference.",
            "id": "Locale",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the locale."
                },
                "value": {
                    "description": "The well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47) language tag representing the locale.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FieldMetadata": {
            "description": "Metadata about a field.",
            "id": "FieldMetadata",
            "properties": {
                "primary": {
                    "description": "True if the field is the primary field; false if the field is a secondary field.",
                    "type": "boolean"
                },
                "verified": {
                    "description": "True if the field is verified; false if the field is unverified. A verified field is typically a name, email address, phone number, or website that has been confirmed to be owned by the person.",
                    "type": "boolean"
                },
                "source": {
                    "$ref": "Source",
                    "description": "The source of the field."
                }
            },
            "type": "object"
        },
        "Name": {
            "description": "A person's name. If the name is a mononym, the family name is empty.",
            "id": "Name",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the name."
                },
                "displayName": {
                    "description": "The display name formatted according to the locale specified by the viewer's account or the Accept-Language HTTP header.",
                    "type": "string"
                },
                "familyName": {
                    "description": "The family name.",
                    "type": "string"
                },
                "givenName": {
                    "description": "The given name.",
                    "type": "string"
                },
                "middleName": {
                    "description": "The middle name(s).",
                    "type": "string"
                },
                "honorificPrefix": {
                    "description": "The honorific prefixes, such as `Mrs.` or `Dr.`",
                    "type": "string"
                },
                "honorificSuffix": {
                    "description": "The honorific suffixes, such as `Jr.`",
                    "type": "string"
                },
                "phoneticFamilyName": {
                    "description": "The family name spelled as it sounds.",
                    "type": "string"
                },
                "phoneticGivenName": {
                    "description": "The given name spelled as it sounds.",
                    "type": "string"
                },
                "phoneticMiddleName": {
                    "description": "The middle name(s) spelled as they sound.",
                    "type": "string"
                },
                "phoneticHonorificPrefix": {
                    "description": "The honorific prefixes spelled as they sound.",
                    "type": "string"
                },
                "phoneticHonorificSuffix": {
                    "description": "The honorific suffixes spelled as they sound.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Nickname": {
            "description": "A person's nickname.",
            "id": "Nickname",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the nickname."
                },
                "value": {
                    "description": "The nickname.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the nickname.",
                    "enum": [
                        "DEFAULT",
                        "MAIDEN_NAME",
                        "INITIALS",
                        "GPLUS",
                        "OTHER_NAME"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CoverPhoto": {
            "description": "A person's cover photo. A large image shown on the person's profile page that represents who they are or what they care about.",
            "id": "CoverPhoto",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the cover photo."
                },
                "url": {
                    "description": "The URL of the cover photo.",
                    "type": "string"
                },
                "default": {
                    "description": "True if the cover photo is the default cover photo; false if the cover photo is a user-provided cover photo.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Photo": {
            "description": "A person's photo. A picture shown next to the person's name to help others recognize the person.",
            "id": "Photo",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the photo."
                },
                "url": {
                    "description": "The URL of the photo.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Gender": {
            "description": "A person's gender.",
            "id": "Gender",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the gender."
                },
                "value": {
                    "description": "The gender for the person. The gender can be custom or predefined. Possible values include, but are not limited to, the following: * `male` * `female` * `other` * `unknown`",
                    "type": "string"
                },
                "formattedValue": {
                    "description": "The read-only value of the gender translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Birthday": {
            "description": "A person's birthday. At least one of the `date` and `text` fields are specified. The `date` and `text` fields typically represent the same date, but are not guaranteed to.",
            "id": "Birthday",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the birthday."
                },
                "date": {
                    "$ref": "Date",
                    "description": "The date of the birthday."
                },
                "text": {
                    "description": "A free-form string representing the user's birthday.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Date": {
            "description": "Represents a whole calendar date, for example a date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the [Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The day may be 0 to represent a year and month where the day is not significant. The year may be 0 to represent a month and day independent of year; for example, anniversary date.",
            "id": "Date",
            "properties": {
                "year": {
                    "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.",
                    "format": "int32",
                    "type": "integer"
                },
                "month": {
                    "description": "Month of year. Must be from 1 to 12.",
                    "format": "int32",
                    "type": "integer"
                },
                "day": {
                    "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a year/month where the day is not significant.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "Event": {
            "description": "An event related to the person.",
            "id": "Event",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the event."
                },
                "date": {
                    "$ref": "Date",
                    "description": "The date of the event."
                },
                "type": {
                    "description": "The type of the event. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `anniversary` * `other`",
                    "type": "string"
                },
                "formattedType": {
                    "description": "The read-only type of the event translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Address": {
            "description": "A person's physical address. May be a P.O. box or street address. All fields are optional.",
            "id": "Address",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the address."
                },
                "formattedValue": {
                    "description": "The read-only value of the address formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the address. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `home` * `work` * `other`",
                    "type": "string"
                },
                "formattedType": {
                    "description": "The read-only type of the address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
                    "type": "string"
                },
                "poBox": {
                    "description": "The P.O. box of the address.",
                    "type": "string"
                },
                "streetAddress": {
                    "description": "The street address.",
                    "type": "string"
                },
                "extendedAddress": {
                    "description": "The extended address of the address; for example, the apartment number.",
                    "type": "string"
                },
                "city": {
                    "description": "The city of the address.",
                    "type": "string"
                },
                "region": {
                    "description": "The region of the address; for example, the state or province.",
                    "type": "string"
                },
                "postalCode": {
                    "description": "The postal code of the address.",
                    "type": "string"
                },
                "country": {
                    "description": "The country of the address.",
                    "type": "string"
                },
                "countryCode": {
                    "description": "The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm) country code of the address.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Residence": {
            "description": "A person's past or current residence.",
            "id": "Residence",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the residence."
                },
                "value": {
                    "description": "The address of the residence.",
                    "type": "string"
                },
                "current": {
                    "description": "True if the residence is the person's current residence; false if the residence is a past residence.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "EmailAddress": {
            "description": "A person's email address.",
            "id": "EmailAddress",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the email address."
                },
                "value": {
                    "description": "The email address.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the email address. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `home` * `work` * `other`",
                    "type": "string"
                },
                "formattedType": {
                    "description": "The read-only type of the email address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PhoneNumber": {
            "description": "A person's phone number.",
            "id": "PhoneNumber",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the phone number."
                },
                "value": {
                    "description": "The phone number.",
                    "type": "string"
                },
                "canonicalForm": {
                    "description": "The read-only canonicalized [ITU-T E.164](https://law.resource.org/pub/us/cfr/ibr/004/itu-t.E.164.1.2008.pdf) form of the phone number.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the phone number. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `home` * `work` * `mobile` * `homeFax` * `workFax` * `otherFax` * `pager` * `workMobile` * `workPager` * `main` * `googleVoice` * `other`",
                    "type": "string"
                },
                "formattedType": {
                    "description": "The read-only type of the phone number translated and formatted in the viewer's account locale or the the `Accept-Language` HTTP header locale.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ImClient": {
            "description": "A person's instant messaging client.",
            "id": "ImClient",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the IM client."
                },
                "username": {
                    "description": "The user name used in the IM client.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the IM client. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `home` * `work` * `other`",
                    "type": "string"
                },
                "formattedType": {
                    "description": "The read-only type of the IM client translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
                    "type": "string"
                },
                "protocol": {
                    "description": "The protocol of the IM client. The protocol can be custom or predefined. Possible values include, but are not limited to, the following: * `aim` * `msn` * `yahoo` * `skype` * `qq` * `googleTalk` * `icq` * `jabber` * `netMeeting`",
                    "type": "string"
                },
                "formattedProtocol": {
                    "description": "The read-only protocol of the IM client formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Tagline": {
            "description": "A brief one-line description of the person.",
            "id": "Tagline",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the tagline."
                },
                "value": {
                    "description": "The tagline.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Biography": {
            "description": "A person's short biography.",
            "id": "Biography",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the biography."
                },
                "value": {
                    "description": "The short biography.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Url": {
            "description": "A person's associated URLs.",
            "id": "Url",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the URL."
                },
                "value": {
                    "description": "The URL.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the URL. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `home` * `work` * `blog` * `profile` * `homePage` * `ftp` * `reservations` * `appInstallPage`: website for a Google+ application. * `other`",
                    "type": "string"
                },
                "formattedType": {
                    "description": "The read-only type of the URL translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Organization": {
            "description": "A person's past or current organization. Overlapping date ranges are permitted.",
            "id": "Organization",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the organization."
                },
                "type": {
                    "description": "The type of the organization. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `work` * `school`",
                    "type": "string"
                },
                "formattedType": {
                    "description": "The read-only type of the organization translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
                    "type": "string"
                },
                "startDate": {
                    "$ref": "Date",
                    "description": "The start date when the person joined the organization."
                },
                "endDate": {
                    "$ref": "Date",
                    "description": "The end date when the person left the organization."
                },
                "current": {
                    "description": "True if the organization is the person's current organization; false if the organization is a past organization.",
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the organization.",
                    "type": "string"
                },
                "phoneticName": {
                    "description": "The phonetic name of the organization.",
                    "type": "string"
                },
                "department": {
                    "description": "The person's department at the organization.",
                    "type": "string"
                },
                "title": {
                    "description": "The person's job title at the organization.",
                    "type": "string"
                },
                "jobDescription": {
                    "description": "The person's job description at the organization.",
                    "type": "string"
                },
                "symbol": {
                    "description": "The symbol associated with the organization; for example, a stock ticker symbol, abbreviation, or acronym.",
                    "type": "string"
                },
                "domain": {
                    "description": "The domain name associated with the organization; for example, `google.com`.",
                    "type": "string"
                },
                "location": {
                    "description": "The location of the organization office the person works at.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Occupation": {
            "description": "A person's occupation.",
            "id": "Occupation",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the occupation."
                },
                "value": {
                    "description": "The occupation; for example, `carpenter`.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Interest": {
            "description": "One of the person's interests.",
            "id": "Interest",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the interest."
                },
                "value": {
                    "description": "The interest; for example, `stargazing`.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Skill": {
            "description": "A skill that the person has.",
            "id": "Skill",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the skill."
                },
                "value": {
                    "description": "The skill; for example, `underwater basket weaving`.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BraggingRights": {
            "description": "A person's bragging rights.",
            "id": "BraggingRights",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the bragging rights."
                },
                "value": {
                    "description": "The bragging rights; for example, `climbed mount everest`.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Relation": {
            "description": "A person's relation to another person.",
            "id": "Relation",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the relation."
                },
                "person": {
                    "description": "The name of the other person this relation refers to.",
                    "type": "string"
                },
                "type": {
                    "description": "The person's relation to the other person. The type can be custom or predefined. Possible values include, but are not limited to, the following values: * `spouse` * `child` * `mother` * `father` * `parent` * `brother` * `sister` * `friend` * `relative` * `domesticPartner` * `manager` * `assistant` * `referredBy` * `partner`",
                    "type": "string"
                },
                "formattedType": {
                    "description": "The type of the relation translated and formatted in the viewer's account locale or the locale specified in the Accept-Language HTTP header.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RelationshipInterest": {
            "description": "The kind of relationship the person is looking for.",
            "id": "RelationshipInterest",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the relationship interest."
                },
                "value": {
                    "description": "The kind of relationship the person is looking for. The value can be custom or predefined. Possible values include, but are not limited to, the following values: * `friend` * `date` * `relationship` * `networking`",
                    "type": "string"
                },
                "formattedValue": {
                    "description": "The value of the relationship interest translated and formatted in the viewer's account locale or the locale specified in the Accept-Language HTTP header.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RelationshipStatus": {
            "description": "A person's relationship status.",
            "id": "RelationshipStatus",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the relationship status."
                },
                "value": {
                    "description": "The relationship status. The value can be custom or predefined. Possible values include, but are not limited to, the following: * `single` * `inARelationship` * `engaged` * `married` * `itsComplicated` * `openRelationship` * `widowed` * `inDomesticPartnership` * `inCivilUnion`",
                    "type": "string"
                },
                "formattedValue": {
                    "description": "The read-only value of the relationship status translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Membership": {
            "description": "A person's membership in a group.",
            "id": "Membership",
            "properties": {
                "metadata": {
                    "$ref": "FieldMetadata",
                    "description": "Metadata about the membership."
                },
                "contactGroupMembership": {
                    "$ref": "ContactGroupMembership",
                    "description": "The contact group membership."
                },
                "domainMembership": {
                    "$ref": "DomainMembership",
                    "description": "The domain membership."
                }
            },
            "type": "object"
        },
        "ContactGroupMembership": {
            "description": "A Google contact group membership.",
            "id": "ContactGroupMembership",
            "properties": {
                "contactGroupId": {
                    "description": "The contact group ID for the contact group membership. The contact group ID can be custom or predefined. Possible values include, but are not limited to, the following: * `myContacts` * `starred` * A numerical ID for user-created groups.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DomainMembership": {
            "description": "A Google Apps Domain membership.",
            "id": "DomainMembership",
            "properties": {
                "inViewerDomain": {
                    "description": "True if the person is in the viewer's Google Apps domain.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "GetPeopleResponse": {
            "id": "GetPeopleResponse",
            "properties": {
                "responses": {
                    "description": "The response for each requested resource name.",
                    "items": {
                        "$ref": "PersonResponse"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PersonResponse": {
            "description": "The response for a single person",
            "id": "PersonResponse",
            "properties": {
                "httpStatusCode": {
                    "description": "[HTTP 1.1 status code](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).",
                    "format": "int32",
                    "type": "integer"
                },
                "person": {
                    "$ref": "Person",
                    "description": "The person."
                },
                "requestedResourceName": {
                    "description": "The original requested resource name. May be different than the resource name on the returned person. The resource name can change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or a profile URL.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ListConnectionsResponse": {
            "id": "ListConnectionsResponse",
            "properties": {
                "connections": {
                    "description": "The list of people that the requestor is connected to.",
                    "items": {
                        "$ref": "Person"
                    },
                    "type": "array"
                },
                "nextPageToken": {
                    "description": "The token that can be used to retrieve the next page of results.",
                    "type": "string"
                },
                "nextSyncToken": {
                    "description": "The token that can be used to retrieve changes since the last request.",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "servicePath": "",
    "title": "Google People API",
    "version": "v1"
}